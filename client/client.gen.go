// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
	TokenAuthScopes  = "tokenAuth.Scopes"
)

// Defines values for BriefDNSSECKeyTemplateAlgorithm.
const (
	BriefDNSSECKeyTemplateAlgorithmECDSAP256SHA256 BriefDNSSECKeyTemplateAlgorithm = "ECDSAP256SHA256"
	BriefDNSSECKeyTemplateAlgorithmECDSAP384SHA384 BriefDNSSECKeyTemplateAlgorithm = "ECDSAP384SHA384"
	BriefDNSSECKeyTemplateAlgorithmED25519         BriefDNSSECKeyTemplateAlgorithm = "ED25519"
	BriefDNSSECKeyTemplateAlgorithmED448           BriefDNSSECKeyTemplateAlgorithm = "ED448"
	BriefDNSSECKeyTemplateAlgorithmRSASHA256       BriefDNSSECKeyTemplateAlgorithm = "RSASHA256"
)

// Defines values for BriefDNSSECKeyTemplateKeySize.
const (
	BriefDNSSECKeyTemplateKeySizeN1024 BriefDNSSECKeyTemplateKeySize = 1024
	BriefDNSSECKeyTemplateKeySizeN2048 BriefDNSSECKeyTemplateKeySize = 2048
	BriefDNSSECKeyTemplateKeySizeN3072 BriefDNSSECKeyTemplateKeySize = 3072
	BriefDNSSECKeyTemplateKeySizeN4096 BriefDNSSECKeyTemplateKeySize = 4096
	BriefDNSSECKeyTemplateKeySizeN512  BriefDNSSECKeyTemplateKeySize = 512
)

// Defines values for BriefDNSSECKeyTemplateType.
const (
	BriefDNSSECKeyTemplateTypeCSK BriefDNSSECKeyTemplateType = "CSK"
	BriefDNSSECKeyTemplateTypeKSK BriefDNSSECKeyTemplateType = "KSK"
	BriefDNSSECKeyTemplateTypeZSK BriefDNSSECKeyTemplateType = "ZSK"
)

// Defines values for BriefDNSSECKeyTemplateRequestAlgorithm.
const (
	BriefDNSSECKeyTemplateRequestAlgorithmECDSAP256SHA256 BriefDNSSECKeyTemplateRequestAlgorithm = "ECDSAP256SHA256"
	BriefDNSSECKeyTemplateRequestAlgorithmECDSAP384SHA384 BriefDNSSECKeyTemplateRequestAlgorithm = "ECDSAP384SHA384"
	BriefDNSSECKeyTemplateRequestAlgorithmED25519         BriefDNSSECKeyTemplateRequestAlgorithm = "ED25519"
	BriefDNSSECKeyTemplateRequestAlgorithmED448           BriefDNSSECKeyTemplateRequestAlgorithm = "ED448"
	BriefDNSSECKeyTemplateRequestAlgorithmRSASHA256       BriefDNSSECKeyTemplateRequestAlgorithm = "RSASHA256"
)

// Defines values for BriefDNSSECKeyTemplateRequestKeySize.
const (
	BriefDNSSECKeyTemplateRequestKeySizeN1024 BriefDNSSECKeyTemplateRequestKeySize = 1024
	BriefDNSSECKeyTemplateRequestKeySizeN2048 BriefDNSSECKeyTemplateRequestKeySize = 2048
	BriefDNSSECKeyTemplateRequestKeySizeN3072 BriefDNSSECKeyTemplateRequestKeySize = 3072
	BriefDNSSECKeyTemplateRequestKeySizeN4096 BriefDNSSECKeyTemplateRequestKeySize = 4096
	BriefDNSSECKeyTemplateRequestKeySizeN512  BriefDNSSECKeyTemplateRequestKeySize = 512
)

// Defines values for BriefDNSSECKeyTemplateRequestType.
const (
	BriefDNSSECKeyTemplateRequestTypeCSK BriefDNSSECKeyTemplateRequestType = "CSK"
	BriefDNSSECKeyTemplateRequestTypeKSK BriefDNSSECKeyTemplateRequestType = "KSK"
	BriefDNSSECKeyTemplateRequestTypeZSK BriefDNSSECKeyTemplateRequestType = "ZSK"
)

// Defines values for BriefDNSSECPolicyStatus.
const (
	BriefDNSSECPolicyStatusActive   BriefDNSSECPolicyStatus = "active"
	BriefDNSSECPolicyStatusInactive BriefDNSSECPolicyStatus = "inactive"
)

// Defines values for BriefDNSSECPolicyRequestStatus.
const (
	BriefDNSSECPolicyRequestStatusActive   BriefDNSSECPolicyRequestStatus = "active"
	BriefDNSSECPolicyRequestStatusInactive BriefDNSSECPolicyRequestStatus = "inactive"
)

// Defines values for BriefIPAddressFamilyLabel.
const (
	BriefIPAddressFamilyLabelIPv4 BriefIPAddressFamilyLabel = "IPv4"
	BriefIPAddressFamilyLabelIPv6 BriefIPAddressFamilyLabel = "IPv6"
)

// Defines values for BriefIPAddressFamilyValue.
const (
	BriefIPAddressFamilyValueN4 BriefIPAddressFamilyValue = 4
	BriefIPAddressFamilyValueN6 BriefIPAddressFamilyValue = 6
)

// Defines values for BriefPrefixFamilyLabel.
const (
	BriefPrefixFamilyLabelIPv4 BriefPrefixFamilyLabel = "IPv4"
	BriefPrefixFamilyLabelIPv6 BriefPrefixFamilyLabel = "IPv6"
)

// Defines values for BriefPrefixFamilyValue.
const (
	BriefPrefixFamilyValueN4 BriefPrefixFamilyValue = 4
	BriefPrefixFamilyValueN6 BriefPrefixFamilyValue = 6
)

// Defines values for DNSSECKeyTemplateAlgorithm.
const (
	DNSSECKeyTemplateAlgorithmECDSAP256SHA256 DNSSECKeyTemplateAlgorithm = "ECDSAP256SHA256"
	DNSSECKeyTemplateAlgorithmECDSAP384SHA384 DNSSECKeyTemplateAlgorithm = "ECDSAP384SHA384"
	DNSSECKeyTemplateAlgorithmED25519         DNSSECKeyTemplateAlgorithm = "ED25519"
	DNSSECKeyTemplateAlgorithmED448           DNSSECKeyTemplateAlgorithm = "ED448"
	DNSSECKeyTemplateAlgorithmRSASHA256       DNSSECKeyTemplateAlgorithm = "RSASHA256"
)

// Defines values for DNSSECKeyTemplateKeySize.
const (
	DNSSECKeyTemplateKeySizeN1024 DNSSECKeyTemplateKeySize = 1024
	DNSSECKeyTemplateKeySizeN2048 DNSSECKeyTemplateKeySize = 2048
	DNSSECKeyTemplateKeySizeN3072 DNSSECKeyTemplateKeySize = 3072
	DNSSECKeyTemplateKeySizeN4096 DNSSECKeyTemplateKeySize = 4096
	DNSSECKeyTemplateKeySizeN512  DNSSECKeyTemplateKeySize = 512
)

// Defines values for DNSSECKeyTemplateType.
const (
	DNSSECKeyTemplateTypeCSK DNSSECKeyTemplateType = "CSK"
	DNSSECKeyTemplateTypeKSK DNSSECKeyTemplateType = "KSK"
	DNSSECKeyTemplateTypeZSK DNSSECKeyTemplateType = "ZSK"
)

// Defines values for DNSSECKeyTemplateRequestAlgorithm.
const (
	DNSSECKeyTemplateRequestAlgorithmECDSAP256SHA256 DNSSECKeyTemplateRequestAlgorithm = "ECDSAP256SHA256"
	DNSSECKeyTemplateRequestAlgorithmECDSAP384SHA384 DNSSECKeyTemplateRequestAlgorithm = "ECDSAP384SHA384"
	DNSSECKeyTemplateRequestAlgorithmED25519         DNSSECKeyTemplateRequestAlgorithm = "ED25519"
	DNSSECKeyTemplateRequestAlgorithmED448           DNSSECKeyTemplateRequestAlgorithm = "ED448"
	DNSSECKeyTemplateRequestAlgorithmRSASHA256       DNSSECKeyTemplateRequestAlgorithm = "RSASHA256"
)

// Defines values for DNSSECKeyTemplateRequestKeySize.
const (
	DNSSECKeyTemplateRequestKeySizeN1024 DNSSECKeyTemplateRequestKeySize = 1024
	DNSSECKeyTemplateRequestKeySizeN2048 DNSSECKeyTemplateRequestKeySize = 2048
	DNSSECKeyTemplateRequestKeySizeN3072 DNSSECKeyTemplateRequestKeySize = 3072
	DNSSECKeyTemplateRequestKeySizeN4096 DNSSECKeyTemplateRequestKeySize = 4096
	DNSSECKeyTemplateRequestKeySizeN512  DNSSECKeyTemplateRequestKeySize = 512
)

// Defines values for DNSSECKeyTemplateRequestType.
const (
	DNSSECKeyTemplateRequestTypeCSK DNSSECKeyTemplateRequestType = "CSK"
	DNSSECKeyTemplateRequestTypeKSK DNSSECKeyTemplateRequestType = "KSK"
	DNSSECKeyTemplateRequestTypeZSK DNSSECKeyTemplateRequestType = "ZSK"
)

// Defines values for DNSSECPolicyCdsDigestTypes.
const (
	DNSSECPolicyCdsDigestTypesSHA256 DNSSECPolicyCdsDigestTypes = "SHA256"
	DNSSECPolicyCdsDigestTypesSHA384 DNSSECPolicyCdsDigestTypes = "SHA384"
)

// Defines values for DNSSECPolicyStatus.
const (
	DNSSECPolicyStatusActive   DNSSECPolicyStatus = "active"
	DNSSECPolicyStatusInactive DNSSECPolicyStatus = "inactive"
)

// Defines values for DNSSECPolicyRequestCdsDigestTypes.
const (
	DNSSECPolicyRequestCdsDigestTypesSHA256 DNSSECPolicyRequestCdsDigestTypes = "SHA256"
	DNSSECPolicyRequestCdsDigestTypesSHA384 DNSSECPolicyRequestCdsDigestTypes = "SHA384"
)

// Defines values for DNSSECPolicyRequestStatus.
const (
	DNSSECPolicyRequestStatusActive   DNSSECPolicyRequestStatus = "active"
	DNSSECPolicyRequestStatusInactive DNSSECPolicyRequestStatus = "inactive"
)

// Defines values for NestedDNSSECPolicyStatus.
const (
	NestedDNSSECPolicyStatusActive   NestedDNSSECPolicyStatus = "active"
	NestedDNSSECPolicyStatusInactive NestedDNSSECPolicyStatus = "inactive"
)

// Defines values for NestedRecordStatus.
const (
	NestedRecordStatusActive   NestedRecordStatus = "active"
	NestedRecordStatusInactive NestedRecordStatus = "inactive"
)

// Defines values for NestedRecordType.
const (
	NestedRecordTypeA          NestedRecordType = "A"
	NestedRecordTypeA6         NestedRecordType = "A6"
	NestedRecordTypeAAAA       NestedRecordType = "AAAA"
	NestedRecordTypeAFSDB      NestedRecordType = "AFSDB"
	NestedRecordTypeAMTRELAY   NestedRecordType = "AMTRELAY"
	NestedRecordTypeAPL        NestedRecordType = "APL"
	NestedRecordTypeAVC        NestedRecordType = "AVC"
	NestedRecordTypeCAA        NestedRecordType = "CAA"
	NestedRecordTypeCDNSKEY    NestedRecordType = "CDNSKEY"
	NestedRecordTypeCDS        NestedRecordType = "CDS"
	NestedRecordTypeCERT       NestedRecordType = "CERT"
	NestedRecordTypeCNAME      NestedRecordType = "CNAME"
	NestedRecordTypeCSYNC      NestedRecordType = "CSYNC"
	NestedRecordTypeDHCID      NestedRecordType = "DHCID"
	NestedRecordTypeDLV        NestedRecordType = "DLV"
	NestedRecordTypeDNAME      NestedRecordType = "DNAME"
	NestedRecordTypeDNSKEY     NestedRecordType = "DNSKEY"
	NestedRecordTypeDS         NestedRecordType = "DS"
	NestedRecordTypeEUI48      NestedRecordType = "EUI48"
	NestedRecordTypeEUI64      NestedRecordType = "EUI64"
	NestedRecordTypeGPOS       NestedRecordType = "GPOS"
	NestedRecordTypeHINFO      NestedRecordType = "HINFO"
	NestedRecordTypeHIP        NestedRecordType = "HIP"
	NestedRecordTypeHTTPS      NestedRecordType = "HTTPS"
	NestedRecordTypeIPSECKEY   NestedRecordType = "IPSECKEY"
	NestedRecordTypeISDN       NestedRecordType = "ISDN"
	NestedRecordTypeKEY        NestedRecordType = "KEY"
	NestedRecordTypeKX         NestedRecordType = "KX"
	NestedRecordTypeL32        NestedRecordType = "L32"
	NestedRecordTypeL64        NestedRecordType = "L64"
	NestedRecordTypeLOC        NestedRecordType = "LOC"
	NestedRecordTypeLP         NestedRecordType = "LP"
	NestedRecordTypeMB         NestedRecordType = "MB"
	NestedRecordTypeMD         NestedRecordType = "MD"
	NestedRecordTypeMF         NestedRecordType = "MF"
	NestedRecordTypeMG         NestedRecordType = "MG"
	NestedRecordTypeMINFO      NestedRecordType = "MINFO"
	NestedRecordTypeMR         NestedRecordType = "MR"
	NestedRecordTypeMX         NestedRecordType = "MX"
	NestedRecordTypeNAPTR      NestedRecordType = "NAPTR"
	NestedRecordTypeNID        NestedRecordType = "NID"
	NestedRecordTypeNINFO      NestedRecordType = "NINFO"
	NestedRecordTypeNS         NestedRecordType = "NS"
	NestedRecordTypeNSAP       NestedRecordType = "NSAP"
	NestedRecordTypeNSAPPTR    NestedRecordType = "NSAP_PTR"
	NestedRecordTypeNSEC       NestedRecordType = "NSEC"
	NestedRecordTypeNSEC3      NestedRecordType = "NSEC3"
	NestedRecordTypeNSEC3PARAM NestedRecordType = "NSEC3PARAM"
	NestedRecordTypeNULL       NestedRecordType = "NULL"
	NestedRecordTypeNXT        NestedRecordType = "NXT"
	NestedRecordTypeOPENPGPKEY NestedRecordType = "OPENPGPKEY"
	NestedRecordTypePTR        NestedRecordType = "PTR"
	NestedRecordTypePX         NestedRecordType = "PX"
	NestedRecordTypeRESINFO    NestedRecordType = "RESINFO"
	NestedRecordTypeRP         NestedRecordType = "RP"
	NestedRecordTypeRRSIG      NestedRecordType = "RRSIG"
	NestedRecordTypeRT         NestedRecordType = "RT"
	NestedRecordTypeSIG        NestedRecordType = "SIG"
	NestedRecordTypeSMIMEA     NestedRecordType = "SMIMEA"
	NestedRecordTypeSOA        NestedRecordType = "SOA"
	NestedRecordTypeSPF        NestedRecordType = "SPF"
	NestedRecordTypeSRV        NestedRecordType = "SRV"
	NestedRecordTypeSSHFP      NestedRecordType = "SSHFP"
	NestedRecordTypeSVCB       NestedRecordType = "SVCB"
	NestedRecordTypeTA         NestedRecordType = "TA"
	NestedRecordTypeTLSA       NestedRecordType = "TLSA"
	NestedRecordTypeTXT        NestedRecordType = "TXT"
	NestedRecordTypeTYPE0      NestedRecordType = "TYPE0"
	NestedRecordTypeUNSPEC     NestedRecordType = "UNSPEC"
	NestedRecordTypeURI        NestedRecordType = "URI"
	NestedRecordTypeWALLET     NestedRecordType = "WALLET"
	NestedRecordTypeWKS        NestedRecordType = "WKS"
	NestedRecordTypeX25        NestedRecordType = "X25"
	NestedRecordTypeZONEMD     NestedRecordType = "ZONEMD"
)

// Defines values for NestedRecordTemplateStatus.
const (
	NestedRecordTemplateStatusActive   NestedRecordTemplateStatus = "active"
	NestedRecordTemplateStatusInactive NestedRecordTemplateStatus = "inactive"
)

// Defines values for NestedRecordTemplateType.
const (
	NestedRecordTemplateTypeA          NestedRecordTemplateType = "A"
	NestedRecordTemplateTypeA6         NestedRecordTemplateType = "A6"
	NestedRecordTemplateTypeAAAA       NestedRecordTemplateType = "AAAA"
	NestedRecordTemplateTypeAFSDB      NestedRecordTemplateType = "AFSDB"
	NestedRecordTemplateTypeAMTRELAY   NestedRecordTemplateType = "AMTRELAY"
	NestedRecordTemplateTypeAPL        NestedRecordTemplateType = "APL"
	NestedRecordTemplateTypeAVC        NestedRecordTemplateType = "AVC"
	NestedRecordTemplateTypeCAA        NestedRecordTemplateType = "CAA"
	NestedRecordTemplateTypeCDNSKEY    NestedRecordTemplateType = "CDNSKEY"
	NestedRecordTemplateTypeCDS        NestedRecordTemplateType = "CDS"
	NestedRecordTemplateTypeCERT       NestedRecordTemplateType = "CERT"
	NestedRecordTemplateTypeCNAME      NestedRecordTemplateType = "CNAME"
	NestedRecordTemplateTypeCSYNC      NestedRecordTemplateType = "CSYNC"
	NestedRecordTemplateTypeDHCID      NestedRecordTemplateType = "DHCID"
	NestedRecordTemplateTypeDLV        NestedRecordTemplateType = "DLV"
	NestedRecordTemplateTypeDNAME      NestedRecordTemplateType = "DNAME"
	NestedRecordTemplateTypeDNSKEY     NestedRecordTemplateType = "DNSKEY"
	NestedRecordTemplateTypeDS         NestedRecordTemplateType = "DS"
	NestedRecordTemplateTypeEUI48      NestedRecordTemplateType = "EUI48"
	NestedRecordTemplateTypeEUI64      NestedRecordTemplateType = "EUI64"
	NestedRecordTemplateTypeGPOS       NestedRecordTemplateType = "GPOS"
	NestedRecordTemplateTypeHINFO      NestedRecordTemplateType = "HINFO"
	NestedRecordTemplateTypeHIP        NestedRecordTemplateType = "HIP"
	NestedRecordTemplateTypeHTTPS      NestedRecordTemplateType = "HTTPS"
	NestedRecordTemplateTypeIPSECKEY   NestedRecordTemplateType = "IPSECKEY"
	NestedRecordTemplateTypeISDN       NestedRecordTemplateType = "ISDN"
	NestedRecordTemplateTypeKEY        NestedRecordTemplateType = "KEY"
	NestedRecordTemplateTypeKX         NestedRecordTemplateType = "KX"
	NestedRecordTemplateTypeL32        NestedRecordTemplateType = "L32"
	NestedRecordTemplateTypeL64        NestedRecordTemplateType = "L64"
	NestedRecordTemplateTypeLOC        NestedRecordTemplateType = "LOC"
	NestedRecordTemplateTypeLP         NestedRecordTemplateType = "LP"
	NestedRecordTemplateTypeMB         NestedRecordTemplateType = "MB"
	NestedRecordTemplateTypeMD         NestedRecordTemplateType = "MD"
	NestedRecordTemplateTypeMF         NestedRecordTemplateType = "MF"
	NestedRecordTemplateTypeMG         NestedRecordTemplateType = "MG"
	NestedRecordTemplateTypeMINFO      NestedRecordTemplateType = "MINFO"
	NestedRecordTemplateTypeMR         NestedRecordTemplateType = "MR"
	NestedRecordTemplateTypeMX         NestedRecordTemplateType = "MX"
	NestedRecordTemplateTypeNAPTR      NestedRecordTemplateType = "NAPTR"
	NestedRecordTemplateTypeNID        NestedRecordTemplateType = "NID"
	NestedRecordTemplateTypeNINFO      NestedRecordTemplateType = "NINFO"
	NestedRecordTemplateTypeNS         NestedRecordTemplateType = "NS"
	NestedRecordTemplateTypeNSAP       NestedRecordTemplateType = "NSAP"
	NestedRecordTemplateTypeNSAPPTR    NestedRecordTemplateType = "NSAP_PTR"
	NestedRecordTemplateTypeNSEC       NestedRecordTemplateType = "NSEC"
	NestedRecordTemplateTypeNSEC3      NestedRecordTemplateType = "NSEC3"
	NestedRecordTemplateTypeNSEC3PARAM NestedRecordTemplateType = "NSEC3PARAM"
	NestedRecordTemplateTypeNULL       NestedRecordTemplateType = "NULL"
	NestedRecordTemplateTypeNXT        NestedRecordTemplateType = "NXT"
	NestedRecordTemplateTypeOPENPGPKEY NestedRecordTemplateType = "OPENPGPKEY"
	NestedRecordTemplateTypePTR        NestedRecordTemplateType = "PTR"
	NestedRecordTemplateTypePX         NestedRecordTemplateType = "PX"
	NestedRecordTemplateTypeRESINFO    NestedRecordTemplateType = "RESINFO"
	NestedRecordTemplateTypeRP         NestedRecordTemplateType = "RP"
	NestedRecordTemplateTypeRRSIG      NestedRecordTemplateType = "RRSIG"
	NestedRecordTemplateTypeRT         NestedRecordTemplateType = "RT"
	NestedRecordTemplateTypeSIG        NestedRecordTemplateType = "SIG"
	NestedRecordTemplateTypeSMIMEA     NestedRecordTemplateType = "SMIMEA"
	NestedRecordTemplateTypeSOA        NestedRecordTemplateType = "SOA"
	NestedRecordTemplateTypeSPF        NestedRecordTemplateType = "SPF"
	NestedRecordTemplateTypeSRV        NestedRecordTemplateType = "SRV"
	NestedRecordTemplateTypeSSHFP      NestedRecordTemplateType = "SSHFP"
	NestedRecordTemplateTypeSVCB       NestedRecordTemplateType = "SVCB"
	NestedRecordTemplateTypeTA         NestedRecordTemplateType = "TA"
	NestedRecordTemplateTypeTLSA       NestedRecordTemplateType = "TLSA"
	NestedRecordTemplateTypeTXT        NestedRecordTemplateType = "TXT"
	NestedRecordTemplateTypeTYPE0      NestedRecordTemplateType = "TYPE0"
	NestedRecordTemplateTypeUNSPEC     NestedRecordTemplateType = "UNSPEC"
	NestedRecordTemplateTypeURI        NestedRecordTemplateType = "URI"
	NestedRecordTemplateTypeWALLET     NestedRecordTemplateType = "WALLET"
	NestedRecordTemplateTypeWKS        NestedRecordTemplateType = "WKS"
	NestedRecordTemplateTypeX25        NestedRecordTemplateType = "X25"
	NestedRecordTemplateTypeZONEMD     NestedRecordTemplateType = "ZONEMD"
)

// Defines values for NestedRecordTemplateRequestStatus.
const (
	NestedRecordTemplateRequestStatusActive   NestedRecordTemplateRequestStatus = "active"
	NestedRecordTemplateRequestStatusInactive NestedRecordTemplateRequestStatus = "inactive"
)

// Defines values for NestedRecordTemplateRequestType.
const (
	NestedRecordTemplateRequestTypeA          NestedRecordTemplateRequestType = "A"
	NestedRecordTemplateRequestTypeA6         NestedRecordTemplateRequestType = "A6"
	NestedRecordTemplateRequestTypeAAAA       NestedRecordTemplateRequestType = "AAAA"
	NestedRecordTemplateRequestTypeAFSDB      NestedRecordTemplateRequestType = "AFSDB"
	NestedRecordTemplateRequestTypeAMTRELAY   NestedRecordTemplateRequestType = "AMTRELAY"
	NestedRecordTemplateRequestTypeAPL        NestedRecordTemplateRequestType = "APL"
	NestedRecordTemplateRequestTypeAVC        NestedRecordTemplateRequestType = "AVC"
	NestedRecordTemplateRequestTypeCAA        NestedRecordTemplateRequestType = "CAA"
	NestedRecordTemplateRequestTypeCDNSKEY    NestedRecordTemplateRequestType = "CDNSKEY"
	NestedRecordTemplateRequestTypeCDS        NestedRecordTemplateRequestType = "CDS"
	NestedRecordTemplateRequestTypeCERT       NestedRecordTemplateRequestType = "CERT"
	NestedRecordTemplateRequestTypeCNAME      NestedRecordTemplateRequestType = "CNAME"
	NestedRecordTemplateRequestTypeCSYNC      NestedRecordTemplateRequestType = "CSYNC"
	NestedRecordTemplateRequestTypeDHCID      NestedRecordTemplateRequestType = "DHCID"
	NestedRecordTemplateRequestTypeDLV        NestedRecordTemplateRequestType = "DLV"
	NestedRecordTemplateRequestTypeDNAME      NestedRecordTemplateRequestType = "DNAME"
	NestedRecordTemplateRequestTypeDNSKEY     NestedRecordTemplateRequestType = "DNSKEY"
	NestedRecordTemplateRequestTypeDS         NestedRecordTemplateRequestType = "DS"
	NestedRecordTemplateRequestTypeEUI48      NestedRecordTemplateRequestType = "EUI48"
	NestedRecordTemplateRequestTypeEUI64      NestedRecordTemplateRequestType = "EUI64"
	NestedRecordTemplateRequestTypeGPOS       NestedRecordTemplateRequestType = "GPOS"
	NestedRecordTemplateRequestTypeHINFO      NestedRecordTemplateRequestType = "HINFO"
	NestedRecordTemplateRequestTypeHIP        NestedRecordTemplateRequestType = "HIP"
	NestedRecordTemplateRequestTypeHTTPS      NestedRecordTemplateRequestType = "HTTPS"
	NestedRecordTemplateRequestTypeIPSECKEY   NestedRecordTemplateRequestType = "IPSECKEY"
	NestedRecordTemplateRequestTypeISDN       NestedRecordTemplateRequestType = "ISDN"
	NestedRecordTemplateRequestTypeKEY        NestedRecordTemplateRequestType = "KEY"
	NestedRecordTemplateRequestTypeKX         NestedRecordTemplateRequestType = "KX"
	NestedRecordTemplateRequestTypeL32        NestedRecordTemplateRequestType = "L32"
	NestedRecordTemplateRequestTypeL64        NestedRecordTemplateRequestType = "L64"
	NestedRecordTemplateRequestTypeLOC        NestedRecordTemplateRequestType = "LOC"
	NestedRecordTemplateRequestTypeLP         NestedRecordTemplateRequestType = "LP"
	NestedRecordTemplateRequestTypeMB         NestedRecordTemplateRequestType = "MB"
	NestedRecordTemplateRequestTypeMD         NestedRecordTemplateRequestType = "MD"
	NestedRecordTemplateRequestTypeMF         NestedRecordTemplateRequestType = "MF"
	NestedRecordTemplateRequestTypeMG         NestedRecordTemplateRequestType = "MG"
	NestedRecordTemplateRequestTypeMINFO      NestedRecordTemplateRequestType = "MINFO"
	NestedRecordTemplateRequestTypeMR         NestedRecordTemplateRequestType = "MR"
	NestedRecordTemplateRequestTypeMX         NestedRecordTemplateRequestType = "MX"
	NestedRecordTemplateRequestTypeNAPTR      NestedRecordTemplateRequestType = "NAPTR"
	NestedRecordTemplateRequestTypeNID        NestedRecordTemplateRequestType = "NID"
	NestedRecordTemplateRequestTypeNINFO      NestedRecordTemplateRequestType = "NINFO"
	NestedRecordTemplateRequestTypeNS         NestedRecordTemplateRequestType = "NS"
	NestedRecordTemplateRequestTypeNSAP       NestedRecordTemplateRequestType = "NSAP"
	NestedRecordTemplateRequestTypeNSAPPTR    NestedRecordTemplateRequestType = "NSAP_PTR"
	NestedRecordTemplateRequestTypeNSEC       NestedRecordTemplateRequestType = "NSEC"
	NestedRecordTemplateRequestTypeNSEC3      NestedRecordTemplateRequestType = "NSEC3"
	NestedRecordTemplateRequestTypeNSEC3PARAM NestedRecordTemplateRequestType = "NSEC3PARAM"
	NestedRecordTemplateRequestTypeNULL       NestedRecordTemplateRequestType = "NULL"
	NestedRecordTemplateRequestTypeNXT        NestedRecordTemplateRequestType = "NXT"
	NestedRecordTemplateRequestTypeOPENPGPKEY NestedRecordTemplateRequestType = "OPENPGPKEY"
	NestedRecordTemplateRequestTypePTR        NestedRecordTemplateRequestType = "PTR"
	NestedRecordTemplateRequestTypePX         NestedRecordTemplateRequestType = "PX"
	NestedRecordTemplateRequestTypeRESINFO    NestedRecordTemplateRequestType = "RESINFO"
	NestedRecordTemplateRequestTypeRP         NestedRecordTemplateRequestType = "RP"
	NestedRecordTemplateRequestTypeRRSIG      NestedRecordTemplateRequestType = "RRSIG"
	NestedRecordTemplateRequestTypeRT         NestedRecordTemplateRequestType = "RT"
	NestedRecordTemplateRequestTypeSIG        NestedRecordTemplateRequestType = "SIG"
	NestedRecordTemplateRequestTypeSMIMEA     NestedRecordTemplateRequestType = "SMIMEA"
	NestedRecordTemplateRequestTypeSOA        NestedRecordTemplateRequestType = "SOA"
	NestedRecordTemplateRequestTypeSPF        NestedRecordTemplateRequestType = "SPF"
	NestedRecordTemplateRequestTypeSRV        NestedRecordTemplateRequestType = "SRV"
	NestedRecordTemplateRequestTypeSSHFP      NestedRecordTemplateRequestType = "SSHFP"
	NestedRecordTemplateRequestTypeSVCB       NestedRecordTemplateRequestType = "SVCB"
	NestedRecordTemplateRequestTypeTA         NestedRecordTemplateRequestType = "TA"
	NestedRecordTemplateRequestTypeTLSA       NestedRecordTemplateRequestType = "TLSA"
	NestedRecordTemplateRequestTypeTXT        NestedRecordTemplateRequestType = "TXT"
	NestedRecordTemplateRequestTypeTYPE0      NestedRecordTemplateRequestType = "TYPE0"
	NestedRecordTemplateRequestTypeUNSPEC     NestedRecordTemplateRequestType = "UNSPEC"
	NestedRecordTemplateRequestTypeURI        NestedRecordTemplateRequestType = "URI"
	NestedRecordTemplateRequestTypeWALLET     NestedRecordTemplateRequestType = "WALLET"
	NestedRecordTemplateRequestTypeWKS        NestedRecordTemplateRequestType = "WKS"
	NestedRecordTemplateRequestTypeX25        NestedRecordTemplateRequestType = "X25"
	NestedRecordTemplateRequestTypeZONEMD     NestedRecordTemplateRequestType = "ZONEMD"
)

// Defines values for NestedZoneStatus.
const (
	NestedZoneStatusActive     NestedZoneStatus = "active"
	NestedZoneStatusDeprecated NestedZoneStatus = "deprecated"
	NestedZoneStatusDynamic    NestedZoneStatus = "dynamic"
	NestedZoneStatusEmpty      NestedZoneStatus = ""
	NestedZoneStatusParked     NestedZoneStatus = "parked"
	NestedZoneStatusReserved   NestedZoneStatus = "reserved"
)

// Defines values for NestedZoneRequestStatus.
const (
	NestedZoneRequestStatusActive     NestedZoneRequestStatus = "active"
	NestedZoneRequestStatusDeprecated NestedZoneRequestStatus = "deprecated"
	NestedZoneRequestStatusDynamic    NestedZoneRequestStatus = "dynamic"
	NestedZoneRequestStatusEmpty      NestedZoneRequestStatus = ""
	NestedZoneRequestStatusParked     NestedZoneRequestStatus = "parked"
	NestedZoneRequestStatusReserved   NestedZoneRequestStatus = "reserved"
)

// Defines values for PatchedDNSSECKeyTemplateRequestAlgorithm.
const (
	ECDSAP256SHA256 PatchedDNSSECKeyTemplateRequestAlgorithm = "ECDSAP256SHA256"
	ECDSAP384SHA384 PatchedDNSSECKeyTemplateRequestAlgorithm = "ECDSAP384SHA384"
	ED25519         PatchedDNSSECKeyTemplateRequestAlgorithm = "ED25519"
	ED448           PatchedDNSSECKeyTemplateRequestAlgorithm = "ED448"
	RSASHA256       PatchedDNSSECKeyTemplateRequestAlgorithm = "RSASHA256"
)

// Defines values for PatchedDNSSECKeyTemplateRequestKeySize.
const (
	N1024 PatchedDNSSECKeyTemplateRequestKeySize = 1024
	N2048 PatchedDNSSECKeyTemplateRequestKeySize = 2048
	N3072 PatchedDNSSECKeyTemplateRequestKeySize = 3072
	N4096 PatchedDNSSECKeyTemplateRequestKeySize = 4096
	N512  PatchedDNSSECKeyTemplateRequestKeySize = 512
)

// Defines values for PatchedDNSSECKeyTemplateRequestType.
const (
	CSK PatchedDNSSECKeyTemplateRequestType = "CSK"
	KSK PatchedDNSSECKeyTemplateRequestType = "KSK"
	ZSK PatchedDNSSECKeyTemplateRequestType = "ZSK"
)

// Defines values for PatchedDNSSECPolicyRequestCdsDigestTypes.
const (
	SHA256 PatchedDNSSECPolicyRequestCdsDigestTypes = "SHA256"
	SHA384 PatchedDNSSECPolicyRequestCdsDigestTypes = "SHA384"
)

// Defines values for PatchedDNSSECPolicyRequestStatus.
const (
	PatchedDNSSECPolicyRequestStatusActive   PatchedDNSSECPolicyRequestStatus = "active"
	PatchedDNSSECPolicyRequestStatusInactive PatchedDNSSECPolicyRequestStatus = "inactive"
)

// Defines values for PatchedRecordTemplateRequestStatus.
const (
	PatchedRecordTemplateRequestStatusActive   PatchedRecordTemplateRequestStatus = "active"
	PatchedRecordTemplateRequestStatusInactive PatchedRecordTemplateRequestStatus = "inactive"
)

// Defines values for PatchedRecordTemplateRequestType.
const (
	PatchedRecordTemplateRequestTypeA          PatchedRecordTemplateRequestType = "A"
	PatchedRecordTemplateRequestTypeA6         PatchedRecordTemplateRequestType = "A6"
	PatchedRecordTemplateRequestTypeAAAA       PatchedRecordTemplateRequestType = "AAAA"
	PatchedRecordTemplateRequestTypeAFSDB      PatchedRecordTemplateRequestType = "AFSDB"
	PatchedRecordTemplateRequestTypeAMTRELAY   PatchedRecordTemplateRequestType = "AMTRELAY"
	PatchedRecordTemplateRequestTypeAPL        PatchedRecordTemplateRequestType = "APL"
	PatchedRecordTemplateRequestTypeAVC        PatchedRecordTemplateRequestType = "AVC"
	PatchedRecordTemplateRequestTypeCAA        PatchedRecordTemplateRequestType = "CAA"
	PatchedRecordTemplateRequestTypeCDNSKEY    PatchedRecordTemplateRequestType = "CDNSKEY"
	PatchedRecordTemplateRequestTypeCDS        PatchedRecordTemplateRequestType = "CDS"
	PatchedRecordTemplateRequestTypeCERT       PatchedRecordTemplateRequestType = "CERT"
	PatchedRecordTemplateRequestTypeCNAME      PatchedRecordTemplateRequestType = "CNAME"
	PatchedRecordTemplateRequestTypeCSYNC      PatchedRecordTemplateRequestType = "CSYNC"
	PatchedRecordTemplateRequestTypeDHCID      PatchedRecordTemplateRequestType = "DHCID"
	PatchedRecordTemplateRequestTypeDLV        PatchedRecordTemplateRequestType = "DLV"
	PatchedRecordTemplateRequestTypeDNAME      PatchedRecordTemplateRequestType = "DNAME"
	PatchedRecordTemplateRequestTypeDNSKEY     PatchedRecordTemplateRequestType = "DNSKEY"
	PatchedRecordTemplateRequestTypeDS         PatchedRecordTemplateRequestType = "DS"
	PatchedRecordTemplateRequestTypeEUI48      PatchedRecordTemplateRequestType = "EUI48"
	PatchedRecordTemplateRequestTypeEUI64      PatchedRecordTemplateRequestType = "EUI64"
	PatchedRecordTemplateRequestTypeGPOS       PatchedRecordTemplateRequestType = "GPOS"
	PatchedRecordTemplateRequestTypeHINFO      PatchedRecordTemplateRequestType = "HINFO"
	PatchedRecordTemplateRequestTypeHIP        PatchedRecordTemplateRequestType = "HIP"
	PatchedRecordTemplateRequestTypeHTTPS      PatchedRecordTemplateRequestType = "HTTPS"
	PatchedRecordTemplateRequestTypeIPSECKEY   PatchedRecordTemplateRequestType = "IPSECKEY"
	PatchedRecordTemplateRequestTypeISDN       PatchedRecordTemplateRequestType = "ISDN"
	PatchedRecordTemplateRequestTypeKEY        PatchedRecordTemplateRequestType = "KEY"
	PatchedRecordTemplateRequestTypeKX         PatchedRecordTemplateRequestType = "KX"
	PatchedRecordTemplateRequestTypeL32        PatchedRecordTemplateRequestType = "L32"
	PatchedRecordTemplateRequestTypeL64        PatchedRecordTemplateRequestType = "L64"
	PatchedRecordTemplateRequestTypeLOC        PatchedRecordTemplateRequestType = "LOC"
	PatchedRecordTemplateRequestTypeLP         PatchedRecordTemplateRequestType = "LP"
	PatchedRecordTemplateRequestTypeMB         PatchedRecordTemplateRequestType = "MB"
	PatchedRecordTemplateRequestTypeMD         PatchedRecordTemplateRequestType = "MD"
	PatchedRecordTemplateRequestTypeMF         PatchedRecordTemplateRequestType = "MF"
	PatchedRecordTemplateRequestTypeMG         PatchedRecordTemplateRequestType = "MG"
	PatchedRecordTemplateRequestTypeMINFO      PatchedRecordTemplateRequestType = "MINFO"
	PatchedRecordTemplateRequestTypeMR         PatchedRecordTemplateRequestType = "MR"
	PatchedRecordTemplateRequestTypeMX         PatchedRecordTemplateRequestType = "MX"
	PatchedRecordTemplateRequestTypeNAPTR      PatchedRecordTemplateRequestType = "NAPTR"
	PatchedRecordTemplateRequestTypeNID        PatchedRecordTemplateRequestType = "NID"
	PatchedRecordTemplateRequestTypeNINFO      PatchedRecordTemplateRequestType = "NINFO"
	PatchedRecordTemplateRequestTypeNS         PatchedRecordTemplateRequestType = "NS"
	PatchedRecordTemplateRequestTypeNSAP       PatchedRecordTemplateRequestType = "NSAP"
	PatchedRecordTemplateRequestTypeNSAPPTR    PatchedRecordTemplateRequestType = "NSAP_PTR"
	PatchedRecordTemplateRequestTypeNSEC       PatchedRecordTemplateRequestType = "NSEC"
	PatchedRecordTemplateRequestTypeNSEC3      PatchedRecordTemplateRequestType = "NSEC3"
	PatchedRecordTemplateRequestTypeNSEC3PARAM PatchedRecordTemplateRequestType = "NSEC3PARAM"
	PatchedRecordTemplateRequestTypeNULL       PatchedRecordTemplateRequestType = "NULL"
	PatchedRecordTemplateRequestTypeNXT        PatchedRecordTemplateRequestType = "NXT"
	PatchedRecordTemplateRequestTypeOPENPGPKEY PatchedRecordTemplateRequestType = "OPENPGPKEY"
	PatchedRecordTemplateRequestTypePTR        PatchedRecordTemplateRequestType = "PTR"
	PatchedRecordTemplateRequestTypePX         PatchedRecordTemplateRequestType = "PX"
	PatchedRecordTemplateRequestTypeRESINFO    PatchedRecordTemplateRequestType = "RESINFO"
	PatchedRecordTemplateRequestTypeRP         PatchedRecordTemplateRequestType = "RP"
	PatchedRecordTemplateRequestTypeRRSIG      PatchedRecordTemplateRequestType = "RRSIG"
	PatchedRecordTemplateRequestTypeRT         PatchedRecordTemplateRequestType = "RT"
	PatchedRecordTemplateRequestTypeSIG        PatchedRecordTemplateRequestType = "SIG"
	PatchedRecordTemplateRequestTypeSMIMEA     PatchedRecordTemplateRequestType = "SMIMEA"
	PatchedRecordTemplateRequestTypeSOA        PatchedRecordTemplateRequestType = "SOA"
	PatchedRecordTemplateRequestTypeSPF        PatchedRecordTemplateRequestType = "SPF"
	PatchedRecordTemplateRequestTypeSRV        PatchedRecordTemplateRequestType = "SRV"
	PatchedRecordTemplateRequestTypeSSHFP      PatchedRecordTemplateRequestType = "SSHFP"
	PatchedRecordTemplateRequestTypeSVCB       PatchedRecordTemplateRequestType = "SVCB"
	PatchedRecordTemplateRequestTypeTA         PatchedRecordTemplateRequestType = "TA"
	PatchedRecordTemplateRequestTypeTLSA       PatchedRecordTemplateRequestType = "TLSA"
	PatchedRecordTemplateRequestTypeTXT        PatchedRecordTemplateRequestType = "TXT"
	PatchedRecordTemplateRequestTypeTYPE0      PatchedRecordTemplateRequestType = "TYPE0"
	PatchedRecordTemplateRequestTypeUNSPEC     PatchedRecordTemplateRequestType = "UNSPEC"
	PatchedRecordTemplateRequestTypeURI        PatchedRecordTemplateRequestType = "URI"
	PatchedRecordTemplateRequestTypeWALLET     PatchedRecordTemplateRequestType = "WALLET"
	PatchedRecordTemplateRequestTypeWKS        PatchedRecordTemplateRequestType = "WKS"
	PatchedRecordTemplateRequestTypeX25        PatchedRecordTemplateRequestType = "X25"
	PatchedRecordTemplateRequestTypeZONEMD     PatchedRecordTemplateRequestType = "ZONEMD"
)

// Defines values for PatchedWritablePrefixRequestStatus.
const (
	PatchedWritablePrefixRequestStatusActive     PatchedWritablePrefixRequestStatus = "active"
	PatchedWritablePrefixRequestStatusContainer  PatchedWritablePrefixRequestStatus = "container"
	PatchedWritablePrefixRequestStatusDeprecated PatchedWritablePrefixRequestStatus = "deprecated"
	PatchedWritablePrefixRequestStatusReserved   PatchedWritablePrefixRequestStatus = "reserved"
)

// Defines values for PatchedWritableRecordRequestStatus.
const (
	PatchedWritableRecordRequestStatusActive   PatchedWritableRecordRequestStatus = "active"
	PatchedWritableRecordRequestStatusInactive PatchedWritableRecordRequestStatus = "inactive"
)

// Defines values for PatchedWritableRecordRequestType.
const (
	PatchedWritableRecordRequestTypeA          PatchedWritableRecordRequestType = "A"
	PatchedWritableRecordRequestTypeA6         PatchedWritableRecordRequestType = "A6"
	PatchedWritableRecordRequestTypeAAAA       PatchedWritableRecordRequestType = "AAAA"
	PatchedWritableRecordRequestTypeAFSDB      PatchedWritableRecordRequestType = "AFSDB"
	PatchedWritableRecordRequestTypeAMTRELAY   PatchedWritableRecordRequestType = "AMTRELAY"
	PatchedWritableRecordRequestTypeAPL        PatchedWritableRecordRequestType = "APL"
	PatchedWritableRecordRequestTypeAVC        PatchedWritableRecordRequestType = "AVC"
	PatchedWritableRecordRequestTypeCAA        PatchedWritableRecordRequestType = "CAA"
	PatchedWritableRecordRequestTypeCDNSKEY    PatchedWritableRecordRequestType = "CDNSKEY"
	PatchedWritableRecordRequestTypeCDS        PatchedWritableRecordRequestType = "CDS"
	PatchedWritableRecordRequestTypeCERT       PatchedWritableRecordRequestType = "CERT"
	PatchedWritableRecordRequestTypeCNAME      PatchedWritableRecordRequestType = "CNAME"
	PatchedWritableRecordRequestTypeCSYNC      PatchedWritableRecordRequestType = "CSYNC"
	PatchedWritableRecordRequestTypeDHCID      PatchedWritableRecordRequestType = "DHCID"
	PatchedWritableRecordRequestTypeDLV        PatchedWritableRecordRequestType = "DLV"
	PatchedWritableRecordRequestTypeDNAME      PatchedWritableRecordRequestType = "DNAME"
	PatchedWritableRecordRequestTypeDNSKEY     PatchedWritableRecordRequestType = "DNSKEY"
	PatchedWritableRecordRequestTypeDS         PatchedWritableRecordRequestType = "DS"
	PatchedWritableRecordRequestTypeEUI48      PatchedWritableRecordRequestType = "EUI48"
	PatchedWritableRecordRequestTypeEUI64      PatchedWritableRecordRequestType = "EUI64"
	PatchedWritableRecordRequestTypeGPOS       PatchedWritableRecordRequestType = "GPOS"
	PatchedWritableRecordRequestTypeHINFO      PatchedWritableRecordRequestType = "HINFO"
	PatchedWritableRecordRequestTypeHIP        PatchedWritableRecordRequestType = "HIP"
	PatchedWritableRecordRequestTypeHTTPS      PatchedWritableRecordRequestType = "HTTPS"
	PatchedWritableRecordRequestTypeIPSECKEY   PatchedWritableRecordRequestType = "IPSECKEY"
	PatchedWritableRecordRequestTypeISDN       PatchedWritableRecordRequestType = "ISDN"
	PatchedWritableRecordRequestTypeKEY        PatchedWritableRecordRequestType = "KEY"
	PatchedWritableRecordRequestTypeKX         PatchedWritableRecordRequestType = "KX"
	PatchedWritableRecordRequestTypeL32        PatchedWritableRecordRequestType = "L32"
	PatchedWritableRecordRequestTypeL64        PatchedWritableRecordRequestType = "L64"
	PatchedWritableRecordRequestTypeLOC        PatchedWritableRecordRequestType = "LOC"
	PatchedWritableRecordRequestTypeLP         PatchedWritableRecordRequestType = "LP"
	PatchedWritableRecordRequestTypeMB         PatchedWritableRecordRequestType = "MB"
	PatchedWritableRecordRequestTypeMD         PatchedWritableRecordRequestType = "MD"
	PatchedWritableRecordRequestTypeMF         PatchedWritableRecordRequestType = "MF"
	PatchedWritableRecordRequestTypeMG         PatchedWritableRecordRequestType = "MG"
	PatchedWritableRecordRequestTypeMINFO      PatchedWritableRecordRequestType = "MINFO"
	PatchedWritableRecordRequestTypeMR         PatchedWritableRecordRequestType = "MR"
	PatchedWritableRecordRequestTypeMX         PatchedWritableRecordRequestType = "MX"
	PatchedWritableRecordRequestTypeNAPTR      PatchedWritableRecordRequestType = "NAPTR"
	PatchedWritableRecordRequestTypeNID        PatchedWritableRecordRequestType = "NID"
	PatchedWritableRecordRequestTypeNINFO      PatchedWritableRecordRequestType = "NINFO"
	PatchedWritableRecordRequestTypeNS         PatchedWritableRecordRequestType = "NS"
	PatchedWritableRecordRequestTypeNSAP       PatchedWritableRecordRequestType = "NSAP"
	PatchedWritableRecordRequestTypeNSAPPTR    PatchedWritableRecordRequestType = "NSAP_PTR"
	PatchedWritableRecordRequestTypeNSEC       PatchedWritableRecordRequestType = "NSEC"
	PatchedWritableRecordRequestTypeNSEC3      PatchedWritableRecordRequestType = "NSEC3"
	PatchedWritableRecordRequestTypeNSEC3PARAM PatchedWritableRecordRequestType = "NSEC3PARAM"
	PatchedWritableRecordRequestTypeNULL       PatchedWritableRecordRequestType = "NULL"
	PatchedWritableRecordRequestTypeNXT        PatchedWritableRecordRequestType = "NXT"
	PatchedWritableRecordRequestTypeOPENPGPKEY PatchedWritableRecordRequestType = "OPENPGPKEY"
	PatchedWritableRecordRequestTypePTR        PatchedWritableRecordRequestType = "PTR"
	PatchedWritableRecordRequestTypePX         PatchedWritableRecordRequestType = "PX"
	PatchedWritableRecordRequestTypeRESINFO    PatchedWritableRecordRequestType = "RESINFO"
	PatchedWritableRecordRequestTypeRP         PatchedWritableRecordRequestType = "RP"
	PatchedWritableRecordRequestTypeRRSIG      PatchedWritableRecordRequestType = "RRSIG"
	PatchedWritableRecordRequestTypeRT         PatchedWritableRecordRequestType = "RT"
	PatchedWritableRecordRequestTypeSIG        PatchedWritableRecordRequestType = "SIG"
	PatchedWritableRecordRequestTypeSMIMEA     PatchedWritableRecordRequestType = "SMIMEA"
	PatchedWritableRecordRequestTypeSOA        PatchedWritableRecordRequestType = "SOA"
	PatchedWritableRecordRequestTypeSPF        PatchedWritableRecordRequestType = "SPF"
	PatchedWritableRecordRequestTypeSRV        PatchedWritableRecordRequestType = "SRV"
	PatchedWritableRecordRequestTypeSSHFP      PatchedWritableRecordRequestType = "SSHFP"
	PatchedWritableRecordRequestTypeSVCB       PatchedWritableRecordRequestType = "SVCB"
	PatchedWritableRecordRequestTypeTA         PatchedWritableRecordRequestType = "TA"
	PatchedWritableRecordRequestTypeTLSA       PatchedWritableRecordRequestType = "TLSA"
	PatchedWritableRecordRequestTypeTXT        PatchedWritableRecordRequestType = "TXT"
	PatchedWritableRecordRequestTypeTYPE0      PatchedWritableRecordRequestType = "TYPE0"
	PatchedWritableRecordRequestTypeUNSPEC     PatchedWritableRecordRequestType = "UNSPEC"
	PatchedWritableRecordRequestTypeURI        PatchedWritableRecordRequestType = "URI"
	PatchedWritableRecordRequestTypeWALLET     PatchedWritableRecordRequestType = "WALLET"
	PatchedWritableRecordRequestTypeWKS        PatchedWritableRecordRequestType = "WKS"
	PatchedWritableRecordRequestTypeX25        PatchedWritableRecordRequestType = "X25"
	PatchedWritableRecordRequestTypeZONEMD     PatchedWritableRecordRequestType = "ZONEMD"
)

// Defines values for PatchedWritableZoneRequestDomainStatus.
const (
	PatchedWritableZoneRequestDomainStatusAddPeriod                PatchedWritableZoneRequestDomainStatus = "addPeriod"
	PatchedWritableZoneRequestDomainStatusAutoRenewPeriod          PatchedWritableZoneRequestDomainStatus = "autoRenewPeriod"
	PatchedWritableZoneRequestDomainStatusClientDeleteProhibited   PatchedWritableZoneRequestDomainStatus = "clientDeleteProhibited"
	PatchedWritableZoneRequestDomainStatusClientHold               PatchedWritableZoneRequestDomainStatus = "clientHold"
	PatchedWritableZoneRequestDomainStatusClientRenewProhibited    PatchedWritableZoneRequestDomainStatus = "clientRenewProhibited"
	PatchedWritableZoneRequestDomainStatusClientTransferProhibited PatchedWritableZoneRequestDomainStatus = "clientTransferProhibited"
	PatchedWritableZoneRequestDomainStatusClientUpdateProhibited   PatchedWritableZoneRequestDomainStatus = "clientUpdateProhibited"
	PatchedWritableZoneRequestDomainStatusEmpty                    PatchedWritableZoneRequestDomainStatus = ""
	PatchedWritableZoneRequestDomainStatusInactive                 PatchedWritableZoneRequestDomainStatus = "inactive"
	PatchedWritableZoneRequestDomainStatusLessThannil              PatchedWritableZoneRequestDomainStatus = "<nil>"
	PatchedWritableZoneRequestDomainStatusOk                       PatchedWritableZoneRequestDomainStatus = "ok"
	PatchedWritableZoneRequestDomainStatusPendingCreate            PatchedWritableZoneRequestDomainStatus = "pendingCreate"
	PatchedWritableZoneRequestDomainStatusPendingDelete            PatchedWritableZoneRequestDomainStatus = "pendingDelete"
	PatchedWritableZoneRequestDomainStatusPendingRenew             PatchedWritableZoneRequestDomainStatus = "pendingRenew"
	PatchedWritableZoneRequestDomainStatusPendingRestore           PatchedWritableZoneRequestDomainStatus = "pendingRestore"
	PatchedWritableZoneRequestDomainStatusPendingTransfer          PatchedWritableZoneRequestDomainStatus = "pendingTransfer"
	PatchedWritableZoneRequestDomainStatusPendingUpdate            PatchedWritableZoneRequestDomainStatus = "pendingUpdate"
	PatchedWritableZoneRequestDomainStatusRedemptionPeriod         PatchedWritableZoneRequestDomainStatus = "redemptionPeriod"
	PatchedWritableZoneRequestDomainStatusRenewPeriod              PatchedWritableZoneRequestDomainStatus = "renewPeriod"
	PatchedWritableZoneRequestDomainStatusServerDeleteProhibited   PatchedWritableZoneRequestDomainStatus = "serverDeleteProhibited"
	PatchedWritableZoneRequestDomainStatusServerHold               PatchedWritableZoneRequestDomainStatus = "serverHold"
	PatchedWritableZoneRequestDomainStatusServerRenewProhibited    PatchedWritableZoneRequestDomainStatus = "serverRenewProhibited"
	PatchedWritableZoneRequestDomainStatusServerTransferProhibited PatchedWritableZoneRequestDomainStatus = "serverTransferProhibited"
	PatchedWritableZoneRequestDomainStatusServerUpdateProhibited   PatchedWritableZoneRequestDomainStatus = "serverUpdateProhibited"
	PatchedWritableZoneRequestDomainStatusTransferPeriod           PatchedWritableZoneRequestDomainStatus = "transferPeriod"
)

// Defines values for PatchedWritableZoneRequestStatus.
const (
	PatchedWritableZoneRequestStatusActive     PatchedWritableZoneRequestStatus = "active"
	PatchedWritableZoneRequestStatusDeprecated PatchedWritableZoneRequestStatus = "deprecated"
	PatchedWritableZoneRequestStatusDynamic    PatchedWritableZoneRequestStatus = "dynamic"
	PatchedWritableZoneRequestStatusEmpty      PatchedWritableZoneRequestStatus = ""
	PatchedWritableZoneRequestStatusParked     PatchedWritableZoneRequestStatus = "parked"
	PatchedWritableZoneRequestStatusReserved   PatchedWritableZoneRequestStatus = "reserved"
)

// Defines values for PrefixFamilyLabel.
const (
	IPv4 PrefixFamilyLabel = "IPv4"
	IPv6 PrefixFamilyLabel = "IPv6"
)

// Defines values for PrefixFamilyValue.
const (
	N4 PrefixFamilyValue = 4
	N6 PrefixFamilyValue = 6
)

// Defines values for PrefixStatusLabel.
const (
	PrefixStatusLabelActive     PrefixStatusLabel = "Active"
	PrefixStatusLabelContainer  PrefixStatusLabel = "Container"
	PrefixStatusLabelDeprecated PrefixStatusLabel = "Deprecated"
	PrefixStatusLabelReserved   PrefixStatusLabel = "Reserved"
)

// Defines values for PrefixStatusValue.
const (
	PrefixStatusValueActive     PrefixStatusValue = "active"
	PrefixStatusValueContainer  PrefixStatusValue = "container"
	PrefixStatusValueDeprecated PrefixStatusValue = "deprecated"
	PrefixStatusValueReserved   PrefixStatusValue = "reserved"
)

// Defines values for PrefixRequestStatus.
const (
	PrefixRequestStatusActive     PrefixRequestStatus = "active"
	PrefixRequestStatusContainer  PrefixRequestStatus = "container"
	PrefixRequestStatusDeprecated PrefixRequestStatus = "deprecated"
	PrefixRequestStatusReserved   PrefixRequestStatus = "reserved"
)

// Defines values for RecordStatus.
const (
	RecordStatusActive   RecordStatus = "active"
	RecordStatusInactive RecordStatus = "inactive"
)

// Defines values for RecordType.
const (
	RecordTypeA          RecordType = "A"
	RecordTypeA6         RecordType = "A6"
	RecordTypeAAAA       RecordType = "AAAA"
	RecordTypeAFSDB      RecordType = "AFSDB"
	RecordTypeAMTRELAY   RecordType = "AMTRELAY"
	RecordTypeAPL        RecordType = "APL"
	RecordTypeAVC        RecordType = "AVC"
	RecordTypeCAA        RecordType = "CAA"
	RecordTypeCDNSKEY    RecordType = "CDNSKEY"
	RecordTypeCDS        RecordType = "CDS"
	RecordTypeCERT       RecordType = "CERT"
	RecordTypeCNAME      RecordType = "CNAME"
	RecordTypeCSYNC      RecordType = "CSYNC"
	RecordTypeDHCID      RecordType = "DHCID"
	RecordTypeDLV        RecordType = "DLV"
	RecordTypeDNAME      RecordType = "DNAME"
	RecordTypeDNSKEY     RecordType = "DNSKEY"
	RecordTypeDS         RecordType = "DS"
	RecordTypeEUI48      RecordType = "EUI48"
	RecordTypeEUI64      RecordType = "EUI64"
	RecordTypeGPOS       RecordType = "GPOS"
	RecordTypeHINFO      RecordType = "HINFO"
	RecordTypeHIP        RecordType = "HIP"
	RecordTypeHTTPS      RecordType = "HTTPS"
	RecordTypeIPSECKEY   RecordType = "IPSECKEY"
	RecordTypeISDN       RecordType = "ISDN"
	RecordTypeKEY        RecordType = "KEY"
	RecordTypeKX         RecordType = "KX"
	RecordTypeL32        RecordType = "L32"
	RecordTypeL64        RecordType = "L64"
	RecordTypeLOC        RecordType = "LOC"
	RecordTypeLP         RecordType = "LP"
	RecordTypeMB         RecordType = "MB"
	RecordTypeMD         RecordType = "MD"
	RecordTypeMF         RecordType = "MF"
	RecordTypeMG         RecordType = "MG"
	RecordTypeMINFO      RecordType = "MINFO"
	RecordTypeMR         RecordType = "MR"
	RecordTypeMX         RecordType = "MX"
	RecordTypeNAPTR      RecordType = "NAPTR"
	RecordTypeNID        RecordType = "NID"
	RecordTypeNINFO      RecordType = "NINFO"
	RecordTypeNS         RecordType = "NS"
	RecordTypeNSAP       RecordType = "NSAP"
	RecordTypeNSAPPTR    RecordType = "NSAP_PTR"
	RecordTypeNSEC       RecordType = "NSEC"
	RecordTypeNSEC3      RecordType = "NSEC3"
	RecordTypeNSEC3PARAM RecordType = "NSEC3PARAM"
	RecordTypeNULL       RecordType = "NULL"
	RecordTypeNXT        RecordType = "NXT"
	RecordTypeOPENPGPKEY RecordType = "OPENPGPKEY"
	RecordTypePTR        RecordType = "PTR"
	RecordTypePX         RecordType = "PX"
	RecordTypeRESINFO    RecordType = "RESINFO"
	RecordTypeRP         RecordType = "RP"
	RecordTypeRRSIG      RecordType = "RRSIG"
	RecordTypeRT         RecordType = "RT"
	RecordTypeSIG        RecordType = "SIG"
	RecordTypeSMIMEA     RecordType = "SMIMEA"
	RecordTypeSOA        RecordType = "SOA"
	RecordTypeSPF        RecordType = "SPF"
	RecordTypeSRV        RecordType = "SRV"
	RecordTypeSSHFP      RecordType = "SSHFP"
	RecordTypeSVCB       RecordType = "SVCB"
	RecordTypeTA         RecordType = "TA"
	RecordTypeTLSA       RecordType = "TLSA"
	RecordTypeTXT        RecordType = "TXT"
	RecordTypeTYPE0      RecordType = "TYPE0"
	RecordTypeUNSPEC     RecordType = "UNSPEC"
	RecordTypeURI        RecordType = "URI"
	RecordTypeWALLET     RecordType = "WALLET"
	RecordTypeWKS        RecordType = "WKS"
	RecordTypeX25        RecordType = "X25"
	RecordTypeZONEMD     RecordType = "ZONEMD"
)

// Defines values for RecordRequestStatus.
const (
	RecordRequestStatusActive   RecordRequestStatus = "active"
	RecordRequestStatusInactive RecordRequestStatus = "inactive"
)

// Defines values for RecordRequestType.
const (
	RecordRequestTypeA          RecordRequestType = "A"
	RecordRequestTypeA6         RecordRequestType = "A6"
	RecordRequestTypeAAAA       RecordRequestType = "AAAA"
	RecordRequestTypeAFSDB      RecordRequestType = "AFSDB"
	RecordRequestTypeAMTRELAY   RecordRequestType = "AMTRELAY"
	RecordRequestTypeAPL        RecordRequestType = "APL"
	RecordRequestTypeAVC        RecordRequestType = "AVC"
	RecordRequestTypeCAA        RecordRequestType = "CAA"
	RecordRequestTypeCDNSKEY    RecordRequestType = "CDNSKEY"
	RecordRequestTypeCDS        RecordRequestType = "CDS"
	RecordRequestTypeCERT       RecordRequestType = "CERT"
	RecordRequestTypeCNAME      RecordRequestType = "CNAME"
	RecordRequestTypeCSYNC      RecordRequestType = "CSYNC"
	RecordRequestTypeDHCID      RecordRequestType = "DHCID"
	RecordRequestTypeDLV        RecordRequestType = "DLV"
	RecordRequestTypeDNAME      RecordRequestType = "DNAME"
	RecordRequestTypeDNSKEY     RecordRequestType = "DNSKEY"
	RecordRequestTypeDS         RecordRequestType = "DS"
	RecordRequestTypeEUI48      RecordRequestType = "EUI48"
	RecordRequestTypeEUI64      RecordRequestType = "EUI64"
	RecordRequestTypeGPOS       RecordRequestType = "GPOS"
	RecordRequestTypeHINFO      RecordRequestType = "HINFO"
	RecordRequestTypeHIP        RecordRequestType = "HIP"
	RecordRequestTypeHTTPS      RecordRequestType = "HTTPS"
	RecordRequestTypeIPSECKEY   RecordRequestType = "IPSECKEY"
	RecordRequestTypeISDN       RecordRequestType = "ISDN"
	RecordRequestTypeKEY        RecordRequestType = "KEY"
	RecordRequestTypeKX         RecordRequestType = "KX"
	RecordRequestTypeL32        RecordRequestType = "L32"
	RecordRequestTypeL64        RecordRequestType = "L64"
	RecordRequestTypeLOC        RecordRequestType = "LOC"
	RecordRequestTypeLP         RecordRequestType = "LP"
	RecordRequestTypeMB         RecordRequestType = "MB"
	RecordRequestTypeMD         RecordRequestType = "MD"
	RecordRequestTypeMF         RecordRequestType = "MF"
	RecordRequestTypeMG         RecordRequestType = "MG"
	RecordRequestTypeMINFO      RecordRequestType = "MINFO"
	RecordRequestTypeMR         RecordRequestType = "MR"
	RecordRequestTypeMX         RecordRequestType = "MX"
	RecordRequestTypeNAPTR      RecordRequestType = "NAPTR"
	RecordRequestTypeNID        RecordRequestType = "NID"
	RecordRequestTypeNINFO      RecordRequestType = "NINFO"
	RecordRequestTypeNS         RecordRequestType = "NS"
	RecordRequestTypeNSAP       RecordRequestType = "NSAP"
	RecordRequestTypeNSAPPTR    RecordRequestType = "NSAP_PTR"
	RecordRequestTypeNSEC       RecordRequestType = "NSEC"
	RecordRequestTypeNSEC3      RecordRequestType = "NSEC3"
	RecordRequestTypeNSEC3PARAM RecordRequestType = "NSEC3PARAM"
	RecordRequestTypeNULL       RecordRequestType = "NULL"
	RecordRequestTypeNXT        RecordRequestType = "NXT"
	RecordRequestTypeOPENPGPKEY RecordRequestType = "OPENPGPKEY"
	RecordRequestTypePTR        RecordRequestType = "PTR"
	RecordRequestTypePX         RecordRequestType = "PX"
	RecordRequestTypeRESINFO    RecordRequestType = "RESINFO"
	RecordRequestTypeRP         RecordRequestType = "RP"
	RecordRequestTypeRRSIG      RecordRequestType = "RRSIG"
	RecordRequestTypeRT         RecordRequestType = "RT"
	RecordRequestTypeSIG        RecordRequestType = "SIG"
	RecordRequestTypeSMIMEA     RecordRequestType = "SMIMEA"
	RecordRequestTypeSOA        RecordRequestType = "SOA"
	RecordRequestTypeSPF        RecordRequestType = "SPF"
	RecordRequestTypeSRV        RecordRequestType = "SRV"
	RecordRequestTypeSSHFP      RecordRequestType = "SSHFP"
	RecordRequestTypeSVCB       RecordRequestType = "SVCB"
	RecordRequestTypeTA         RecordRequestType = "TA"
	RecordRequestTypeTLSA       RecordRequestType = "TLSA"
	RecordRequestTypeTXT        RecordRequestType = "TXT"
	RecordRequestTypeTYPE0      RecordRequestType = "TYPE0"
	RecordRequestTypeUNSPEC     RecordRequestType = "UNSPEC"
	RecordRequestTypeURI        RecordRequestType = "URI"
	RecordRequestTypeWALLET     RecordRequestType = "WALLET"
	RecordRequestTypeWKS        RecordRequestType = "WKS"
	RecordRequestTypeX25        RecordRequestType = "X25"
	RecordRequestTypeZONEMD     RecordRequestType = "ZONEMD"
)

// Defines values for RecordTemplateStatus.
const (
	RecordTemplateStatusActive   RecordTemplateStatus = "active"
	RecordTemplateStatusInactive RecordTemplateStatus = "inactive"
)

// Defines values for RecordTemplateType.
const (
	RecordTemplateTypeA          RecordTemplateType = "A"
	RecordTemplateTypeA6         RecordTemplateType = "A6"
	RecordTemplateTypeAAAA       RecordTemplateType = "AAAA"
	RecordTemplateTypeAFSDB      RecordTemplateType = "AFSDB"
	RecordTemplateTypeAMTRELAY   RecordTemplateType = "AMTRELAY"
	RecordTemplateTypeAPL        RecordTemplateType = "APL"
	RecordTemplateTypeAVC        RecordTemplateType = "AVC"
	RecordTemplateTypeCAA        RecordTemplateType = "CAA"
	RecordTemplateTypeCDNSKEY    RecordTemplateType = "CDNSKEY"
	RecordTemplateTypeCDS        RecordTemplateType = "CDS"
	RecordTemplateTypeCERT       RecordTemplateType = "CERT"
	RecordTemplateTypeCNAME      RecordTemplateType = "CNAME"
	RecordTemplateTypeCSYNC      RecordTemplateType = "CSYNC"
	RecordTemplateTypeDHCID      RecordTemplateType = "DHCID"
	RecordTemplateTypeDLV        RecordTemplateType = "DLV"
	RecordTemplateTypeDNAME      RecordTemplateType = "DNAME"
	RecordTemplateTypeDNSKEY     RecordTemplateType = "DNSKEY"
	RecordTemplateTypeDS         RecordTemplateType = "DS"
	RecordTemplateTypeEUI48      RecordTemplateType = "EUI48"
	RecordTemplateTypeEUI64      RecordTemplateType = "EUI64"
	RecordTemplateTypeGPOS       RecordTemplateType = "GPOS"
	RecordTemplateTypeHINFO      RecordTemplateType = "HINFO"
	RecordTemplateTypeHIP        RecordTemplateType = "HIP"
	RecordTemplateTypeHTTPS      RecordTemplateType = "HTTPS"
	RecordTemplateTypeIPSECKEY   RecordTemplateType = "IPSECKEY"
	RecordTemplateTypeISDN       RecordTemplateType = "ISDN"
	RecordTemplateTypeKEY        RecordTemplateType = "KEY"
	RecordTemplateTypeKX         RecordTemplateType = "KX"
	RecordTemplateTypeL32        RecordTemplateType = "L32"
	RecordTemplateTypeL64        RecordTemplateType = "L64"
	RecordTemplateTypeLOC        RecordTemplateType = "LOC"
	RecordTemplateTypeLP         RecordTemplateType = "LP"
	RecordTemplateTypeMB         RecordTemplateType = "MB"
	RecordTemplateTypeMD         RecordTemplateType = "MD"
	RecordTemplateTypeMF         RecordTemplateType = "MF"
	RecordTemplateTypeMG         RecordTemplateType = "MG"
	RecordTemplateTypeMINFO      RecordTemplateType = "MINFO"
	RecordTemplateTypeMR         RecordTemplateType = "MR"
	RecordTemplateTypeMX         RecordTemplateType = "MX"
	RecordTemplateTypeNAPTR      RecordTemplateType = "NAPTR"
	RecordTemplateTypeNID        RecordTemplateType = "NID"
	RecordTemplateTypeNINFO      RecordTemplateType = "NINFO"
	RecordTemplateTypeNS         RecordTemplateType = "NS"
	RecordTemplateTypeNSAP       RecordTemplateType = "NSAP"
	RecordTemplateTypeNSAPPTR    RecordTemplateType = "NSAP_PTR"
	RecordTemplateTypeNSEC       RecordTemplateType = "NSEC"
	RecordTemplateTypeNSEC3      RecordTemplateType = "NSEC3"
	RecordTemplateTypeNSEC3PARAM RecordTemplateType = "NSEC3PARAM"
	RecordTemplateTypeNULL       RecordTemplateType = "NULL"
	RecordTemplateTypeNXT        RecordTemplateType = "NXT"
	RecordTemplateTypeOPENPGPKEY RecordTemplateType = "OPENPGPKEY"
	RecordTemplateTypePTR        RecordTemplateType = "PTR"
	RecordTemplateTypePX         RecordTemplateType = "PX"
	RecordTemplateTypeRESINFO    RecordTemplateType = "RESINFO"
	RecordTemplateTypeRP         RecordTemplateType = "RP"
	RecordTemplateTypeRRSIG      RecordTemplateType = "RRSIG"
	RecordTemplateTypeRT         RecordTemplateType = "RT"
	RecordTemplateTypeSIG        RecordTemplateType = "SIG"
	RecordTemplateTypeSMIMEA     RecordTemplateType = "SMIMEA"
	RecordTemplateTypeSOA        RecordTemplateType = "SOA"
	RecordTemplateTypeSPF        RecordTemplateType = "SPF"
	RecordTemplateTypeSRV        RecordTemplateType = "SRV"
	RecordTemplateTypeSSHFP      RecordTemplateType = "SSHFP"
	RecordTemplateTypeSVCB       RecordTemplateType = "SVCB"
	RecordTemplateTypeTA         RecordTemplateType = "TA"
	RecordTemplateTypeTLSA       RecordTemplateType = "TLSA"
	RecordTemplateTypeTXT        RecordTemplateType = "TXT"
	RecordTemplateTypeTYPE0      RecordTemplateType = "TYPE0"
	RecordTemplateTypeUNSPEC     RecordTemplateType = "UNSPEC"
	RecordTemplateTypeURI        RecordTemplateType = "URI"
	RecordTemplateTypeWALLET     RecordTemplateType = "WALLET"
	RecordTemplateTypeWKS        RecordTemplateType = "WKS"
	RecordTemplateTypeX25        RecordTemplateType = "X25"
	RecordTemplateTypeZONEMD     RecordTemplateType = "ZONEMD"
)

// Defines values for RecordTemplateRequestStatus.
const (
	RecordTemplateRequestStatusActive   RecordTemplateRequestStatus = "active"
	RecordTemplateRequestStatusInactive RecordTemplateRequestStatus = "inactive"
)

// Defines values for RecordTemplateRequestType.
const (
	RecordTemplateRequestTypeA          RecordTemplateRequestType = "A"
	RecordTemplateRequestTypeA6         RecordTemplateRequestType = "A6"
	RecordTemplateRequestTypeAAAA       RecordTemplateRequestType = "AAAA"
	RecordTemplateRequestTypeAFSDB      RecordTemplateRequestType = "AFSDB"
	RecordTemplateRequestTypeAMTRELAY   RecordTemplateRequestType = "AMTRELAY"
	RecordTemplateRequestTypeAPL        RecordTemplateRequestType = "APL"
	RecordTemplateRequestTypeAVC        RecordTemplateRequestType = "AVC"
	RecordTemplateRequestTypeCAA        RecordTemplateRequestType = "CAA"
	RecordTemplateRequestTypeCDNSKEY    RecordTemplateRequestType = "CDNSKEY"
	RecordTemplateRequestTypeCDS        RecordTemplateRequestType = "CDS"
	RecordTemplateRequestTypeCERT       RecordTemplateRequestType = "CERT"
	RecordTemplateRequestTypeCNAME      RecordTemplateRequestType = "CNAME"
	RecordTemplateRequestTypeCSYNC      RecordTemplateRequestType = "CSYNC"
	RecordTemplateRequestTypeDHCID      RecordTemplateRequestType = "DHCID"
	RecordTemplateRequestTypeDLV        RecordTemplateRequestType = "DLV"
	RecordTemplateRequestTypeDNAME      RecordTemplateRequestType = "DNAME"
	RecordTemplateRequestTypeDNSKEY     RecordTemplateRequestType = "DNSKEY"
	RecordTemplateRequestTypeDS         RecordTemplateRequestType = "DS"
	RecordTemplateRequestTypeEUI48      RecordTemplateRequestType = "EUI48"
	RecordTemplateRequestTypeEUI64      RecordTemplateRequestType = "EUI64"
	RecordTemplateRequestTypeGPOS       RecordTemplateRequestType = "GPOS"
	RecordTemplateRequestTypeHINFO      RecordTemplateRequestType = "HINFO"
	RecordTemplateRequestTypeHIP        RecordTemplateRequestType = "HIP"
	RecordTemplateRequestTypeHTTPS      RecordTemplateRequestType = "HTTPS"
	RecordTemplateRequestTypeIPSECKEY   RecordTemplateRequestType = "IPSECKEY"
	RecordTemplateRequestTypeISDN       RecordTemplateRequestType = "ISDN"
	RecordTemplateRequestTypeKEY        RecordTemplateRequestType = "KEY"
	RecordTemplateRequestTypeKX         RecordTemplateRequestType = "KX"
	RecordTemplateRequestTypeL32        RecordTemplateRequestType = "L32"
	RecordTemplateRequestTypeL64        RecordTemplateRequestType = "L64"
	RecordTemplateRequestTypeLOC        RecordTemplateRequestType = "LOC"
	RecordTemplateRequestTypeLP         RecordTemplateRequestType = "LP"
	RecordTemplateRequestTypeMB         RecordTemplateRequestType = "MB"
	RecordTemplateRequestTypeMD         RecordTemplateRequestType = "MD"
	RecordTemplateRequestTypeMF         RecordTemplateRequestType = "MF"
	RecordTemplateRequestTypeMG         RecordTemplateRequestType = "MG"
	RecordTemplateRequestTypeMINFO      RecordTemplateRequestType = "MINFO"
	RecordTemplateRequestTypeMR         RecordTemplateRequestType = "MR"
	RecordTemplateRequestTypeMX         RecordTemplateRequestType = "MX"
	RecordTemplateRequestTypeNAPTR      RecordTemplateRequestType = "NAPTR"
	RecordTemplateRequestTypeNID        RecordTemplateRequestType = "NID"
	RecordTemplateRequestTypeNINFO      RecordTemplateRequestType = "NINFO"
	RecordTemplateRequestTypeNS         RecordTemplateRequestType = "NS"
	RecordTemplateRequestTypeNSAP       RecordTemplateRequestType = "NSAP"
	RecordTemplateRequestTypeNSAPPTR    RecordTemplateRequestType = "NSAP_PTR"
	RecordTemplateRequestTypeNSEC       RecordTemplateRequestType = "NSEC"
	RecordTemplateRequestTypeNSEC3      RecordTemplateRequestType = "NSEC3"
	RecordTemplateRequestTypeNSEC3PARAM RecordTemplateRequestType = "NSEC3PARAM"
	RecordTemplateRequestTypeNULL       RecordTemplateRequestType = "NULL"
	RecordTemplateRequestTypeNXT        RecordTemplateRequestType = "NXT"
	RecordTemplateRequestTypeOPENPGPKEY RecordTemplateRequestType = "OPENPGPKEY"
	RecordTemplateRequestTypePTR        RecordTemplateRequestType = "PTR"
	RecordTemplateRequestTypePX         RecordTemplateRequestType = "PX"
	RecordTemplateRequestTypeRESINFO    RecordTemplateRequestType = "RESINFO"
	RecordTemplateRequestTypeRP         RecordTemplateRequestType = "RP"
	RecordTemplateRequestTypeRRSIG      RecordTemplateRequestType = "RRSIG"
	RecordTemplateRequestTypeRT         RecordTemplateRequestType = "RT"
	RecordTemplateRequestTypeSIG        RecordTemplateRequestType = "SIG"
	RecordTemplateRequestTypeSMIMEA     RecordTemplateRequestType = "SMIMEA"
	RecordTemplateRequestTypeSOA        RecordTemplateRequestType = "SOA"
	RecordTemplateRequestTypeSPF        RecordTemplateRequestType = "SPF"
	RecordTemplateRequestTypeSRV        RecordTemplateRequestType = "SRV"
	RecordTemplateRequestTypeSSHFP      RecordTemplateRequestType = "SSHFP"
	RecordTemplateRequestTypeSVCB       RecordTemplateRequestType = "SVCB"
	RecordTemplateRequestTypeTA         RecordTemplateRequestType = "TA"
	RecordTemplateRequestTypeTLSA       RecordTemplateRequestType = "TLSA"
	RecordTemplateRequestTypeTXT        RecordTemplateRequestType = "TXT"
	RecordTemplateRequestTypeTYPE0      RecordTemplateRequestType = "TYPE0"
	RecordTemplateRequestTypeUNSPEC     RecordTemplateRequestType = "UNSPEC"
	RecordTemplateRequestTypeURI        RecordTemplateRequestType = "URI"
	RecordTemplateRequestTypeWALLET     RecordTemplateRequestType = "WALLET"
	RecordTemplateRequestTypeWKS        RecordTemplateRequestType = "WKS"
	RecordTemplateRequestTypeX25        RecordTemplateRequestType = "X25"
	RecordTemplateRequestTypeZONEMD     RecordTemplateRequestType = "ZONEMD"
)

// Defines values for WritablePrefixRequestStatus.
const (
	WritablePrefixRequestStatusActive     WritablePrefixRequestStatus = "active"
	WritablePrefixRequestStatusContainer  WritablePrefixRequestStatus = "container"
	WritablePrefixRequestStatusDeprecated WritablePrefixRequestStatus = "deprecated"
	WritablePrefixRequestStatusReserved   WritablePrefixRequestStatus = "reserved"
)

// Defines values for WritableRecordRequestStatus.
const (
	WritableRecordRequestStatusActive   WritableRecordRequestStatus = "active"
	WritableRecordRequestStatusInactive WritableRecordRequestStatus = "inactive"
)

// Defines values for WritableRecordRequestType.
const (
	WritableRecordRequestTypeA          WritableRecordRequestType = "A"
	WritableRecordRequestTypeA6         WritableRecordRequestType = "A6"
	WritableRecordRequestTypeAAAA       WritableRecordRequestType = "AAAA"
	WritableRecordRequestTypeAFSDB      WritableRecordRequestType = "AFSDB"
	WritableRecordRequestTypeAMTRELAY   WritableRecordRequestType = "AMTRELAY"
	WritableRecordRequestTypeAPL        WritableRecordRequestType = "APL"
	WritableRecordRequestTypeAVC        WritableRecordRequestType = "AVC"
	WritableRecordRequestTypeCAA        WritableRecordRequestType = "CAA"
	WritableRecordRequestTypeCDNSKEY    WritableRecordRequestType = "CDNSKEY"
	WritableRecordRequestTypeCDS        WritableRecordRequestType = "CDS"
	WritableRecordRequestTypeCERT       WritableRecordRequestType = "CERT"
	WritableRecordRequestTypeCNAME      WritableRecordRequestType = "CNAME"
	WritableRecordRequestTypeCSYNC      WritableRecordRequestType = "CSYNC"
	WritableRecordRequestTypeDHCID      WritableRecordRequestType = "DHCID"
	WritableRecordRequestTypeDLV        WritableRecordRequestType = "DLV"
	WritableRecordRequestTypeDNAME      WritableRecordRequestType = "DNAME"
	WritableRecordRequestTypeDNSKEY     WritableRecordRequestType = "DNSKEY"
	WritableRecordRequestTypeDS         WritableRecordRequestType = "DS"
	WritableRecordRequestTypeEUI48      WritableRecordRequestType = "EUI48"
	WritableRecordRequestTypeEUI64      WritableRecordRequestType = "EUI64"
	WritableRecordRequestTypeGPOS       WritableRecordRequestType = "GPOS"
	WritableRecordRequestTypeHINFO      WritableRecordRequestType = "HINFO"
	WritableRecordRequestTypeHIP        WritableRecordRequestType = "HIP"
	WritableRecordRequestTypeHTTPS      WritableRecordRequestType = "HTTPS"
	WritableRecordRequestTypeIPSECKEY   WritableRecordRequestType = "IPSECKEY"
	WritableRecordRequestTypeISDN       WritableRecordRequestType = "ISDN"
	WritableRecordRequestTypeKEY        WritableRecordRequestType = "KEY"
	WritableRecordRequestTypeKX         WritableRecordRequestType = "KX"
	WritableRecordRequestTypeL32        WritableRecordRequestType = "L32"
	WritableRecordRequestTypeL64        WritableRecordRequestType = "L64"
	WritableRecordRequestTypeLOC        WritableRecordRequestType = "LOC"
	WritableRecordRequestTypeLP         WritableRecordRequestType = "LP"
	WritableRecordRequestTypeMB         WritableRecordRequestType = "MB"
	WritableRecordRequestTypeMD         WritableRecordRequestType = "MD"
	WritableRecordRequestTypeMF         WritableRecordRequestType = "MF"
	WritableRecordRequestTypeMG         WritableRecordRequestType = "MG"
	WritableRecordRequestTypeMINFO      WritableRecordRequestType = "MINFO"
	WritableRecordRequestTypeMR         WritableRecordRequestType = "MR"
	WritableRecordRequestTypeMX         WritableRecordRequestType = "MX"
	WritableRecordRequestTypeNAPTR      WritableRecordRequestType = "NAPTR"
	WritableRecordRequestTypeNID        WritableRecordRequestType = "NID"
	WritableRecordRequestTypeNINFO      WritableRecordRequestType = "NINFO"
	WritableRecordRequestTypeNS         WritableRecordRequestType = "NS"
	WritableRecordRequestTypeNSAP       WritableRecordRequestType = "NSAP"
	WritableRecordRequestTypeNSAPPTR    WritableRecordRequestType = "NSAP_PTR"
	WritableRecordRequestTypeNSEC       WritableRecordRequestType = "NSEC"
	WritableRecordRequestTypeNSEC3      WritableRecordRequestType = "NSEC3"
	WritableRecordRequestTypeNSEC3PARAM WritableRecordRequestType = "NSEC3PARAM"
	WritableRecordRequestTypeNULL       WritableRecordRequestType = "NULL"
	WritableRecordRequestTypeNXT        WritableRecordRequestType = "NXT"
	WritableRecordRequestTypeOPENPGPKEY WritableRecordRequestType = "OPENPGPKEY"
	WritableRecordRequestTypePTR        WritableRecordRequestType = "PTR"
	WritableRecordRequestTypePX         WritableRecordRequestType = "PX"
	WritableRecordRequestTypeRESINFO    WritableRecordRequestType = "RESINFO"
	WritableRecordRequestTypeRP         WritableRecordRequestType = "RP"
	WritableRecordRequestTypeRRSIG      WritableRecordRequestType = "RRSIG"
	WritableRecordRequestTypeRT         WritableRecordRequestType = "RT"
	WritableRecordRequestTypeSIG        WritableRecordRequestType = "SIG"
	WritableRecordRequestTypeSMIMEA     WritableRecordRequestType = "SMIMEA"
	WritableRecordRequestTypeSOA        WritableRecordRequestType = "SOA"
	WritableRecordRequestTypeSPF        WritableRecordRequestType = "SPF"
	WritableRecordRequestTypeSRV        WritableRecordRequestType = "SRV"
	WritableRecordRequestTypeSSHFP      WritableRecordRequestType = "SSHFP"
	WritableRecordRequestTypeSVCB       WritableRecordRequestType = "SVCB"
	WritableRecordRequestTypeTA         WritableRecordRequestType = "TA"
	WritableRecordRequestTypeTLSA       WritableRecordRequestType = "TLSA"
	WritableRecordRequestTypeTXT        WritableRecordRequestType = "TXT"
	WritableRecordRequestTypeTYPE0      WritableRecordRequestType = "TYPE0"
	WritableRecordRequestTypeUNSPEC     WritableRecordRequestType = "UNSPEC"
	WritableRecordRequestTypeURI        WritableRecordRequestType = "URI"
	WritableRecordRequestTypeWALLET     WritableRecordRequestType = "WALLET"
	WritableRecordRequestTypeWKS        WritableRecordRequestType = "WKS"
	WritableRecordRequestTypeX25        WritableRecordRequestType = "X25"
	WritableRecordRequestTypeZONEMD     WritableRecordRequestType = "ZONEMD"
)

// Defines values for WritableZoneRequestDomainStatus.
const (
	WritableZoneRequestDomainStatusAddPeriod                WritableZoneRequestDomainStatus = "addPeriod"
	WritableZoneRequestDomainStatusAutoRenewPeriod          WritableZoneRequestDomainStatus = "autoRenewPeriod"
	WritableZoneRequestDomainStatusClientDeleteProhibited   WritableZoneRequestDomainStatus = "clientDeleteProhibited"
	WritableZoneRequestDomainStatusClientHold               WritableZoneRequestDomainStatus = "clientHold"
	WritableZoneRequestDomainStatusClientRenewProhibited    WritableZoneRequestDomainStatus = "clientRenewProhibited"
	WritableZoneRequestDomainStatusClientTransferProhibited WritableZoneRequestDomainStatus = "clientTransferProhibited"
	WritableZoneRequestDomainStatusClientUpdateProhibited   WritableZoneRequestDomainStatus = "clientUpdateProhibited"
	WritableZoneRequestDomainStatusEmpty                    WritableZoneRequestDomainStatus = ""
	WritableZoneRequestDomainStatusInactive                 WritableZoneRequestDomainStatus = "inactive"
	WritableZoneRequestDomainStatusLessThannil              WritableZoneRequestDomainStatus = "<nil>"
	WritableZoneRequestDomainStatusOk                       WritableZoneRequestDomainStatus = "ok"
	WritableZoneRequestDomainStatusPendingCreate            WritableZoneRequestDomainStatus = "pendingCreate"
	WritableZoneRequestDomainStatusPendingDelete            WritableZoneRequestDomainStatus = "pendingDelete"
	WritableZoneRequestDomainStatusPendingRenew             WritableZoneRequestDomainStatus = "pendingRenew"
	WritableZoneRequestDomainStatusPendingRestore           WritableZoneRequestDomainStatus = "pendingRestore"
	WritableZoneRequestDomainStatusPendingTransfer          WritableZoneRequestDomainStatus = "pendingTransfer"
	WritableZoneRequestDomainStatusPendingUpdate            WritableZoneRequestDomainStatus = "pendingUpdate"
	WritableZoneRequestDomainStatusRedemptionPeriod         WritableZoneRequestDomainStatus = "redemptionPeriod"
	WritableZoneRequestDomainStatusRenewPeriod              WritableZoneRequestDomainStatus = "renewPeriod"
	WritableZoneRequestDomainStatusServerDeleteProhibited   WritableZoneRequestDomainStatus = "serverDeleteProhibited"
	WritableZoneRequestDomainStatusServerHold               WritableZoneRequestDomainStatus = "serverHold"
	WritableZoneRequestDomainStatusServerRenewProhibited    WritableZoneRequestDomainStatus = "serverRenewProhibited"
	WritableZoneRequestDomainStatusServerTransferProhibited WritableZoneRequestDomainStatus = "serverTransferProhibited"
	WritableZoneRequestDomainStatusServerUpdateProhibited   WritableZoneRequestDomainStatus = "serverUpdateProhibited"
	WritableZoneRequestDomainStatusTransferPeriod           WritableZoneRequestDomainStatus = "transferPeriod"
)

// Defines values for WritableZoneRequestStatus.
const (
	WritableZoneRequestStatusActive     WritableZoneRequestStatus = "active"
	WritableZoneRequestStatusDeprecated WritableZoneRequestStatus = "deprecated"
	WritableZoneRequestStatusDynamic    WritableZoneRequestStatus = "dynamic"
	WritableZoneRequestStatusEmpty      WritableZoneRequestStatus = ""
	WritableZoneRequestStatusParked     WritableZoneRequestStatus = "parked"
	WritableZoneRequestStatusReserved   WritableZoneRequestStatus = "reserved"
)

// Defines values for ZoneDomainStatus.
const (
	ZoneDomainStatusAddPeriod                ZoneDomainStatus = "addPeriod"
	ZoneDomainStatusAutoRenewPeriod          ZoneDomainStatus = "autoRenewPeriod"
	ZoneDomainStatusClientDeleteProhibited   ZoneDomainStatus = "clientDeleteProhibited"
	ZoneDomainStatusClientHold               ZoneDomainStatus = "clientHold"
	ZoneDomainStatusClientRenewProhibited    ZoneDomainStatus = "clientRenewProhibited"
	ZoneDomainStatusClientTransferProhibited ZoneDomainStatus = "clientTransferProhibited"
	ZoneDomainStatusClientUpdateProhibited   ZoneDomainStatus = "clientUpdateProhibited"
	ZoneDomainStatusEmpty                    ZoneDomainStatus = ""
	ZoneDomainStatusInactive                 ZoneDomainStatus = "inactive"
	ZoneDomainStatusLessThannil              ZoneDomainStatus = "<nil>"
	ZoneDomainStatusOk                       ZoneDomainStatus = "ok"
	ZoneDomainStatusPendingCreate            ZoneDomainStatus = "pendingCreate"
	ZoneDomainStatusPendingDelete            ZoneDomainStatus = "pendingDelete"
	ZoneDomainStatusPendingRenew             ZoneDomainStatus = "pendingRenew"
	ZoneDomainStatusPendingRestore           ZoneDomainStatus = "pendingRestore"
	ZoneDomainStatusPendingTransfer          ZoneDomainStatus = "pendingTransfer"
	ZoneDomainStatusPendingUpdate            ZoneDomainStatus = "pendingUpdate"
	ZoneDomainStatusRedemptionPeriod         ZoneDomainStatus = "redemptionPeriod"
	ZoneDomainStatusRenewPeriod              ZoneDomainStatus = "renewPeriod"
	ZoneDomainStatusServerDeleteProhibited   ZoneDomainStatus = "serverDeleteProhibited"
	ZoneDomainStatusServerHold               ZoneDomainStatus = "serverHold"
	ZoneDomainStatusServerRenewProhibited    ZoneDomainStatus = "serverRenewProhibited"
	ZoneDomainStatusServerTransferProhibited ZoneDomainStatus = "serverTransferProhibited"
	ZoneDomainStatusServerUpdateProhibited   ZoneDomainStatus = "serverUpdateProhibited"
	ZoneDomainStatusTransferPeriod           ZoneDomainStatus = "transferPeriod"
)

// Defines values for ZoneStatus.
const (
	ZoneStatusActive     ZoneStatus = "active"
	ZoneStatusDeprecated ZoneStatus = "deprecated"
	ZoneStatusDynamic    ZoneStatus = "dynamic"
	ZoneStatusEmpty      ZoneStatus = ""
	ZoneStatusParked     ZoneStatus = "parked"
	ZoneStatusReserved   ZoneStatus = "reserved"
)

// Defines values for ZoneRequestDomainStatus.
const (
	ZoneRequestDomainStatusAddPeriod                ZoneRequestDomainStatus = "addPeriod"
	ZoneRequestDomainStatusAutoRenewPeriod          ZoneRequestDomainStatus = "autoRenewPeriod"
	ZoneRequestDomainStatusClientDeleteProhibited   ZoneRequestDomainStatus = "clientDeleteProhibited"
	ZoneRequestDomainStatusClientHold               ZoneRequestDomainStatus = "clientHold"
	ZoneRequestDomainStatusClientRenewProhibited    ZoneRequestDomainStatus = "clientRenewProhibited"
	ZoneRequestDomainStatusClientTransferProhibited ZoneRequestDomainStatus = "clientTransferProhibited"
	ZoneRequestDomainStatusClientUpdateProhibited   ZoneRequestDomainStatus = "clientUpdateProhibited"
	ZoneRequestDomainStatusEmpty                    ZoneRequestDomainStatus = ""
	ZoneRequestDomainStatusInactive                 ZoneRequestDomainStatus = "inactive"
	ZoneRequestDomainStatusLessThannil              ZoneRequestDomainStatus = "<nil>"
	ZoneRequestDomainStatusOk                       ZoneRequestDomainStatus = "ok"
	ZoneRequestDomainStatusPendingCreate            ZoneRequestDomainStatus = "pendingCreate"
	ZoneRequestDomainStatusPendingDelete            ZoneRequestDomainStatus = "pendingDelete"
	ZoneRequestDomainStatusPendingRenew             ZoneRequestDomainStatus = "pendingRenew"
	ZoneRequestDomainStatusPendingRestore           ZoneRequestDomainStatus = "pendingRestore"
	ZoneRequestDomainStatusPendingTransfer          ZoneRequestDomainStatus = "pendingTransfer"
	ZoneRequestDomainStatusPendingUpdate            ZoneRequestDomainStatus = "pendingUpdate"
	ZoneRequestDomainStatusRedemptionPeriod         ZoneRequestDomainStatus = "redemptionPeriod"
	ZoneRequestDomainStatusRenewPeriod              ZoneRequestDomainStatus = "renewPeriod"
	ZoneRequestDomainStatusServerDeleteProhibited   ZoneRequestDomainStatus = "serverDeleteProhibited"
	ZoneRequestDomainStatusServerHold               ZoneRequestDomainStatus = "serverHold"
	ZoneRequestDomainStatusServerRenewProhibited    ZoneRequestDomainStatus = "serverRenewProhibited"
	ZoneRequestDomainStatusServerTransferProhibited ZoneRequestDomainStatus = "serverTransferProhibited"
	ZoneRequestDomainStatusServerUpdateProhibited   ZoneRequestDomainStatus = "serverUpdateProhibited"
	ZoneRequestDomainStatusTransferPeriod           ZoneRequestDomainStatus = "transferPeriod"
)

// Defines values for ZoneRequestStatus.
const (
	Active     ZoneRequestStatus = "active"
	Deprecated ZoneRequestStatus = "deprecated"
	Dynamic    ZoneRequestStatus = "dynamic"
	Empty      ZoneRequestStatus = ""
	Parked     ZoneRequestStatus = "parked"
	Reserved   ZoneRequestStatus = "reserved"
)

// BriefDNSSECKeyTemplate Adds support for custom fields and tags.
type BriefDNSSECKeyTemplate struct {
	// Algorithm * `RSASHA256` - RSASHA256 (8)
	// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
	// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
	// * `ED25519` - ED25519 (15)
	// * `ED448` - ED448 (16)
	Algorithm   BriefDNSSECKeyTemplateAlgorithm `json:"algorithm"`
	Description *string                         `json:"description,omitempty"`
	Display     *string                         `json:"display,omitempty"`
	Id          *int                            `json:"id,omitempty"`

	// KeySize * `512` - 512
	// * `1024` - 1024
	// * `2048` - 2048
	// * `3072` - 3072
	// * `4096` - 4096
	KeySize  *BriefDNSSECKeyTemplateKeySize `json:"key_size"`
	Lifetime *int                           `json:"lifetime"`
	Name     string                         `json:"name"`

	// Type * `CSK` - CSK
	// * `KSK` - KSK
	// * `ZSK` - ZSK
	Type BriefDNSSECKeyTemplateType `json:"type"`
	Url  *string                    `json:"url,omitempty"`
}

// BriefDNSSECKeyTemplateAlgorithm * `RSASHA256` - RSASHA256 (8)
// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
// * `ED25519` - ED25519 (15)
// * `ED448` - ED448 (16)
type BriefDNSSECKeyTemplateAlgorithm string

// BriefDNSSECKeyTemplateKeySize * `512` - 512
// * `1024` - 1024
// * `2048` - 2048
// * `3072` - 3072
// * `4096` - 4096
type BriefDNSSECKeyTemplateKeySize int

// BriefDNSSECKeyTemplateType * `CSK` - CSK
// * `KSK` - KSK
// * `ZSK` - ZSK
type BriefDNSSECKeyTemplateType string

// BriefDNSSECKeyTemplateRequest Adds support for custom fields and tags.
type BriefDNSSECKeyTemplateRequest struct {
	// Algorithm * `RSASHA256` - RSASHA256 (8)
	// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
	// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
	// * `ED25519` - ED25519 (15)
	// * `ED448` - ED448 (16)
	Algorithm   BriefDNSSECKeyTemplateRequestAlgorithm `json:"algorithm"`
	Description *string                                `json:"description,omitempty"`

	// KeySize * `512` - 512
	// * `1024` - 1024
	// * `2048` - 2048
	// * `3072` - 3072
	// * `4096` - 4096
	KeySize  *BriefDNSSECKeyTemplateRequestKeySize `json:"key_size"`
	Lifetime *int                                  `json:"lifetime"`
	Name     string                                `json:"name"`

	// Type * `CSK` - CSK
	// * `KSK` - KSK
	// * `ZSK` - ZSK
	Type BriefDNSSECKeyTemplateRequestType `json:"type"`
}

// BriefDNSSECKeyTemplateRequestAlgorithm * `RSASHA256` - RSASHA256 (8)
// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
// * `ED25519` - ED25519 (15)
// * `ED448` - ED448 (16)
type BriefDNSSECKeyTemplateRequestAlgorithm string

// BriefDNSSECKeyTemplateRequestKeySize * `512` - 512
// * `1024` - 1024
// * `2048` - 2048
// * `3072` - 3072
// * `4096` - 4096
type BriefDNSSECKeyTemplateRequestKeySize int

// BriefDNSSECKeyTemplateRequestType * `CSK` - CSK
// * `KSK` - KSK
// * `ZSK` - ZSK
type BriefDNSSECKeyTemplateRequestType string

// BriefDNSSECPolicy Adds support for custom fields and tags.
type BriefDNSSECPolicy struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *BriefDNSSECPolicyStatus `json:"status,omitempty"`
	Url    *string                  `json:"url,omitempty"`
}

// BriefDNSSECPolicyStatus * `active` - Active
// * `inactive` - Inactive
type BriefDNSSECPolicyStatus string

// BriefDNSSECPolicyRequest Adds support for custom fields and tags.
type BriefDNSSECPolicyRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *BriefDNSSECPolicyRequestStatus `json:"status,omitempty"`
}

// BriefDNSSECPolicyRequestStatus * `active` - Active
// * `inactive` - Inactive
type BriefDNSSECPolicyRequestStatus string

// BriefIPAddress Adds support for custom fields and tags.
type BriefIPAddress struct {
	Address     string  `json:"address"`
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Family      *struct {
		Label *BriefIPAddressFamilyLabel `json:"label,omitempty"`

		// Value * `4` - IPv4
		// * `6` - IPv6
		Value *BriefIPAddressFamilyValue `json:"value,omitempty"`
	} `json:"family,omitempty"`
	Id  *int    `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
}

// BriefIPAddressFamilyLabel defines model for BriefIPAddress.Family.Label.
type BriefIPAddressFamilyLabel string

// BriefIPAddressFamilyValue * `4` - IPv4
// * `6` - IPv6
type BriefIPAddressFamilyValue int

// BriefNameServer Adds support for custom fields and tags.
type BriefNameServer struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Url         *string `json:"url,omitempty"`
}

// BriefNameServerRequest Adds support for custom fields and tags.
type BriefNameServerRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// BriefPrefix Adds support for custom fields and tags.
type BriefPrefix struct {
	Depth       *int    `json:"_depth,omitempty"`
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Family      *struct {
		Label *BriefPrefixFamilyLabel `json:"label,omitempty"`

		// Value * `4` - IPv4
		// * `6` - IPv6
		Value *BriefPrefixFamilyValue `json:"value,omitempty"`
	} `json:"family,omitempty"`
	Id     *int    `json:"id,omitempty"`
	Prefix string  `json:"prefix"`
	Url    *string `json:"url,omitempty"`
}

// BriefPrefixFamilyLabel defines model for BriefPrefix.Family.Label.
type BriefPrefixFamilyLabel string

// BriefPrefixFamilyValue * `4` - IPv4
// * `6` - IPv6
type BriefPrefixFamilyValue int

// BriefPrefixRequest Adds support for custom fields and tags.
type BriefPrefixRequest struct {
	Description *string `json:"description,omitempty"`
	Prefix      string  `json:"prefix"`
}

// BriefRegistrar Adds support for custom fields and tags.
type BriefRegistrar struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	IanaId      *int    `json:"iana_id"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Url         *string `json:"url,omitempty"`
}

// BriefRegistrarRequest Adds support for custom fields and tags.
type BriefRegistrarRequest struct {
	Description *string `json:"description,omitempty"`
	IanaId      *int    `json:"iana_id"`
	Name        string  `json:"name"`
}

// BriefRegistrationContact Adds support for custom fields and tags.
type BriefRegistrationContact struct {
	ContactId   string  `json:"contact_id"`
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// BriefRegistrationContactRequest Adds support for custom fields and tags.
type BriefRegistrationContactRequest struct {
	ContactId   string  `json:"contact_id"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// BriefRole Adds support for custom fields and tags.
type BriefRole struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	PrefixCount *int64  `json:"prefix_count,omitempty"`
	Slug        string  `json:"slug"`
	Url         *string `json:"url,omitempty"`
	VlanCount   *int64  `json:"vlan_count,omitempty"`
}

// BriefRoleRequest Adds support for custom fields and tags.
type BriefRoleRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
}

// BriefTenant Adds support for custom fields and tags.
type BriefTenant struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
	Url         *string `json:"url,omitempty"`
}

// BriefTenantGroup Extends PrimaryModelSerializer to include MPTT support.
type BriefTenantGroup struct {
	Depth       *int    `json:"_depth,omitempty"`
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
	TenantCount *int    `json:"tenant_count,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// BriefTenantGroupRequest Extends PrimaryModelSerializer to include MPTT support.
type BriefTenantGroupRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
}

// BriefTenantRequest Adds support for custom fields and tags.
type BriefTenantRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Slug        string  `json:"slug"`
}

// BriefVLAN Adds support for custom fields and tags.
type BriefVLAN struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Url         *string `json:"url,omitempty"`

	// Vid Numeric VLAN ID (1-4094)
	Vid int `json:"vid"`
}

// BriefVLANRequest Adds support for custom fields and tags.
type BriefVLANRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`

	// Vid Numeric VLAN ID (1-4094)
	Vid int `json:"vid"`
}

// BriefVRF Adds support for custom fields and tags.
type BriefVRF struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	PrefixCount *int64  `json:"prefix_count,omitempty"`

	// Rd Unique route distinguisher (as defined in RFC 4364)
	Rd  *string `json:"rd"`
	Url *string `json:"url,omitempty"`
}

// BriefVRFRequest Adds support for custom fields and tags.
type BriefVRFRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`

	// Rd Unique route distinguisher (as defined in RFC 4364)
	Rd *string `json:"rd"`
}

// BriefView Adds support for custom fields and tags.
type BriefView struct {
	DefaultView *bool   `json:"default_view,omitempty"`
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Url         *string `json:"url,omitempty"`
}

// BriefViewRequest Adds support for custom fields and tags.
type BriefViewRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// BriefZoneTemplateRequest Adds support for custom fields and tags.
type BriefZoneTemplateRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// DNSSECKeyTemplate Adds support for custom fields and tags.
type DNSSECKeyTemplate struct {
	// Algorithm * `RSASHA256` - RSASHA256 (8)
	// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
	// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
	// * `ED25519` - ED25519 (15)
	// * `ED448` - ED448 (16)
	Algorithm    DNSSECKeyTemplateAlgorithm `json:"algorithm"`
	Created      *time.Time                 `json:"created"`
	CustomFields *map[string]interface{}    `json:"custom_fields,omitempty"`
	Description  *string                    `json:"description,omitempty"`
	Display      *string                    `json:"display,omitempty"`
	Id           *int                       `json:"id,omitempty"`

	// KeySize * `512` - 512
	// * `1024` - 1024
	// * `2048` - 2048
	// * `3072` - 3072
	// * `4096` - 4096
	KeySize     *DNSSECKeyTemplateKeySize `json:"key_size"`
	LastUpdated *time.Time                `json:"last_updated"`
	Lifetime    *int                      `json:"lifetime"`
	Name        string                    `json:"name"`

	// Policies Policies using this Key Template
	Policies *[]NestedDNSSECPolicy `json:"policies,omitempty"`
	Tags     *[]NestedTag          `json:"tags,omitempty"`
	Tenant   *Tenant               `json:"tenant"`

	// Type * `CSK` - CSK
	// * `KSK` - KSK
	// * `ZSK` - ZSK
	Type DNSSECKeyTemplateType `json:"type"`
	Url  *string               `json:"url,omitempty"`
}

// DNSSECKeyTemplateAlgorithm * `RSASHA256` - RSASHA256 (8)
// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
// * `ED25519` - ED25519 (15)
// * `ED448` - ED448 (16)
type DNSSECKeyTemplateAlgorithm string

// DNSSECKeyTemplateKeySize * `512` - 512
// * `1024` - 1024
// * `2048` - 2048
// * `3072` - 3072
// * `4096` - 4096
type DNSSECKeyTemplateKeySize int

// DNSSECKeyTemplateType * `CSK` - CSK
// * `KSK` - KSK
// * `ZSK` - ZSK
type DNSSECKeyTemplateType string

// DNSSECKeyTemplateRequest Adds support for custom fields and tags.
type DNSSECKeyTemplateRequest struct {
	// Algorithm * `RSASHA256` - RSASHA256 (8)
	// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
	// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
	// * `ED25519` - ED25519 (15)
	// * `ED448` - ED448 (16)
	Algorithm    DNSSECKeyTemplateRequestAlgorithm `json:"algorithm"`
	CustomFields *map[string]interface{}           `json:"custom_fields,omitempty"`
	Description  *string                           `json:"description,omitempty"`

	// KeySize * `512` - 512
	// * `1024` - 1024
	// * `2048` - 2048
	// * `3072` - 3072
	// * `4096` - 4096
	KeySize  *DNSSECKeyTemplateRequestKeySize `json:"key_size"`
	Lifetime *int                             `json:"lifetime"`
	Name     string                           `json:"name"`
	Tags     *[]NestedTagRequest              `json:"tags,omitempty"`
	Tenant   *TenantRequest                   `json:"tenant"`

	// Type * `CSK` - CSK
	// * `KSK` - KSK
	// * `ZSK` - ZSK
	Type DNSSECKeyTemplateRequestType `json:"type"`
}

// DNSSECKeyTemplateRequestAlgorithm * `RSASHA256` - RSASHA256 (8)
// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
// * `ED25519` - ED25519 (15)
// * `ED448` - ED448 (16)
type DNSSECKeyTemplateRequestAlgorithm string

// DNSSECKeyTemplateRequestKeySize * `512` - 512
// * `1024` - 1024
// * `2048` - 2048
// * `3072` - 3072
// * `4096` - 4096
type DNSSECKeyTemplateRequestKeySize int

// DNSSECKeyTemplateRequestType * `CSK` - CSK
// * `KSK` - KSK
// * `ZSK` - ZSK
type DNSSECKeyTemplateRequestType string

// DNSSECPolicy Adds support for custom fields and tags.
type DNSSECPolicy struct {
	CdsDigestTypes *[]DNSSECPolicyCdsDigestTypes `json:"cds_digest_types"`
	CreateCdnskey  *bool                         `json:"create_cdnskey,omitempty"`
	Created        *time.Time                    `json:"created"`
	CustomFields   *map[string]interface{}       `json:"custom_fields,omitempty"`
	Description    *string                       `json:"description,omitempty"`
	Display        *string                       `json:"display,omitempty"`
	DnskeyTtl      *int                          `json:"dnskey_ttl"`
	Id             *int                          `json:"id,omitempty"`

	// KeyTemplates Key templates assigned to the policy
	KeyTemplates             *[]BriefDNSSECKeyTemplate `json:"key_templates,omitempty"`
	LastUpdated              *time.Time                `json:"last_updated"`
	MaxZoneTtl               *int                      `json:"max_zone_ttl"`
	Name                     string                    `json:"name"`
	Nsec3Iterations          *int                      `json:"nsec3_iterations"`
	Nsec3OptOut              *bool                     `json:"nsec3_opt_out,omitempty"`
	Nsec3SaltSize            *int                      `json:"nsec3_salt_size"`
	ParentDsTtl              *int                      `json:"parent_ds_ttl"`
	ParentPropagationDelay   *int                      `json:"parent_propagation_delay"`
	PublishSafety            *int                      `json:"publish_safety"`
	PurgeKeys                *int                      `json:"purge_keys"`
	RetireSafety             *int                      `json:"retire_safety"`
	SignaturesJitter         *int                      `json:"signatures_jitter"`
	SignaturesRefresh        *int                      `json:"signatures_refresh"`
	SignaturesValidity       *int                      `json:"signatures_validity"`
	SignaturesValidityDnskey *int                      `json:"signatures_validity_dnskey"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status               *DNSSECPolicyStatus `json:"status,omitempty"`
	Tags                 *[]NestedTag        `json:"tags,omitempty"`
	Tenant               *Tenant             `json:"tenant"`
	Url                  *string             `json:"url,omitempty"`
	UseNsec3             *bool               `json:"use_nsec3,omitempty"`
	ZonePropagationDelay *int                `json:"zone_propagation_delay"`

	// ZoneTemplates Zone templates this policy is assigned to
	ZoneTemplates *[]NestedZoneTemplate `json:"zone_templates,omitempty"`

	// Zones Zones this policy is assigned to
	Zones *[]NestedZone `json:"zones,omitempty"`
}

// DNSSECPolicyCdsDigestTypes * `SHA256` - SHA256
// * `SHA384` - SHA384
type DNSSECPolicyCdsDigestTypes string

// DNSSECPolicyStatus * `active` - Active
// * `inactive` - Inactive
type DNSSECPolicyStatus string

// DNSSECPolicyRequest Adds support for custom fields and tags.
type DNSSECPolicyRequest struct {
	CdsDigestTypes *[]DNSSECPolicyRequestCdsDigestTypes `json:"cds_digest_types"`
	CreateCdnskey  *bool                                `json:"create_cdnskey,omitempty"`
	CustomFields   *map[string]interface{}              `json:"custom_fields,omitempty"`
	Description    *string                              `json:"description,omitempty"`
	DnskeyTtl      *int                                 `json:"dnskey_ttl"`

	// KeyTemplates Key templates assigned to the policy
	KeyTemplates             *[]BriefDNSSECKeyTemplateRequest `json:"key_templates,omitempty"`
	MaxZoneTtl               *int                             `json:"max_zone_ttl"`
	Name                     string                           `json:"name"`
	Nsec3Iterations          *int                             `json:"nsec3_iterations"`
	Nsec3OptOut              *bool                            `json:"nsec3_opt_out,omitempty"`
	Nsec3SaltSize            *int                             `json:"nsec3_salt_size"`
	ParentDsTtl              *int                             `json:"parent_ds_ttl"`
	ParentPropagationDelay   *int                             `json:"parent_propagation_delay"`
	PublishSafety            *int                             `json:"publish_safety"`
	PurgeKeys                *int                             `json:"purge_keys"`
	RetireSafety             *int                             `json:"retire_safety"`
	SignaturesJitter         *int                             `json:"signatures_jitter"`
	SignaturesRefresh        *int                             `json:"signatures_refresh"`
	SignaturesValidity       *int                             `json:"signatures_validity"`
	SignaturesValidityDnskey *int                             `json:"signatures_validity_dnskey"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status               *DNSSECPolicyRequestStatus `json:"status,omitempty"`
	Tags                 *[]NestedTagRequest        `json:"tags,omitempty"`
	Tenant               *TenantRequest             `json:"tenant"`
	UseNsec3             *bool                      `json:"use_nsec3,omitempty"`
	ZonePropagationDelay *int                       `json:"zone_propagation_delay"`
}

// DNSSECPolicyRequestCdsDigestTypes * `SHA256` - SHA256
// * `SHA384` - SHA384
type DNSSECPolicyRequestCdsDigestTypes string

// DNSSECPolicyRequestStatus * `active` - Active
// * `inactive` - Inactive
type DNSSECPolicyRequestStatus string

// NameServer Adds support for custom fields and tags.
type NameServer struct {
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Display      *string                 `json:"display,omitempty"`
	Id           *int                    `json:"id,omitempty"`
	LastUpdated  *time.Time              `json:"last_updated"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTag            `json:"tags,omitempty"`
	Tenant       *Tenant                 `json:"tenant"`
	Url          *string                 `json:"url,omitempty"`

	// Zones Zones served by the authoritative nameserver
	Zones *[]NestedZone `json:"zones,omitempty"`
}

// NameServerRequest Adds support for custom fields and tags.
type NameServerRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
	Tenant       *TenantRequest          `json:"tenant"`
}

// NestedDNSSECPolicy Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedDNSSECPolicy struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *NestedDNSSECPolicyStatus `json:"status,omitempty"`
	Url    *string                   `json:"url,omitempty"`
}

// NestedDNSSECPolicyStatus * `active` - Active
// * `inactive` - Inactive
type NestedDNSSECPolicyStatus string

// NestedRecord Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedRecord struct {
	Active  *bool   `json:"active"`
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Managed *bool   `json:"managed,omitempty"`
	Name    string  `json:"name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *NestedRecordStatus `json:"status,omitempty"`
	Ttl    *int                `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  NestedRecordType `json:"type"`
	Url   *string          `json:"url,omitempty"`
	Value string           `json:"value"`

	// Zone Zone the record belongs to
	Zone *NestedZone `json:"zone,omitempty"`
}

// NestedRecordStatus * `active` - Active
// * `inactive` - Inactive
type NestedRecordStatus string

// NestedRecordType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type NestedRecordType string

// NestedRecordTemplate Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedRecordTemplate struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	RecordName  string  `json:"record_name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *NestedRecordTemplateStatus `json:"status,omitempty"`
	Ttl    *int                        `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  NestedRecordTemplateType `json:"type"`
	Url   *string                  `json:"url,omitempty"`
	Value string                   `json:"value"`
}

// NestedRecordTemplateStatus * `active` - Active
// * `inactive` - Inactive
type NestedRecordTemplateStatus string

// NestedRecordTemplateType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type NestedRecordTemplateType string

// NestedRecordTemplateRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedRecordTemplateRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	RecordName  string  `json:"record_name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *NestedRecordTemplateRequestStatus `json:"status,omitempty"`
	Ttl    *int                               `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  NestedRecordTemplateRequestType `json:"type"`
	Value string                          `json:"value"`
}

// NestedRecordTemplateRequestStatus * `active` - Active
// * `inactive` - Inactive
type NestedRecordTemplateRequestStatus string

// NestedRecordTemplateRequestType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type NestedRecordTemplateRequestType string

// NestedTag Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTag struct {
	Color      *string `json:"color,omitempty"`
	Display    *string `json:"display,omitempty"`
	DisplayUrl *string `json:"display_url,omitempty"`
	Id         *int    `json:"id,omitempty"`
	Name       string  `json:"name"`
	Slug       string  `json:"slug"`
	Url        *string `json:"url,omitempty"`
}

// NestedTagRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTagRequest struct {
	Color *string `json:"color,omitempty"`
	Name  string  `json:"name"`
	Slug  string  `json:"slug"`
}

// NestedZone Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedZone struct {
	Active  *bool   `json:"active"`
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Name    string  `json:"name"`

	// Rfc2317Prefix RFC2317 IPv4 prefix with a length of at least 25 bits
	Rfc2317Prefix *string `json:"rfc2317_prefix"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	// * `parked` - Parked
	// * `dynamic` - Dynamic
	Status *NestedZoneStatus `json:"status,omitempty"`
	Url    *string           `json:"url,omitempty"`

	// View View the zone belongs to
	View *BriefView `json:"view,omitempty"`
}

// NestedZoneStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
// * `parked` - Parked
// * `dynamic` - Dynamic
type NestedZoneStatus string

// NestedZoneRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedZoneRequest struct {
	Name string `json:"name"`

	// Rfc2317Prefix RFC2317 IPv4 prefix with a length of at least 25 bits
	Rfc2317Prefix *string `json:"rfc2317_prefix"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	// * `parked` - Parked
	// * `dynamic` - Dynamic
	Status *NestedZoneRequestStatus `json:"status,omitempty"`
}

// NestedZoneRequestStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
// * `parked` - Parked
// * `dynamic` - Dynamic
type NestedZoneRequestStatus string

// NestedZoneTemplate Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedZoneTemplate struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Url         *string `json:"url,omitempty"`
}

// PaginatedDNSSECKeyTemplateList defines model for PaginatedDNSSECKeyTemplateList.
type PaginatedDNSSECKeyTemplateList struct {
	Count    int                 `json:"count"`
	Next     *string             `json:"next"`
	Previous *string             `json:"previous"`
	Results  []DNSSECKeyTemplate `json:"results"`
}

// PaginatedDNSSECPolicyList defines model for PaginatedDNSSECPolicyList.
type PaginatedDNSSECPolicyList struct {
	Count    int            `json:"count"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  []DNSSECPolicy `json:"results"`
}

// PaginatedNameServerList defines model for PaginatedNameServerList.
type PaginatedNameServerList struct {
	Count    int          `json:"count"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  []NameServer `json:"results"`
}

// PaginatedPrefixList defines model for PaginatedPrefixList.
type PaginatedPrefixList struct {
	Count    int      `json:"count"`
	Next     *string  `json:"next"`
	Previous *string  `json:"previous"`
	Results  []Prefix `json:"results"`
}

// PaginatedProfileList defines model for PaginatedProfileList.
type PaginatedProfileList struct {
	Count    int       `json:"count"`
	Next     *string   `json:"next"`
	Previous *string   `json:"previous"`
	Results  []Profile `json:"results"`
}

// PaginatedRecordList defines model for PaginatedRecordList.
type PaginatedRecordList struct {
	Count    int      `json:"count"`
	Next     *string  `json:"next"`
	Previous *string  `json:"previous"`
	Results  []Record `json:"results"`
}

// PaginatedRecordTemplateList defines model for PaginatedRecordTemplateList.
type PaginatedRecordTemplateList struct {
	Count    int              `json:"count"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  []RecordTemplate `json:"results"`
}

// PaginatedRegistrarList defines model for PaginatedRegistrarList.
type PaginatedRegistrarList struct {
	Count    int         `json:"count"`
	Next     *string     `json:"next"`
	Previous *string     `json:"previous"`
	Results  []Registrar `json:"results"`
}

// PaginatedRegistrationContactList defines model for PaginatedRegistrationContactList.
type PaginatedRegistrationContactList struct {
	Count    int                   `json:"count"`
	Next     *string               `json:"next"`
	Previous *string               `json:"previous"`
	Results  []RegistrationContact `json:"results"`
}

// PaginatedViewList defines model for PaginatedViewList.
type PaginatedViewList struct {
	Count    int     `json:"count"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  []View  `json:"results"`
}

// PaginatedZoneList defines model for PaginatedZoneList.
type PaginatedZoneList struct {
	Count    int     `json:"count"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  []Zone  `json:"results"`
}

// PaginatedZoneTemplateList defines model for PaginatedZoneTemplateList.
type PaginatedZoneTemplateList struct {
	Count    int            `json:"count"`
	Next     *string        `json:"next"`
	Previous *string        `json:"previous"`
	Results  []ZoneTemplate `json:"results"`
}

// PatchedDNSSECKeyTemplateRequest Adds support for custom fields and tags.
type PatchedDNSSECKeyTemplateRequest struct {
	// Algorithm * `RSASHA256` - RSASHA256 (8)
	// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
	// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
	// * `ED25519` - ED25519 (15)
	// * `ED448` - ED448 (16)
	Algorithm    *PatchedDNSSECKeyTemplateRequestAlgorithm `json:"algorithm,omitempty"`
	CustomFields *map[string]interface{}                   `json:"custom_fields,omitempty"`
	Description  *string                                   `json:"description,omitempty"`

	// KeySize * `512` - 512
	// * `1024` - 1024
	// * `2048` - 2048
	// * `3072` - 3072
	// * `4096` - 4096
	KeySize  *PatchedDNSSECKeyTemplateRequestKeySize `json:"key_size"`
	Lifetime *int                                    `json:"lifetime"`
	Name     *string                                 `json:"name,omitempty"`
	Tags     *[]NestedTagRequest                     `json:"tags,omitempty"`
	Tenant   *TenantRequest                          `json:"tenant"`

	// Type * `CSK` - CSK
	// * `KSK` - KSK
	// * `ZSK` - ZSK
	Type *PatchedDNSSECKeyTemplateRequestType `json:"type,omitempty"`
}

// PatchedDNSSECKeyTemplateRequestAlgorithm * `RSASHA256` - RSASHA256 (8)
// * `ECDSAP256SHA256` - ECDSAP256SHA256 (13)
// * `ECDSAP384SHA384` - ECDSAP384SHA384 (14)
// * `ED25519` - ED25519 (15)
// * `ED448` - ED448 (16)
type PatchedDNSSECKeyTemplateRequestAlgorithm string

// PatchedDNSSECKeyTemplateRequestKeySize * `512` - 512
// * `1024` - 1024
// * `2048` - 2048
// * `3072` - 3072
// * `4096` - 4096
type PatchedDNSSECKeyTemplateRequestKeySize int

// PatchedDNSSECKeyTemplateRequestType * `CSK` - CSK
// * `KSK` - KSK
// * `ZSK` - ZSK
type PatchedDNSSECKeyTemplateRequestType string

// PatchedDNSSECPolicyRequest Adds support for custom fields and tags.
type PatchedDNSSECPolicyRequest struct {
	CdsDigestTypes *[]PatchedDNSSECPolicyRequestCdsDigestTypes `json:"cds_digest_types"`
	CreateCdnskey  *bool                                       `json:"create_cdnskey,omitempty"`
	CustomFields   *map[string]interface{}                     `json:"custom_fields,omitempty"`
	Description    *string                                     `json:"description,omitempty"`
	DnskeyTtl      *int                                        `json:"dnskey_ttl"`

	// KeyTemplates Key templates assigned to the policy
	KeyTemplates             *[]BriefDNSSECKeyTemplateRequest `json:"key_templates,omitempty"`
	MaxZoneTtl               *int                             `json:"max_zone_ttl"`
	Name                     *string                          `json:"name,omitempty"`
	Nsec3Iterations          *int                             `json:"nsec3_iterations"`
	Nsec3OptOut              *bool                            `json:"nsec3_opt_out,omitempty"`
	Nsec3SaltSize            *int                             `json:"nsec3_salt_size"`
	ParentDsTtl              *int                             `json:"parent_ds_ttl"`
	ParentPropagationDelay   *int                             `json:"parent_propagation_delay"`
	PublishSafety            *int                             `json:"publish_safety"`
	PurgeKeys                *int                             `json:"purge_keys"`
	RetireSafety             *int                             `json:"retire_safety"`
	SignaturesJitter         *int                             `json:"signatures_jitter"`
	SignaturesRefresh        *int                             `json:"signatures_refresh"`
	SignaturesValidity       *int                             `json:"signatures_validity"`
	SignaturesValidityDnskey *int                             `json:"signatures_validity_dnskey"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status               *PatchedDNSSECPolicyRequestStatus `json:"status,omitempty"`
	Tags                 *[]NestedTagRequest               `json:"tags,omitempty"`
	Tenant               *TenantRequest                    `json:"tenant"`
	UseNsec3             *bool                             `json:"use_nsec3,omitempty"`
	ZonePropagationDelay *int                              `json:"zone_propagation_delay"`
}

// PatchedDNSSECPolicyRequestCdsDigestTypes * `SHA256` - SHA256
// * `SHA384` - SHA384
type PatchedDNSSECPolicyRequestCdsDigestTypes string

// PatchedDNSSECPolicyRequestStatus * `active` - Active
// * `inactive` - Inactive
type PatchedDNSSECPolicyRequestStatus string

// PatchedNameServerRequest Adds support for custom fields and tags.
type PatchedNameServerRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
	Tenant       *TenantRequest          `json:"tenant"`
}

// PatchedProfileRequest Adds support for custom fields and tags.
type PatchedProfileRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
	Text         *string                 `json:"text,omitempty"`
}

// PatchedRecordTemplateRequest Adds support for custom fields and tags.
type PatchedRecordTemplateRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// DisablePtr Disable PTR record creation
	DisablePtr *bool   `json:"disable_ptr,omitempty"`
	Name       *string `json:"name,omitempty"`
	RecordName *string `json:"record_name,omitempty"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *PatchedRecordTemplateRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest                  `json:"tags,omitempty"`
	Tenant *PatchedRecordTemplateRequest_Tenant `json:"tenant"`
	Ttl    *int                                 `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  *PatchedRecordTemplateRequestType `json:"type,omitempty"`
	Value *string                           `json:"value,omitempty"`
}

// PatchedRecordTemplateRequestStatus * `active` - Active
// * `inactive` - Inactive
type PatchedRecordTemplateRequestStatus string

// PatchedRecordTemplateRequestTenant0 defines model for .
type PatchedRecordTemplateRequestTenant0 = int

// PatchedRecordTemplateRequestTenant1 Adds support for custom fields and tags.
type PatchedRecordTemplateRequestTenant1 = BriefTenantRequest

// PatchedRecordTemplateRequest_Tenant defines model for PatchedRecordTemplateRequest.Tenant.
type PatchedRecordTemplateRequest_Tenant struct {
	union json.RawMessage
}

// PatchedRecordTemplateRequestType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type PatchedRecordTemplateRequestType string

// PatchedRegistrarRequest Adds support for custom fields and tags.
type PatchedRegistrarRequest struct {
	AbuseEmail   *openapi_types.Email    `json:"abuse_email,omitempty"`
	AbusePhone   *string                 `json:"abuse_phone,omitempty"`
	Address      *string                 `json:"address,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	IanaId       *int                    `json:"iana_id"`
	Name         *string                 `json:"name,omitempty"`
	ReferralUrl  *string                 `json:"referral_url,omitempty"`
	WhoisServer  *string                 `json:"whois_server,omitempty"`
}

// PatchedRegistrationContactRequest Adds support for custom fields and tags.
type PatchedRegistrationContactRequest struct {
	City          *string                 `json:"city,omitempty"`
	ContactId     *string                 `json:"contact_id,omitempty"`
	Country       *string                 `json:"country,omitempty"`
	CustomFields  *map[string]interface{} `json:"custom_fields,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	Email         *openapi_types.Email    `json:"email,omitempty"`
	Fax           *string                 `json:"fax,omitempty"`
	FaxExt        *string                 `json:"fax_ext,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Organization  *string                 `json:"organization,omitempty"`
	Phone         *string                 `json:"phone,omitempty"`
	PhoneExt      *string                 `json:"phone_ext,omitempty"`
	PostalCode    *string                 `json:"postal_code,omitempty"`
	StateProvince *string                 `json:"state_province,omitempty"`
	Street        *string                 `json:"street,omitempty"`
}

// PatchedViewRequest Adds support for custom fields and tags.
type PatchedViewRequest struct {
	CustomFields    *map[string]interface{} `json:"custom_fields,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	IpAddressFilter *interface{}            `json:"ip_address_filter"`
	Name            *string                 `json:"name,omitempty"`

	// Prefixes IPAM Prefixes assigned to the View
	Prefixes *[]BriefPrefixRequest      `json:"prefixes,omitempty"`
	Tags     *[]NestedTagRequest        `json:"tags,omitempty"`
	Tenant   *PatchedViewRequest_Tenant `json:"tenant"`
}

// PatchedViewRequestTenant0 defines model for .
type PatchedViewRequestTenant0 = int

// PatchedViewRequestTenant1 Adds support for custom fields and tags.
type PatchedViewRequestTenant1 = BriefTenantRequest

// PatchedViewRequest_Tenant defines model for PatchedViewRequest.Tenant.
type PatchedViewRequest_Tenant struct {
	union json.RawMessage
}

// PatchedWritablePrefixRequest Adds support for custom fields and tags.
type PatchedWritablePrefixRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// IsPool All IP addresses within this prefix are considered usable
	IsPool *bool `json:"is_pool,omitempty"`

	// MarkUtilized Treat as fully utilized
	MarkUtilized *bool                              `json:"mark_utilized,omitempty"`
	Prefix       *string                            `json:"prefix,omitempty"`
	Role         *PatchedWritablePrefixRequest_Role `json:"role"`
	ScopeId      *int                               `json:"scope_id"`
	ScopeType    *string                            `json:"scope_type"`

	// Status Operational status of this prefix
	//
	// * `container` - Container
	// * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	Status *PatchedWritablePrefixRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest                  `json:"tags,omitempty"`
	Tenant *PatchedWritablePrefixRequest_Tenant `json:"tenant"`
	Vlan   *PatchedWritablePrefixRequest_Vlan   `json:"vlan"`
	Vrf    *PatchedWritablePrefixRequest_Vrf    `json:"vrf"`
}

// PatchedWritablePrefixRequestRole0 defines model for .
type PatchedWritablePrefixRequestRole0 = int

// PatchedWritablePrefixRequestRole1 Adds support for custom fields and tags.
type PatchedWritablePrefixRequestRole1 = BriefRoleRequest

// PatchedWritablePrefixRequest_Role defines model for PatchedWritablePrefixRequest.Role.
type PatchedWritablePrefixRequest_Role struct {
	union json.RawMessage
}

// PatchedWritablePrefixRequestStatus Operational status of this prefix
//
// * `container` - Container
// * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type PatchedWritablePrefixRequestStatus string

// PatchedWritablePrefixRequestTenant0 defines model for .
type PatchedWritablePrefixRequestTenant0 = int

// PatchedWritablePrefixRequestTenant1 Adds support for custom fields and tags.
type PatchedWritablePrefixRequestTenant1 = BriefTenantRequest

// PatchedWritablePrefixRequest_Tenant defines model for PatchedWritablePrefixRequest.Tenant.
type PatchedWritablePrefixRequest_Tenant struct {
	union json.RawMessage
}

// PatchedWritablePrefixRequestVlan0 defines model for .
type PatchedWritablePrefixRequestVlan0 = int

// PatchedWritablePrefixRequestVlan1 Adds support for custom fields and tags.
type PatchedWritablePrefixRequestVlan1 = BriefVLANRequest

// PatchedWritablePrefixRequest_Vlan defines model for PatchedWritablePrefixRequest.Vlan.
type PatchedWritablePrefixRequest_Vlan struct {
	union json.RawMessage
}

// PatchedWritablePrefixRequestVrf0 defines model for .
type PatchedWritablePrefixRequestVrf0 = int

// PatchedWritablePrefixRequestVrf1 Adds support for custom fields and tags.
type PatchedWritablePrefixRequestVrf1 = BriefVRFRequest

// PatchedWritablePrefixRequest_Vrf defines model for PatchedWritablePrefixRequest.Vrf.
type PatchedWritablePrefixRequest_Vrf struct {
	union json.RawMessage
}

// PatchedWritableRecordRequest Adds support for custom fields and tags.
type PatchedWritableRecordRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// DisablePtr Disable PTR record creation
	DisablePtr *bool   `json:"disable_ptr,omitempty"`
	Fqdn       *string `json:"fqdn"`
	Managed    *bool   `json:"managed,omitempty"`
	Name       *string `json:"name,omitempty"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *PatchedWritableRecordRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest                  `json:"tags,omitempty"`
	Tenant *PatchedWritableRecordRequest_Tenant `json:"tenant"`
	Ttl    *int                                 `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  *PatchedWritableRecordRequestType `json:"type,omitempty"`
	Value *string                           `json:"value,omitempty"`
	Zone  *int                              `json:"zone,omitempty"`
}

// PatchedWritableRecordRequestStatus * `active` - Active
// * `inactive` - Inactive
type PatchedWritableRecordRequestStatus string

// PatchedWritableRecordRequestTenant0 defines model for .
type PatchedWritableRecordRequestTenant0 = int

// PatchedWritableRecordRequestTenant1 Adds support for custom fields and tags.
type PatchedWritableRecordRequestTenant1 = BriefTenantRequest

// PatchedWritableRecordRequest_Tenant defines model for PatchedWritableRecordRequest.Tenant.
type PatchedWritableRecordRequest_Tenant struct {
	union json.RawMessage
}

// PatchedWritableRecordRequestType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type PatchedWritableRecordRequestType string

// PatchedWritableZoneRequest Adds support for custom fields and tags.
type PatchedWritableZoneRequest struct {
	// AdminC Administrative contact for the domain
	AdminC *PatchedWritableZoneRequest_AdminC `json:"admin_c,omitempty"`

	// BillingC Billing contact for the domain
	BillingC     *PatchedWritableZoneRequest_BillingC `json:"billing_c,omitempty"`
	CustomFields *map[string]interface{}              `json:"custom_fields,omitempty"`
	DefaultTtl   *int32                                 `json:"default_ttl"`
	Description  *string                              `json:"description,omitempty"`

	// DnssecPolicy DNSSEC policy to apply to the zone
	DnssecPolicy *PatchedWritableZoneRequest_DnssecPolicy `json:"dnssec_policy,omitempty"`

	// DomainStatus * `addPeriod` - addPeriod
	// * `autoRenewPeriod` - autoRenewPeriod
	// * `inactive` - inactive
	// * `ok` - ok
	// * `pendingCreate` - pendingCreate
	// * `pendingDelete` - pendingDelete
	// * `pendingRenew` - pendingRenew
	// * `pendingRestore` - pendingRestore
	// * `pendingTransfer` - pendingTransfer
	// * `pendingUpdate` - pendingUpdate
	// * `redemptionPeriod` - redemptionPeriod
	// * `renewPeriod` - renewPeriod
	// * `serverDeleteProhibited` - serverDeleteProhibited
	// * `serverHold` - serverHold
	// * `serverRenewProhibited` - serverRenewProhibited
	// * `serverTransferProhibited` - serverTransferProhibited
	// * `serverUpdateProhibited` - serverUpdateProhibited
	// * `transferPeriod` - transferPeriod
	// * `clientDeleteProhibited` - clientDeleteProhibited
	// * `clientHold` - clientHold
	// * `clientRenewProhibited` - clientRenewProhibited
	// * `clientTransferProhibited` - clientTransferProhibited
	// * `clientUpdateProhibited` - clientUpdateProhibited
	DomainStatus   *PatchedWritableZoneRequestDomainStatus `json:"domain_status"`
	ExpirationDate *openapi_types.Date                     `json:"expiration_date"`

	// InlineSigning Use inline signing for DNSSEC
	InlineSigning *bool   `json:"inline_signing,omitempty"`
	Name          *string `json:"name,omitempty"`

	// Nameservers Nameservers for the zone
	Nameservers *[]BriefNameServerRequest `json:"nameservers,omitempty"`

	// Registrant Registrant of the domain
	Registrant *PatchedWritableZoneRequest_Registrant `json:"registrant,omitempty"`

	// Registrar Registrar the domain is registered with
	Registrar        *PatchedWritableZoneRequest_Registrar `json:"registrar,omitempty"`
	RegistryDomainId *string                               `json:"registry_domain_id"`

	// Rfc2317ParentManaged The parent zone for the RFC2317 zone is managed by NetBox DNS
	Rfc2317ParentManaged *bool `json:"rfc2317_parent_managed,omitempty"`

	// Rfc2317Prefix RFC2317 IPv4 prefix with a length of at least 25 bits
	Rfc2317Prefix *string `json:"rfc2317_prefix"`
	SoaExpire     *int32    `json:"soa_expire"`
	SoaMinimum    *int32    `json:"soa_minimum"`

	// SoaMname Primary nameserver for the zone
	SoaMname   *PatchedWritableZoneRequest_SoaMname `json:"soa_mname,omitempty"`
	SoaRefresh *int32                                 `json:"soa_refresh"`
	SoaRetry   *int32                                 `json:"soa_retry"`

	// SoaRname Contact email for the zone
	SoaRname  *string `json:"soa_rname,omitempty"`
	SoaSerial *int32  `json:"soa_serial"`

	// SoaSerialAuto Automatically generate the SOA serial number
	SoaSerialAuto *bool `json:"soa_serial_auto,omitempty"`
	SoaTtl        *int32  `json:"soa_ttl"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	// * `parked` - Parked
	// * `dynamic` - Dynamic
	Status *PatchedWritableZoneRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest               `json:"tags,omitempty"`

	// TechC Technical contact for the domain
	TechC *PatchedWritableZoneRequest_TechC `json:"tech_c,omitempty"`

	// Template Template to apply to the zone
	Template *PatchedWritableZoneRequest_Template `json:"template,omitempty"`
	Tenant   *PatchedWritableZoneRequest_Tenant   `json:"tenant"`

	// View View the zone belongs to
	View *PatchedWritableZoneRequest_View `json:"view,omitempty"`
}

// PatchedWritableZoneRequestAdminC0 defines model for .
type PatchedWritableZoneRequestAdminC0 = int

// PatchedWritableZoneRequestAdminC1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestAdminC1 = BriefRegistrationContactRequest

// PatchedWritableZoneRequest_AdminC Administrative contact for the domain
type PatchedWritableZoneRequest_AdminC struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestBillingC0 defines model for .
type PatchedWritableZoneRequestBillingC0 = int

// PatchedWritableZoneRequestBillingC1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestBillingC1 = BriefRegistrationContactRequest

// PatchedWritableZoneRequest_BillingC Billing contact for the domain
type PatchedWritableZoneRequest_BillingC struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestDnssecPolicy0 defines model for .
type PatchedWritableZoneRequestDnssecPolicy0 = int

// PatchedWritableZoneRequestDnssecPolicy1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestDnssecPolicy1 = BriefDNSSECPolicyRequest

// PatchedWritableZoneRequest_DnssecPolicy DNSSEC policy to apply to the zone
type PatchedWritableZoneRequest_DnssecPolicy struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestDomainStatus * `addPeriod` - addPeriod
// * `autoRenewPeriod` - autoRenewPeriod
// * `inactive` - inactive
// * `ok` - ok
// * `pendingCreate` - pendingCreate
// * `pendingDelete` - pendingDelete
// * `pendingRenew` - pendingRenew
// * `pendingRestore` - pendingRestore
// * `pendingTransfer` - pendingTransfer
// * `pendingUpdate` - pendingUpdate
// * `redemptionPeriod` - redemptionPeriod
// * `renewPeriod` - renewPeriod
// * `serverDeleteProhibited` - serverDeleteProhibited
// * `serverHold` - serverHold
// * `serverRenewProhibited` - serverRenewProhibited
// * `serverTransferProhibited` - serverTransferProhibited
// * `serverUpdateProhibited` - serverUpdateProhibited
// * `transferPeriod` - transferPeriod
// * `clientDeleteProhibited` - clientDeleteProhibited
// * `clientHold` - clientHold
// * `clientRenewProhibited` - clientRenewProhibited
// * `clientTransferProhibited` - clientTransferProhibited
// * `clientUpdateProhibited` - clientUpdateProhibited
type PatchedWritableZoneRequestDomainStatus string

// PatchedWritableZoneRequestRegistrant0 defines model for .
type PatchedWritableZoneRequestRegistrant0 = int

// PatchedWritableZoneRequestRegistrant1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestRegistrant1 = BriefRegistrationContactRequest

// PatchedWritableZoneRequest_Registrant Registrant of the domain
type PatchedWritableZoneRequest_Registrant struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestRegistrar0 defines model for .
type PatchedWritableZoneRequestRegistrar0 = int

// PatchedWritableZoneRequestRegistrar1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestRegistrar1 = BriefRegistrarRequest

// PatchedWritableZoneRequest_Registrar Registrar the domain is registered with
type PatchedWritableZoneRequest_Registrar struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestSoaMname0 defines model for .
type PatchedWritableZoneRequestSoaMname0 = int

// PatchedWritableZoneRequestSoaMname1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestSoaMname1 = BriefNameServerRequest

// PatchedWritableZoneRequest_SoaMname Primary nameserver for the zone
type PatchedWritableZoneRequest_SoaMname struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
// * `parked` - Parked
// * `dynamic` - Dynamic
type PatchedWritableZoneRequestStatus string

// PatchedWritableZoneRequestTechC0 defines model for .
type PatchedWritableZoneRequestTechC0 = int

// PatchedWritableZoneRequestTechC1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestTechC1 = BriefRegistrationContactRequest

// PatchedWritableZoneRequest_TechC Technical contact for the domain
type PatchedWritableZoneRequest_TechC struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestTemplate0 defines model for .
type PatchedWritableZoneRequestTemplate0 = int

// PatchedWritableZoneRequestTemplate1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestTemplate1 = BriefZoneTemplateRequest

// PatchedWritableZoneRequest_Template Template to apply to the zone
type PatchedWritableZoneRequest_Template struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestTenant0 defines model for .
type PatchedWritableZoneRequestTenant0 = int

// PatchedWritableZoneRequestTenant1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestTenant1 = BriefTenantRequest

// PatchedWritableZoneRequest_Tenant defines model for PatchedWritableZoneRequest.Tenant.
type PatchedWritableZoneRequest_Tenant struct {
	union json.RawMessage
}

// PatchedWritableZoneRequestView0 defines model for .
type PatchedWritableZoneRequestView0 = int

// PatchedWritableZoneRequestView1 Adds support for custom fields and tags.
type PatchedWritableZoneRequestView1 = BriefViewRequest

// PatchedWritableZoneRequest_View View the zone belongs to
type PatchedWritableZoneRequest_View struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequest Adds support for custom fields and tags.
type PatchedZoneTemplateRequest struct {
	// AdminC Administrative contact for the domain
	AdminC *PatchedZoneTemplateRequest_AdminC `json:"admin_c,omitempty"`

	// BillingC Billing contact for the domain
	BillingC     *PatchedZoneTemplateRequest_BillingC `json:"billing_c,omitempty"`
	CustomFields *map[string]interface{}              `json:"custom_fields,omitempty"`
	Description  *string                              `json:"description,omitempty"`

	// DnssecPolicy DNSSEC policy assigned to the zone template
	DnssecPolicy *PatchedZoneTemplateRequest_DnssecPolicy `json:"dnssec_policy,omitempty"`
	Name         *string                                  `json:"name,omitempty"`

	// Nameservers Nameservers for the zone
	Nameservers *[]BriefNameServerRequest `json:"nameservers,omitempty"`

	// RecordTemplates Record templates assigned to the zone template
	RecordTemplates *[]NestedRecordTemplateRequest `json:"record_templates,omitempty"`

	// Registrant Registrant of the domain
	Registrant *PatchedZoneTemplateRequest_Registrant `json:"registrant,omitempty"`

	// Registrar Registrar the domain is registered with
	Registrar *PatchedZoneTemplateRequest_Registrar `json:"registrar,omitempty"`

	// SoaMname Primary nameserver for the zone
	SoaMname *PatchedZoneTemplateRequest_SoaMname `json:"soa_mname,omitempty"`
	SoaRname *string                              `json:"soa_rname,omitempty"`
	Tags     *[]NestedTagRequest                  `json:"tags,omitempty"`

	// TechC Technical contact for the domain
	TechC  *PatchedZoneTemplateRequest_TechC  `json:"tech_c,omitempty"`
	Tenant *PatchedZoneTemplateRequest_Tenant `json:"tenant"`
}

// PatchedZoneTemplateRequestAdminC0 defines model for .
type PatchedZoneTemplateRequestAdminC0 = int

// PatchedZoneTemplateRequestAdminC1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestAdminC1 = BriefRegistrationContactRequest

// PatchedZoneTemplateRequest_AdminC Administrative contact for the domain
type PatchedZoneTemplateRequest_AdminC struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequestBillingC0 defines model for .
type PatchedZoneTemplateRequestBillingC0 = int

// PatchedZoneTemplateRequestBillingC1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestBillingC1 = BriefRegistrationContactRequest

// PatchedZoneTemplateRequest_BillingC Billing contact for the domain
type PatchedZoneTemplateRequest_BillingC struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequestDnssecPolicy0 defines model for .
type PatchedZoneTemplateRequestDnssecPolicy0 = int

// PatchedZoneTemplateRequestDnssecPolicy1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestDnssecPolicy1 = BriefDNSSECPolicyRequest

// PatchedZoneTemplateRequest_DnssecPolicy DNSSEC policy assigned to the zone template
type PatchedZoneTemplateRequest_DnssecPolicy struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequestRegistrant0 defines model for .
type PatchedZoneTemplateRequestRegistrant0 = int

// PatchedZoneTemplateRequestRegistrant1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestRegistrant1 = BriefRegistrationContactRequest

// PatchedZoneTemplateRequest_Registrant Registrant of the domain
type PatchedZoneTemplateRequest_Registrant struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequestRegistrar0 defines model for .
type PatchedZoneTemplateRequestRegistrar0 = int

// PatchedZoneTemplateRequestRegistrar1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestRegistrar1 = BriefRegistrarRequest

// PatchedZoneTemplateRequest_Registrar Registrar the domain is registered with
type PatchedZoneTemplateRequest_Registrar struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequestSoaMname0 defines model for .
type PatchedZoneTemplateRequestSoaMname0 = int

// PatchedZoneTemplateRequestSoaMname1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestSoaMname1 = BriefNameServerRequest

// PatchedZoneTemplateRequest_SoaMname Primary nameserver for the zone
type PatchedZoneTemplateRequest_SoaMname struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequestTechC0 defines model for .
type PatchedZoneTemplateRequestTechC0 = int

// PatchedZoneTemplateRequestTechC1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestTechC1 = BriefRegistrationContactRequest

// PatchedZoneTemplateRequest_TechC Technical contact for the domain
type PatchedZoneTemplateRequest_TechC struct {
	union json.RawMessage
}

// PatchedZoneTemplateRequestTenant0 defines model for .
type PatchedZoneTemplateRequestTenant0 = int

// PatchedZoneTemplateRequestTenant1 Adds support for custom fields and tags.
type PatchedZoneTemplateRequestTenant1 = BriefTenantRequest

// PatchedZoneTemplateRequest_Tenant defines model for PatchedZoneTemplateRequest.Tenant.
type PatchedZoneTemplateRequest_Tenant struct {
	union json.RawMessage
}

// Prefix Adds support for custom fields and tags.
type Prefix struct {
	Depth        *int                    `json:"_depth,omitempty"`
	Children     *int                    `json:"children,omitempty"`
	Comments     *string                 `json:"comments,omitempty"`
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Display      *string                 `json:"display,omitempty"`
	DisplayUrl   *string                 `json:"display_url,omitempty"`
	Family       *struct {
		Label *PrefixFamilyLabel `json:"label,omitempty"`

		// Value * `4` - IPv4
		// * `6` - IPv6
		Value *PrefixFamilyValue `json:"value,omitempty"`
	} `json:"family,omitempty"`
	Id *int `json:"id,omitempty"`

	// IsPool All IP addresses within this prefix are considered usable
	IsPool      *bool      `json:"is_pool,omitempty"`
	LastUpdated *time.Time `json:"last_updated"`

	// MarkUtilized Treat as fully utilized
	MarkUtilized *bool        `json:"mark_utilized,omitempty"`
	Prefix       string       `json:"prefix"`
	Role         *BriefRole   `json:"role"`
	Scope        *interface{} `json:"scope"`
	ScopeId      *int         `json:"scope_id"`
	ScopeType    *string      `json:"scope_type"`
	Status       *struct {
		Label *PrefixStatusLabel `json:"label,omitempty"`

		// Value * `container` - Container
		// * `active` - Active
		// * `reserved` - Reserved
		// * `deprecated` - Deprecated
		Value *PrefixStatusValue `json:"value,omitempty"`
	} `json:"status,omitempty"`
	Tags   *[]NestedTag `json:"tags,omitempty"`
	Tenant *BriefTenant `json:"tenant"`
	Url    *string      `json:"url,omitempty"`
	Vlan   *BriefVLAN   `json:"vlan"`
	Vrf    *BriefVRF    `json:"vrf"`
}

// PrefixFamilyLabel defines model for Prefix.Family.Label.
type PrefixFamilyLabel string

// PrefixFamilyValue * `4` - IPv4
// * `6` - IPv6
type PrefixFamilyValue int

// PrefixStatusLabel defines model for Prefix.Status.Label.
type PrefixStatusLabel string

// PrefixStatusValue * `container` - Container
// * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type PrefixStatusValue string

// PrefixRequest Adds support for custom fields and tags.
type PrefixRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// IsPool All IP addresses within this prefix are considered usable
	IsPool *bool `json:"is_pool,omitempty"`

	// MarkUtilized Treat as fully utilized
	MarkUtilized *bool               `json:"mark_utilized,omitempty"`
	Prefix       string              `json:"prefix"`
	Role         *PrefixRequest_Role `json:"role"`
	ScopeId      *int                `json:"scope_id"`
	ScopeType    *string             `json:"scope_type"`

	// Status * `container` - Container
	// * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	Status *PrefixRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest   `json:"tags,omitempty"`
	Tenant *PrefixRequest_Tenant `json:"tenant"`
	Vlan   *PrefixRequest_Vlan   `json:"vlan"`
	Vrf    *PrefixRequest_Vrf    `json:"vrf"`
}

// PrefixRequestRole0 defines model for .
type PrefixRequestRole0 = int

// PrefixRequestRole1 Adds support for custom fields and tags.
type PrefixRequestRole1 = BriefRoleRequest

// PrefixRequest_Role defines model for PrefixRequest.Role.
type PrefixRequest_Role struct {
	union json.RawMessage
}

// PrefixRequestStatus * `container` - Container
// * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type PrefixRequestStatus string

// PrefixRequestTenant0 defines model for .
type PrefixRequestTenant0 = int

// PrefixRequestTenant1 Adds support for custom fields and tags.
type PrefixRequestTenant1 = BriefTenantRequest

// PrefixRequest_Tenant defines model for PrefixRequest.Tenant.
type PrefixRequest_Tenant struct {
	union json.RawMessage
}

// PrefixRequestVlan0 defines model for .
type PrefixRequestVlan0 = int

// PrefixRequestVlan1 Adds support for custom fields and tags.
type PrefixRequestVlan1 = BriefVLANRequest

// PrefixRequest_Vlan defines model for PrefixRequest.Vlan.
type PrefixRequest_Vlan struct {
	union json.RawMessage
}

// PrefixRequestVrf0 defines model for .
type PrefixRequestVrf0 = int

// PrefixRequestVrf1 Adds support for custom fields and tags.
type PrefixRequestVrf1 = BriefVRFRequest

// PrefixRequest_Vrf defines model for PrefixRequest.Vrf.
type PrefixRequest_Vrf struct {
	union json.RawMessage
}

// Profile Adds support for custom fields and tags.
type Profile struct {
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Display      *string                 `json:"display,omitempty"`
	Id           *int                    `json:"id,omitempty"`
	LastUpdated  *time.Time              `json:"last_updated"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTag            `json:"tags,omitempty"`
	Text         *string                 `json:"text,omitempty"`
	Url          *string                 `json:"url,omitempty"`
}

// ProfileRequest Adds support for custom fields and tags.
type ProfileRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
	Text         *string                 `json:"text,omitempty"`
}

// Record Adds support for custom fields and tags.
type Record struct {
	AbsoluteValue *string `json:"absolute_value,omitempty"`
	Active        *bool   `json:"active,omitempty"`

	// AddressRecord Address record defining the PTR
	AddressRecord *NestedRecord           `json:"address_record"`
	Created       *time.Time              `json:"created"`
	CustomFields  *map[string]interface{} `json:"custom_fields,omitempty"`
	Description   *string                 `json:"description,omitempty"`

	// DisablePtr Disable PTR record creation
	DisablePtr *bool   `json:"disable_ptr,omitempty"`
	Display    *string `json:"display,omitempty"`
	Fqdn       *string `json:"fqdn"`
	Id         *int    `json:"id,omitempty"`

	// IpamIpAddress IPAddress linked to the record
	IpamIpAddress *BriefIPAddress `json:"ipam_ip_address"`
	LastUpdated   *time.Time      `json:"last_updated"`
	Managed       *bool           `json:"managed,omitempty"`
	Name          string          `json:"name"`

	// PtrRecord PTR record generated from an address
	PtrRecord *NestedRecord `json:"ptr_record"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *RecordStatus `json:"status,omitempty"`
	Tags   *[]NestedTag  `json:"tags,omitempty"`
	Tenant *BriefTenant  `json:"tenant"`
	Ttl    *int          `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  RecordType `json:"type"`
	Url   *string    `json:"url,omitempty"`
	Value string     `json:"value"`

	// Zone Zone the record belongs to
	Zone *NestedZone `json:"zone,omitempty"`
}

// RecordStatus * `active` - Active
// * `inactive` - Inactive
type RecordStatus string

// RecordType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type RecordType string

// RecordRequest Adds support for custom fields and tags.
type RecordRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// DisablePtr Disable PTR record creation
	DisablePtr *bool   `json:"disable_ptr,omitempty"`
	Fqdn       *string `json:"fqdn"`
	Managed    *bool   `json:"managed,omitempty"`
	Name       string  `json:"name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *RecordRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest   `json:"tags,omitempty"`
	Tenant *RecordRequest_Tenant `json:"tenant"`
	Ttl    *int                  `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  RecordRequestType `json:"type"`
	Value string            `json:"value"`

	// Zone Zone the record belongs to
	Zone *NestedZoneRequest `json:"zone,omitempty"`
}

// RecordRequestStatus * `active` - Active
// * `inactive` - Inactive
type RecordRequestStatus string

// RecordRequestTenant0 defines model for .
type RecordRequestTenant0 = int

// RecordRequestTenant1 Adds support for custom fields and tags.
type RecordRequestTenant1 = BriefTenantRequest

// RecordRequest_Tenant defines model for RecordRequest.Tenant.
type RecordRequest_Tenant struct {
	union json.RawMessage
}

// RecordRequestType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type RecordRequestType string

// RecordTemplate Adds support for custom fields and tags.
type RecordTemplate struct {
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// DisablePtr Disable PTR record creation
	DisablePtr  *bool      `json:"disable_ptr,omitempty"`
	Display     *string    `json:"display,omitempty"`
	Id          *int       `json:"id,omitempty"`
	LastUpdated *time.Time `json:"last_updated"`
	Name        string     `json:"name"`
	RecordName  string     `json:"record_name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *RecordTemplateStatus `json:"status,omitempty"`
	Tags   *[]NestedTag          `json:"tags,omitempty"`
	Tenant *BriefTenant          `json:"tenant"`
	Ttl    *int                  `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  RecordTemplateType `json:"type"`
	Url   *string            `json:"url,omitempty"`
	Value string             `json:"value"`

	// ZoneTemplates Zone templates using the record template
	ZoneTemplates *[]NestedZoneTemplate `json:"zone_templates,omitempty"`
}

// RecordTemplateStatus * `active` - Active
// * `inactive` - Inactive
type RecordTemplateStatus string

// RecordTemplateType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type RecordTemplateType string

// RecordTemplateRequest Adds support for custom fields and tags.
type RecordTemplateRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// DisablePtr Disable PTR record creation
	DisablePtr *bool  `json:"disable_ptr,omitempty"`
	Name       string `json:"name"`
	RecordName string `json:"record_name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *RecordTemplateRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest           `json:"tags,omitempty"`
	Tenant *RecordTemplateRequest_Tenant `json:"tenant"`
	Ttl    *int                          `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  RecordTemplateRequestType `json:"type"`
	Value string                    `json:"value"`
}

// RecordTemplateRequestStatus * `active` - Active
// * `inactive` - Inactive
type RecordTemplateRequestStatus string

// RecordTemplateRequestTenant0 defines model for .
type RecordTemplateRequestTenant0 = int

// RecordTemplateRequestTenant1 Adds support for custom fields and tags.
type RecordTemplateRequestTenant1 = BriefTenantRequest

// RecordTemplateRequest_Tenant defines model for RecordTemplateRequest.Tenant.
type RecordTemplateRequest_Tenant struct {
	union json.RawMessage
}

// RecordTemplateRequestType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type RecordTemplateRequestType string

// Registrar Adds support for custom fields and tags.
type Registrar struct {
	AbuseEmail   *openapi_types.Email    `json:"abuse_email,omitempty"`
	AbusePhone   *string                 `json:"abuse_phone,omitempty"`
	Address      *string                 `json:"address,omitempty"`
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Display      *string                 `json:"display,omitempty"`
	IanaId       *int                    `json:"iana_id"`
	Id           *int                    `json:"id,omitempty"`
	LastUpdated  *time.Time              `json:"last_updated"`
	Name         string                  `json:"name"`
	ReferralUrl  *string                 `json:"referral_url,omitempty"`
	Url          *string                 `json:"url,omitempty"`
	WhoisServer  *string                 `json:"whois_server,omitempty"`
}

// RegistrarRequest Adds support for custom fields and tags.
type RegistrarRequest struct {
	AbuseEmail   *openapi_types.Email    `json:"abuse_email,omitempty"`
	AbusePhone   *string                 `json:"abuse_phone,omitempty"`
	Address      *string                 `json:"address,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	IanaId       *int                    `json:"iana_id"`
	Name         string                  `json:"name"`
	ReferralUrl  *string                 `json:"referral_url,omitempty"`
	WhoisServer  *string                 `json:"whois_server,omitempty"`
}

// RegistrationContact Adds support for custom fields and tags.
type RegistrationContact struct {
	City          *string                 `json:"city,omitempty"`
	ContactId     string                  `json:"contact_id"`
	Country       *string                 `json:"country,omitempty"`
	Created       *time.Time              `json:"created"`
	CustomFields  *map[string]interface{} `json:"custom_fields,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	Display       *string                 `json:"display,omitempty"`
	Email         *openapi_types.Email    `json:"email,omitempty"`
	Fax           *string                 `json:"fax,omitempty"`
	FaxExt        *string                 `json:"fax_ext,omitempty"`
	Id            *int                    `json:"id,omitempty"`
	LastUpdated   *time.Time              `json:"last_updated"`
	Name          *string                 `json:"name,omitempty"`
	Organization  *string                 `json:"organization,omitempty"`
	Phone         *string                 `json:"phone,omitempty"`
	PhoneExt      *string                 `json:"phone_ext,omitempty"`
	PostalCode    *string                 `json:"postal_code,omitempty"`
	StateProvince *string                 `json:"state_province,omitempty"`
	Street        *string                 `json:"street,omitempty"`
	Url           *string                 `json:"url,omitempty"`
}

// RegistrationContactRequest Adds support for custom fields and tags.
type RegistrationContactRequest struct {
	City          *string                 `json:"city,omitempty"`
	ContactId     string                  `json:"contact_id"`
	Country       *string                 `json:"country,omitempty"`
	CustomFields  *map[string]interface{} `json:"custom_fields,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	Email         *openapi_types.Email    `json:"email,omitempty"`
	Fax           *string                 `json:"fax,omitempty"`
	FaxExt        *string                 `json:"fax_ext,omitempty"`
	Name          *string                 `json:"name,omitempty"`
	Organization  *string                 `json:"organization,omitempty"`
	Phone         *string                 `json:"phone,omitempty"`
	PhoneExt      *string                 `json:"phone_ext,omitempty"`
	PostalCode    *string                 `json:"postal_code,omitempty"`
	StateProvince *string                 `json:"state_province,omitempty"`
	Street        *string                 `json:"street,omitempty"`
}

// Tenant Adds support for custom fields and tags.
type Tenant struct {
	CircuitCount        *int64                  `json:"circuit_count,omitempty"`
	ClusterCount        *int64                  `json:"cluster_count,omitempty"`
	Comments            *string                 `json:"comments,omitempty"`
	Created             *time.Time              `json:"created"`
	CustomFields        *map[string]interface{} `json:"custom_fields,omitempty"`
	Description         *string                 `json:"description,omitempty"`
	DeviceCount         *int64                  `json:"device_count,omitempty"`
	Display             *string                 `json:"display,omitempty"`
	DisplayUrl          *string                 `json:"display_url,omitempty"`
	Group               *BriefTenantGroup       `json:"group"`
	Id                  *int                    `json:"id,omitempty"`
	IpaddressCount      *int64                  `json:"ipaddress_count,omitempty"`
	LastUpdated         *time.Time              `json:"last_updated"`
	Name                string                  `json:"name"`
	PrefixCount         *int64                  `json:"prefix_count,omitempty"`
	RackCount           *int64                  `json:"rack_count,omitempty"`
	SiteCount           *int64                  `json:"site_count,omitempty"`
	Slug                string                  `json:"slug"`
	Tags                *[]NestedTag            `json:"tags,omitempty"`
	Url                 *string                 `json:"url,omitempty"`
	VirtualmachineCount *int64                  `json:"virtualmachine_count,omitempty"`
	VlanCount           *int64                  `json:"vlan_count,omitempty"`
	VrfCount            *int64                  `json:"vrf_count,omitempty"`
}

// TenantRequest Adds support for custom fields and tags.
type TenantRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Group        *TenantRequest_Group    `json:"group"`
	Name         string                  `json:"name"`
	Slug         string                  `json:"slug"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
}

// TenantRequestGroup0 defines model for .
type TenantRequestGroup0 = int

// TenantRequestGroup1 Extends PrimaryModelSerializer to include MPTT support.
type TenantRequestGroup1 = BriefTenantGroupRequest

// TenantRequest_Group defines model for TenantRequest.Group.
type TenantRequest_Group struct {
	union json.RawMessage
}

// View Adds support for custom fields and tags.
type View struct {
	Created         *time.Time              `json:"created"`
	CustomFields    *map[string]interface{} `json:"custom_fields,omitempty"`
	DefaultView     *bool                   `json:"default_view,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	Display         *string                 `json:"display,omitempty"`
	Id              *int                    `json:"id,omitempty"`
	IpAddressFilter *interface{}            `json:"ip_address_filter"`
	LastUpdated     *time.Time              `json:"last_updated"`
	Name            string                  `json:"name"`

	// Prefixes IPAM Prefixes assigned to the View
	Prefixes *[]BriefPrefix `json:"prefixes,omitempty"`
	Tags     *[]NestedTag   `json:"tags,omitempty"`
	Tenant   *BriefTenant   `json:"tenant"`
	Url      *string        `json:"url,omitempty"`
}

// ViewRequest Adds support for custom fields and tags.
type ViewRequest struct {
	CustomFields    *map[string]interface{} `json:"custom_fields,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	IpAddressFilter *interface{}            `json:"ip_address_filter"`
	Name            string                  `json:"name"`

	// Prefixes IPAM Prefixes assigned to the View
	Prefixes *[]BriefPrefixRequest `json:"prefixes,omitempty"`
	Tags     *[]NestedTagRequest   `json:"tags,omitempty"`
	Tenant   *ViewRequest_Tenant   `json:"tenant"`
}

// ViewRequestTenant0 defines model for .
type ViewRequestTenant0 = int

// ViewRequestTenant1 Adds support for custom fields and tags.
type ViewRequestTenant1 = BriefTenantRequest

// ViewRequest_Tenant defines model for ViewRequest.Tenant.
type ViewRequest_Tenant struct {
	union json.RawMessage
}

// WritablePrefixRequest Adds support for custom fields and tags.
type WritablePrefixRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// IsPool All IP addresses within this prefix are considered usable
	IsPool *bool `json:"is_pool,omitempty"`

	// MarkUtilized Treat as fully utilized
	MarkUtilized *bool                       `json:"mark_utilized,omitempty"`
	Prefix       string                      `json:"prefix"`
	Role         *WritablePrefixRequest_Role `json:"role"`
	ScopeId      *int                        `json:"scope_id"`
	ScopeType    *string                     `json:"scope_type"`

	// Status Operational status of this prefix
	//
	// * `container` - Container
	// * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	Status *WritablePrefixRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest           `json:"tags,omitempty"`
	Tenant *WritablePrefixRequest_Tenant `json:"tenant"`
	Vlan   *WritablePrefixRequest_Vlan   `json:"vlan"`
	Vrf    *WritablePrefixRequest_Vrf    `json:"vrf"`
}

// WritablePrefixRequestRole0 defines model for .
type WritablePrefixRequestRole0 = int

// WritablePrefixRequestRole1 Adds support for custom fields and tags.
type WritablePrefixRequestRole1 = BriefRoleRequest

// WritablePrefixRequest_Role defines model for WritablePrefixRequest.Role.
type WritablePrefixRequest_Role struct {
	union json.RawMessage
}

// WritablePrefixRequestStatus Operational status of this prefix
//
// * `container` - Container
// * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type WritablePrefixRequestStatus string

// WritablePrefixRequestTenant0 defines model for .
type WritablePrefixRequestTenant0 = int

// WritablePrefixRequestTenant1 Adds support for custom fields and tags.
type WritablePrefixRequestTenant1 = BriefTenantRequest

// WritablePrefixRequest_Tenant defines model for WritablePrefixRequest.Tenant.
type WritablePrefixRequest_Tenant struct {
	union json.RawMessage
}

// WritablePrefixRequestVlan0 defines model for .
type WritablePrefixRequestVlan0 = int

// WritablePrefixRequestVlan1 Adds support for custom fields and tags.
type WritablePrefixRequestVlan1 = BriefVLANRequest

// WritablePrefixRequest_Vlan defines model for WritablePrefixRequest.Vlan.
type WritablePrefixRequest_Vlan struct {
	union json.RawMessage
}

// WritablePrefixRequestVrf0 defines model for .
type WritablePrefixRequestVrf0 = int

// WritablePrefixRequestVrf1 Adds support for custom fields and tags.
type WritablePrefixRequestVrf1 = BriefVRFRequest

// WritablePrefixRequest_Vrf defines model for WritablePrefixRequest.Vrf.
type WritablePrefixRequest_Vrf struct {
	union json.RawMessage
}

// WritableRecordRequest Adds support for custom fields and tags.
type WritableRecordRequest struct {
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// DisablePtr Disable PTR record creation
	DisablePtr *bool   `json:"disable_ptr,omitempty"`
	Fqdn       *string `json:"fqdn"`
	Managed    *bool   `json:"managed,omitempty"`
	Name       string  `json:"name"`

	// Status * `active` - Active
	// * `inactive` - Inactive
	Status *WritableRecordRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest           `json:"tags,omitempty"`
	Tenant *WritableRecordRequest_Tenant `json:"tenant"`
	Ttl    *int                          `json:"ttl"`

	// Type * `A` - A
	// * `A6` - A6
	// * `AAAA` - AAAA
	// * `AFSDB` - AFSDB
	// * `AMTRELAY` - AMTRELAY
	// * `APL` - APL
	// * `AVC` - AVC
	// * `CAA` - CAA
	// * `CDNSKEY` - CDNSKEY
	// * `CDS` - CDS
	// * `CERT` - CERT
	// * `CNAME` - CNAME
	// * `CSYNC` - CSYNC
	// * `DHCID` - DHCID
	// * `DLV` - DLV
	// * `DNAME` - DNAME
	// * `DNSKEY` - DNSKEY
	// * `DS` - DS
	// * `EUI48` - EUI48
	// * `EUI64` - EUI64
	// * `GPOS` - GPOS
	// * `HINFO` - HINFO
	// * `HIP` - HIP
	// * `HTTPS` - HTTPS
	// * `IPSECKEY` - IPSECKEY
	// * `ISDN` - ISDN
	// * `KEY` - KEY
	// * `KX` - KX
	// * `L32` - L32
	// * `L64` - L64
	// * `LOC` - LOC
	// * `LP` - LP
	// * `MB` - MB
	// * `MD` - MD
	// * `MF` - MF
	// * `MG` - MG
	// * `MINFO` - MINFO
	// * `MR` - MR
	// * `MX` - MX
	// * `NAPTR` - NAPTR
	// * `NID` - NID
	// * `NINFO` - NINFO
	// * `NS` - NS
	// * `NSAP` - NSAP
	// * `NSAP_PTR` - NSAP_PTR
	// * `NSEC` - NSEC
	// * `NSEC3` - NSEC3
	// * `NSEC3PARAM` - NSEC3PARAM
	// * `NULL` - NULL
	// * `NXT` - NXT
	// * `OPENPGPKEY` - OPENPGPKEY
	// * `PTR` - PTR
	// * `PX` - PX
	// * `RESINFO` - RESINFO
	// * `RP` - RP
	// * `RRSIG` - RRSIG
	// * `RT` - RT
	// * `SIG` - SIG
	// * `SMIMEA` - SMIMEA
	// * `SOA` - SOA
	// * `SPF` - SPF
	// * `SRV` - SRV
	// * `SSHFP` - SSHFP
	// * `SVCB` - SVCB
	// * `TA` - TA
	// * `TLSA` - TLSA
	// * `TXT` - TXT
	// * `TYPE0` - TYPE0
	// * `UNSPEC` - UNSPEC
	// * `URI` - URI
	// * `WALLET` - WALLET
	// * `WKS` - WKS
	// * `X25` - X25
	// * `ZONEMD` - ZONEMD
	Type  WritableRecordRequestType `json:"type"`
	Value string                    `json:"value"`
	Zone  int                       `json:"zone"`
}

// WritableRecordRequestStatus * `active` - Active
// * `inactive` - Inactive
type WritableRecordRequestStatus string

// WritableRecordRequestTenant0 defines model for .
type WritableRecordRequestTenant0 = int

// WritableRecordRequestTenant1 Adds support for custom fields and tags.
type WritableRecordRequestTenant1 = BriefTenantRequest

// WritableRecordRequest_Tenant defines model for WritableRecordRequest.Tenant.
type WritableRecordRequest_Tenant struct {
	union json.RawMessage
}

// WritableRecordRequestType * `A` - A
// * `A6` - A6
// * `AAAA` - AAAA
// * `AFSDB` - AFSDB
// * `AMTRELAY` - AMTRELAY
// * `APL` - APL
// * `AVC` - AVC
// * `CAA` - CAA
// * `CDNSKEY` - CDNSKEY
// * `CDS` - CDS
// * `CERT` - CERT
// * `CNAME` - CNAME
// * `CSYNC` - CSYNC
// * `DHCID` - DHCID
// * `DLV` - DLV
// * `DNAME` - DNAME
// * `DNSKEY` - DNSKEY
// * `DS` - DS
// * `EUI48` - EUI48
// * `EUI64` - EUI64
// * `GPOS` - GPOS
// * `HINFO` - HINFO
// * `HIP` - HIP
// * `HTTPS` - HTTPS
// * `IPSECKEY` - IPSECKEY
// * `ISDN` - ISDN
// * `KEY` - KEY
// * `KX` - KX
// * `L32` - L32
// * `L64` - L64
// * `LOC` - LOC
// * `LP` - LP
// * `MB` - MB
// * `MD` - MD
// * `MF` - MF
// * `MG` - MG
// * `MINFO` - MINFO
// * `MR` - MR
// * `MX` - MX
// * `NAPTR` - NAPTR
// * `NID` - NID
// * `NINFO` - NINFO
// * `NS` - NS
// * `NSAP` - NSAP
// * `NSAP_PTR` - NSAP_PTR
// * `NSEC` - NSEC
// * `NSEC3` - NSEC3
// * `NSEC3PARAM` - NSEC3PARAM
// * `NULL` - NULL
// * `NXT` - NXT
// * `OPENPGPKEY` - OPENPGPKEY
// * `PTR` - PTR
// * `PX` - PX
// * `RESINFO` - RESINFO
// * `RP` - RP
// * `RRSIG` - RRSIG
// * `RT` - RT
// * `SIG` - SIG
// * `SMIMEA` - SMIMEA
// * `SOA` - SOA
// * `SPF` - SPF
// * `SRV` - SRV
// * `SSHFP` - SSHFP
// * `SVCB` - SVCB
// * `TA` - TA
// * `TLSA` - TLSA
// * `TXT` - TXT
// * `TYPE0` - TYPE0
// * `UNSPEC` - UNSPEC
// * `URI` - URI
// * `WALLET` - WALLET
// * `WKS` - WKS
// * `X25` - X25
// * `ZONEMD` - ZONEMD
type WritableRecordRequestType string

// WritableZoneRequest Adds support for custom fields and tags.
type WritableZoneRequest struct {
	// AdminC Administrative contact for the domain
	AdminC *WritableZoneRequest_AdminC `json:"admin_c,omitempty"`

	// BillingC Billing contact for the domain
	BillingC     *WritableZoneRequest_BillingC `json:"billing_c,omitempty"`
	CustomFields *map[string]interface{}       `json:"custom_fields,omitempty"`
	DefaultTtl   *int32                          `json:"default_ttl"`
	Description  *string                       `json:"description,omitempty"`

	// DnssecPolicy DNSSEC policy to apply to the zone
	DnssecPolicy *WritableZoneRequest_DnssecPolicy `json:"dnssec_policy,omitempty"`

	// DomainStatus * `addPeriod` - addPeriod
	// * `autoRenewPeriod` - autoRenewPeriod
	// * `inactive` - inactive
	// * `ok` - ok
	// * `pendingCreate` - pendingCreate
	// * `pendingDelete` - pendingDelete
	// * `pendingRenew` - pendingRenew
	// * `pendingRestore` - pendingRestore
	// * `pendingTransfer` - pendingTransfer
	// * `pendingUpdate` - pendingUpdate
	// * `redemptionPeriod` - redemptionPeriod
	// * `renewPeriod` - renewPeriod
	// * `serverDeleteProhibited` - serverDeleteProhibited
	// * `serverHold` - serverHold
	// * `serverRenewProhibited` - serverRenewProhibited
	// * `serverTransferProhibited` - serverTransferProhibited
	// * `serverUpdateProhibited` - serverUpdateProhibited
	// * `transferPeriod` - transferPeriod
	// * `clientDeleteProhibited` - clientDeleteProhibited
	// * `clientHold` - clientHold
	// * `clientRenewProhibited` - clientRenewProhibited
	// * `clientTransferProhibited` - clientTransferProhibited
	// * `clientUpdateProhibited` - clientUpdateProhibited
	DomainStatus   *WritableZoneRequestDomainStatus `json:"domain_status"`
	ExpirationDate *openapi_types.Date              `json:"expiration_date"`

	// InlineSigning Use inline signing for DNSSEC
	InlineSigning *bool  `json:"inline_signing,omitempty"`
	Name          string `json:"name"`

	// Nameservers Nameservers for the zone
	Nameservers *[]BriefNameServerRequest `json:"nameservers,omitempty"`

	// Registrant Registrant of the domain
	Registrant *WritableZoneRequest_Registrant `json:"registrant,omitempty"`

	// Registrar Registrar the domain is registered with
	Registrar        *WritableZoneRequest_Registrar `json:"registrar,omitempty"`
	RegistryDomainId *string                        `json:"registry_domain_id"`

	// Rfc2317ParentManaged The parent zone for the RFC2317 zone is managed by NetBox DNS
	Rfc2317ParentManaged *bool `json:"rfc2317_parent_managed,omitempty"`

	// Rfc2317Prefix RFC2317 IPv4 prefix with a length of at least 25 bits
	Rfc2317Prefix *string `json:"rfc2317_prefix"`
	SoaExpire     *int32    `json:"soa_expire"`
	SoaMinimum    *int32    `json:"soa_minimum"`

	// SoaMname Primary nameserver for the zone
	SoaMname *int `json:"soa_mname,omitempty"`
	SoaRefresh *int32                          `json:"soa_refresh"`
	SoaRetry   *int32                          `json:"soa_retry"`

	// SoaRname Contact email for the zone
	SoaRname  *string `json:"soa_rname,omitempty"`
	SoaSerial *int32  `json:"soa_serial"`

	// SoaSerialAuto Automatically generate the SOA serial number
	SoaSerialAuto *bool `json:"soa_serial_auto,omitempty"`
	SoaTtl        *int32  `json:"soa_ttl"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	// * `parked` - Parked
	// * `dynamic` - Dynamic
	Status *WritableZoneRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest        `json:"tags,omitempty"`

	// TechC Technical contact for the domain
	TechC *WritableZoneRequest_TechC `json:"tech_c,omitempty"`

	// Template Template to apply to the zone
	Template *WritableZoneRequest_Template `json:"template,omitempty"`
	Tenant   *WritableZoneRequest_Tenant   `json:"tenant"`

	// View View the zone belongs to
	View *int `json:"view,omitempty"`
}

// WritableZoneRequestAdminC0 defines model for .
type WritableZoneRequestAdminC0 = int

// WritableZoneRequestAdminC1 Adds support for custom fields and tags.
type WritableZoneRequestAdminC1 = BriefRegistrationContactRequest

// WritableZoneRequest_AdminC Administrative contact for the domain
type WritableZoneRequest_AdminC struct {
	union json.RawMessage
}

// WritableZoneRequestBillingC0 defines model for .
type WritableZoneRequestBillingC0 = int

// WritableZoneRequestBillingC1 Adds support for custom fields and tags.
type WritableZoneRequestBillingC1 = BriefRegistrationContactRequest

// WritableZoneRequest_BillingC Billing contact for the domain
type WritableZoneRequest_BillingC struct {
	union json.RawMessage
}

// WritableZoneRequestDnssecPolicy0 defines model for .
type WritableZoneRequestDnssecPolicy0 = int

// WritableZoneRequestDnssecPolicy1 Adds support for custom fields and tags.
type WritableZoneRequestDnssecPolicy1 = BriefDNSSECPolicyRequest

// WritableZoneRequest_DnssecPolicy DNSSEC policy to apply to the zone
type WritableZoneRequest_DnssecPolicy struct {
	union json.RawMessage
}

// WritableZoneRequestDomainStatus * `addPeriod` - addPeriod
// * `autoRenewPeriod` - autoRenewPeriod
// * `inactive` - inactive
// * `ok` - ok
// * `pendingCreate` - pendingCreate
// * `pendingDelete` - pendingDelete
// * `pendingRenew` - pendingRenew
// * `pendingRestore` - pendingRestore
// * `pendingTransfer` - pendingTransfer
// * `pendingUpdate` - pendingUpdate
// * `redemptionPeriod` - redemptionPeriod
// * `renewPeriod` - renewPeriod
// * `serverDeleteProhibited` - serverDeleteProhibited
// * `serverHold` - serverHold
// * `serverRenewProhibited` - serverRenewProhibited
// * `serverTransferProhibited` - serverTransferProhibited
// * `serverUpdateProhibited` - serverUpdateProhibited
// * `transferPeriod` - transferPeriod
// * `clientDeleteProhibited` - clientDeleteProhibited
// * `clientHold` - clientHold
// * `clientRenewProhibited` - clientRenewProhibited
// * `clientTransferProhibited` - clientTransferProhibited
// * `clientUpdateProhibited` - clientUpdateProhibited
type WritableZoneRequestDomainStatus string

// WritableZoneRequestRegistrant0 defines model for .
type WritableZoneRequestRegistrant0 = int

// WritableZoneRequestRegistrant1 Adds support for custom fields and tags.
type WritableZoneRequestRegistrant1 = BriefRegistrationContactRequest

// WritableZoneRequest_Registrant Registrant of the domain
type WritableZoneRequest_Registrant struct {
	union json.RawMessage
}

// WritableZoneRequestRegistrar0 defines model for .
type WritableZoneRequestRegistrar0 = int

// WritableZoneRequestRegistrar1 Adds support for custom fields and tags.
type WritableZoneRequestRegistrar1 = BriefRegistrarRequest

// WritableZoneRequest_Registrar Registrar the domain is registered with
type WritableZoneRequest_Registrar struct {
	union json.RawMessage
}

// WritableZoneRequestSoaMname0 defines model for .
type WritableZoneRequestSoaMname0 = int

// WritableZoneRequestSoaMname1 Adds support for custom fields and tags.
type WritableZoneRequestSoaMname1 = BriefNameServerRequest

// WritableZoneRequest_SoaMname Primary nameserver for the zone
type WritableZoneRequest_SoaMname struct {
	union json.RawMessage
}

// WritableZoneRequestStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
// * `parked` - Parked
// * `dynamic` - Dynamic
type WritableZoneRequestStatus string

// WritableZoneRequestTechC0 defines model for .
type WritableZoneRequestTechC0 = int

// WritableZoneRequestTechC1 Adds support for custom fields and tags.
type WritableZoneRequestTechC1 = BriefRegistrationContactRequest

// WritableZoneRequest_TechC Technical contact for the domain
type WritableZoneRequest_TechC struct {
	union json.RawMessage
}

// WritableZoneRequestTemplate0 defines model for .
type WritableZoneRequestTemplate0 = int

// WritableZoneRequestTemplate1 Adds support for custom fields and tags.
type WritableZoneRequestTemplate1 = BriefZoneTemplateRequest

// WritableZoneRequest_Template Template to apply to the zone
type WritableZoneRequest_Template struct {
	union json.RawMessage
}

// WritableZoneRequestTenant0 defines model for .
type WritableZoneRequestTenant0 = int

// WritableZoneRequestTenant1 Adds support for custom fields and tags.
type WritableZoneRequestTenant1 = BriefTenantRequest

// WritableZoneRequest_Tenant defines model for WritableZoneRequest.Tenant.
type WritableZoneRequest_Tenant struct {
	union json.RawMessage
}

// WritableZoneRequestView0 defines model for .
type WritableZoneRequestView0 = int

// WritableZoneRequestView1 Adds support for custom fields and tags.
type WritableZoneRequestView1 = BriefViewRequest

// WritableZoneRequest_View View the zone belongs to
type WritableZoneRequest_View struct {
	union json.RawMessage
}

// Zone Adds support for custom fields and tags.
type Zone struct {
	Active *bool `json:"active"`

	// AdminC Administrative contact for the domain
	AdminC *BriefRegistrationContact `json:"admin_c,omitempty"`

	// BillingC Billing contact for the domain
	BillingC     *BriefRegistrationContact `json:"billing_c,omitempty"`
	Created      *time.Time                `json:"created"`
	CustomFields *map[string]interface{}   `json:"custom_fields,omitempty"`
	DefaultTtl   *int32                      `json:"default_ttl"`
	Description  *string                   `json:"description,omitempty"`
	Display      *string                   `json:"display,omitempty"`

	// DnssecPolicy DNSSEC policy to apply to the zone
	DnssecPolicy *BriefDNSSECPolicy `json:"dnssec_policy,omitempty"`

	// DomainStatus * `addPeriod` - addPeriod
	// * `autoRenewPeriod` - autoRenewPeriod
	// * `inactive` - inactive
	// * `ok` - ok
	// * `pendingCreate` - pendingCreate
	// * `pendingDelete` - pendingDelete
	// * `pendingRenew` - pendingRenew
	// * `pendingRestore` - pendingRestore
	// * `pendingTransfer` - pendingTransfer
	// * `pendingUpdate` - pendingUpdate
	// * `redemptionPeriod` - redemptionPeriod
	// * `renewPeriod` - renewPeriod
	// * `serverDeleteProhibited` - serverDeleteProhibited
	// * `serverHold` - serverHold
	// * `serverRenewProhibited` - serverRenewProhibited
	// * `serverTransferProhibited` - serverTransferProhibited
	// * `serverUpdateProhibited` - serverUpdateProhibited
	// * `transferPeriod` - transferPeriod
	// * `clientDeleteProhibited` - clientDeleteProhibited
	// * `clientHold` - clientHold
	// * `clientRenewProhibited` - clientRenewProhibited
	// * `clientTransferProhibited` - clientTransferProhibited
	// * `clientUpdateProhibited` - clientUpdateProhibited
	DomainStatus   *ZoneDomainStatus   `json:"domain_status"`
	ExpirationDate *openapi_types.Date `json:"expiration_date"`
	Id             *int                `json:"id,omitempty"`

	// InlineSigning Use inline signing for DNSSEC
	InlineSigning *bool      `json:"inline_signing,omitempty"`
	LastUpdated   *time.Time `json:"last_updated"`
	Name          string     `json:"name"`

	// Nameservers Nameservers for the zone
	Nameservers *[]BriefNameServer `json:"nameservers,omitempty"`

	// Registrant Registrant of the domain
	Registrant *BriefRegistrationContact `json:"registrant,omitempty"`

	// Registrar Registrar the domain is registered with
	Registrar        *BriefRegistrar `json:"registrar,omitempty"`
	RegistryDomainId *string         `json:"registry_domain_id"`

	// Rfc2317ChildZones RFC2317 child zones of the zone
	Rfc2317ChildZones *[]NestedZone `json:"rfc2317_child_zones,omitempty"`

	// Rfc2317ParentManaged The parent zone for the RFC2317 zone is managed by NetBox DNS
	Rfc2317ParentManaged *bool `json:"rfc2317_parent_managed,omitempty"`

	// Rfc2317ParentZone RFC2317 parent zone of the zone
	Rfc2317ParentZone *NestedZone `json:"rfc2317_parent_zone,omitempty"`

	// Rfc2317Prefix RFC2317 IPv4 prefix with a length of at least 25 bits
	Rfc2317Prefix *string `json:"rfc2317_prefix"`
	SoaExpire     *int32    `json:"soa_expire"`
	SoaMinimum    *int32    `json:"soa_minimum"`

	// SoaMname Primary nameserver for the zone
	SoaMname   *BriefNameServer `json:"soa_mname,omitempty"`
	SoaRefresh *int32             `json:"soa_refresh"`
	SoaRetry   *int32             `json:"soa_retry"`

	// SoaRname Contact email for the zone
	SoaRname  *string `json:"soa_rname,omitempty"`
	SoaSerial *int32  `json:"soa_serial"`

	// SoaSerialAuto Automatically generate the SOA serial number
	SoaSerialAuto *bool `json:"soa_serial_auto,omitempty"`
	SoaTtl        *int32  `json:"soa_ttl"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	// * `parked` - Parked
	// * `dynamic` - Dynamic
	Status *ZoneStatus  `json:"status,omitempty"`
	Tags   *[]NestedTag `json:"tags,omitempty"`

	// TechC Technical contact for the domain
	TechC  *BriefRegistrationContact `json:"tech_c,omitempty"`
	Tenant *BriefTenant              `json:"tenant"`
	Url    *string                   `json:"url,omitempty"`

	// View View the zone belongs to
	View *BriefView `json:"view,omitempty"`
}

// ZoneDomainStatus * `addPeriod` - addPeriod
// * `autoRenewPeriod` - autoRenewPeriod
// * `inactive` - inactive
// * `ok` - ok
// * `pendingCreate` - pendingCreate
// * `pendingDelete` - pendingDelete
// * `pendingRenew` - pendingRenew
// * `pendingRestore` - pendingRestore
// * `pendingTransfer` - pendingTransfer
// * `pendingUpdate` - pendingUpdate
// * `redemptionPeriod` - redemptionPeriod
// * `renewPeriod` - renewPeriod
// * `serverDeleteProhibited` - serverDeleteProhibited
// * `serverHold` - serverHold
// * `serverRenewProhibited` - serverRenewProhibited
// * `serverTransferProhibited` - serverTransferProhibited
// * `serverUpdateProhibited` - serverUpdateProhibited
// * `transferPeriod` - transferPeriod
// * `clientDeleteProhibited` - clientDeleteProhibited
// * `clientHold` - clientHold
// * `clientRenewProhibited` - clientRenewProhibited
// * `clientTransferProhibited` - clientTransferProhibited
// * `clientUpdateProhibited` - clientUpdateProhibited
type ZoneDomainStatus string

// ZoneStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
// * `parked` - Parked
// * `dynamic` - Dynamic
type ZoneStatus string

// ZoneRequest Adds support for custom fields and tags.
type ZoneRequest struct {
	// AdminC Administrative contact for the domain
	AdminC *ZoneRequest_AdminC `json:"admin_c,omitempty"`

	// BillingC Billing contact for the domain
	BillingC     *ZoneRequest_BillingC   `json:"billing_c,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	DefaultTtl   *int32                    `json:"default_ttl"`
	Description  *string                 `json:"description,omitempty"`

	// DnssecPolicy DNSSEC policy to apply to the zone
	DnssecPolicy *ZoneRequest_DnssecPolicy `json:"dnssec_policy,omitempty"`

	// DomainStatus * `addPeriod` - addPeriod
	// * `autoRenewPeriod` - autoRenewPeriod
	// * `inactive` - inactive
	// * `ok` - ok
	// * `pendingCreate` - pendingCreate
	// * `pendingDelete` - pendingDelete
	// * `pendingRenew` - pendingRenew
	// * `pendingRestore` - pendingRestore
	// * `pendingTransfer` - pendingTransfer
	// * `pendingUpdate` - pendingUpdate
	// * `redemptionPeriod` - redemptionPeriod
	// * `renewPeriod` - renewPeriod
	// * `serverDeleteProhibited` - serverDeleteProhibited
	// * `serverHold` - serverHold
	// * `serverRenewProhibited` - serverRenewProhibited
	// * `serverTransferProhibited` - serverTransferProhibited
	// * `serverUpdateProhibited` - serverUpdateProhibited
	// * `transferPeriod` - transferPeriod
	// * `clientDeleteProhibited` - clientDeleteProhibited
	// * `clientHold` - clientHold
	// * `clientRenewProhibited` - clientRenewProhibited
	// * `clientTransferProhibited` - clientTransferProhibited
	// * `clientUpdateProhibited` - clientUpdateProhibited
	DomainStatus   *ZoneRequestDomainStatus `json:"domain_status"`
	ExpirationDate *openapi_types.Date      `json:"expiration_date"`

	// InlineSigning Use inline signing for DNSSEC
	InlineSigning *bool  `json:"inline_signing,omitempty"`
	Name          string `json:"name"`

	// Nameservers Nameservers for the zone
	Nameservers *[]BriefNameServerRequest `json:"nameservers,omitempty"`

	// Registrant Registrant of the domain
	Registrant *ZoneRequest_Registrant `json:"registrant,omitempty"`

	// Registrar Registrar the domain is registered with
	Registrar        *ZoneRequest_Registrar `json:"registrar,omitempty"`
	RegistryDomainId *string                `json:"registry_domain_id"`

	// Rfc2317ParentManaged The parent zone for the RFC2317 zone is managed by NetBox DNS
	Rfc2317ParentManaged *bool `json:"rfc2317_parent_managed,omitempty"`

	// Rfc2317Prefix RFC2317 IPv4 prefix with a length of at least 25 bits
	Rfc2317Prefix *string `json:"rfc2317_prefix"`
	SoaExpire     *int32    `json:"soa_expire"`
	SoaMinimum    *int32    `json:"soa_minimum"`

	// SoaMname Primary nameserver for the zone
	SoaMname   *ZoneRequest_SoaMname `json:"soa_mname,omitempty"`
	SoaRefresh *int32                  `json:"soa_refresh"`
	SoaRetry   *int32                  `json:"soa_retry"`

	// SoaRname Contact email for the zone
	SoaRname  *string `json:"soa_rname,omitempty"`
	SoaSerial *int32  `json:"soa_serial"`

	// SoaSerialAuto Automatically generate the SOA serial number
	SoaSerialAuto *bool `json:"soa_serial_auto,omitempty"`
	SoaTtl        *int32  `json:"soa_ttl"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	// * `parked` - Parked
	// * `dynamic` - Dynamic
	Status *ZoneRequestStatus  `json:"status,omitempty"`
	Tags   *[]NestedTagRequest `json:"tags,omitempty"`

	// TechC Technical contact for the domain
	TechC *ZoneRequest_TechC `json:"tech_c,omitempty"`

	// Template Template to apply to the zone
	Template *ZoneRequest_Template `json:"template,omitempty"`
	Tenant   *ZoneRequest_Tenant   `json:"tenant"`

	// View View the zone belongs to
	View *ZoneRequest_View `json:"view,omitempty"`
}

// ZoneRequestAdminC0 defines model for .
type ZoneRequestAdminC0 = int

// ZoneRequestAdminC1 Adds support for custom fields and tags.
type ZoneRequestAdminC1 = BriefRegistrationContactRequest

// ZoneRequest_AdminC Administrative contact for the domain
type ZoneRequest_AdminC struct {
	union json.RawMessage
}

// ZoneRequestBillingC0 defines model for .
type ZoneRequestBillingC0 = int

// ZoneRequestBillingC1 Adds support for custom fields and tags.
type ZoneRequestBillingC1 = BriefRegistrationContactRequest

// ZoneRequest_BillingC Billing contact for the domain
type ZoneRequest_BillingC struct {
	union json.RawMessage
}

// ZoneRequestDnssecPolicy0 defines model for .
type ZoneRequestDnssecPolicy0 = int

// ZoneRequestDnssecPolicy1 Adds support for custom fields and tags.
type ZoneRequestDnssecPolicy1 = BriefDNSSECPolicyRequest

// ZoneRequest_DnssecPolicy DNSSEC policy to apply to the zone
type ZoneRequest_DnssecPolicy struct {
	union json.RawMessage
}

// ZoneRequestDomainStatus * `addPeriod` - addPeriod
// * `autoRenewPeriod` - autoRenewPeriod
// * `inactive` - inactive
// * `ok` - ok
// * `pendingCreate` - pendingCreate
// * `pendingDelete` - pendingDelete
// * `pendingRenew` - pendingRenew
// * `pendingRestore` - pendingRestore
// * `pendingTransfer` - pendingTransfer
// * `pendingUpdate` - pendingUpdate
// * `redemptionPeriod` - redemptionPeriod
// * `renewPeriod` - renewPeriod
// * `serverDeleteProhibited` - serverDeleteProhibited
// * `serverHold` - serverHold
// * `serverRenewProhibited` - serverRenewProhibited
// * `serverTransferProhibited` - serverTransferProhibited
// * `serverUpdateProhibited` - serverUpdateProhibited
// * `transferPeriod` - transferPeriod
// * `clientDeleteProhibited` - clientDeleteProhibited
// * `clientHold` - clientHold
// * `clientRenewProhibited` - clientRenewProhibited
// * `clientTransferProhibited` - clientTransferProhibited
// * `clientUpdateProhibited` - clientUpdateProhibited
type ZoneRequestDomainStatus string

// ZoneRequestRegistrant0 defines model for .
type ZoneRequestRegistrant0 = int

// ZoneRequestRegistrant1 Adds support for custom fields and tags.
type ZoneRequestRegistrant1 = BriefRegistrationContactRequest

// ZoneRequest_Registrant Registrant of the domain
type ZoneRequest_Registrant struct {
	union json.RawMessage
}

// ZoneRequestRegistrar0 defines model for .
type ZoneRequestRegistrar0 = int

// ZoneRequestRegistrar1 Adds support for custom fields and tags.
type ZoneRequestRegistrar1 = BriefRegistrarRequest

// ZoneRequest_Registrar Registrar the domain is registered with
type ZoneRequest_Registrar struct {
	union json.RawMessage
}

// ZoneRequestSoaMname0 defines model for .
type ZoneRequestSoaMname0 = int

// ZoneRequestSoaMname1 Adds support for custom fields and tags.
type ZoneRequestSoaMname1 = BriefNameServerRequest

// ZoneRequest_SoaMname Primary nameserver for the zone
type ZoneRequest_SoaMname struct {
	union json.RawMessage
}

// ZoneRequestStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
// * `parked` - Parked
// * `dynamic` - Dynamic
type ZoneRequestStatus string

// ZoneRequestTechC0 defines model for .
type ZoneRequestTechC0 = int

// ZoneRequestTechC1 Adds support for custom fields and tags.
type ZoneRequestTechC1 = BriefRegistrationContactRequest

// ZoneRequest_TechC Technical contact for the domain
type ZoneRequest_TechC struct {
	union json.RawMessage
}

// ZoneRequestTemplate0 defines model for .
type ZoneRequestTemplate0 = int

// ZoneRequestTemplate1 Adds support for custom fields and tags.
type ZoneRequestTemplate1 = BriefZoneTemplateRequest

// ZoneRequest_Template Template to apply to the zone
type ZoneRequest_Template struct {
	union json.RawMessage
}

// ZoneRequestTenant0 defines model for .
type ZoneRequestTenant0 = int

// ZoneRequestTenant1 Adds support for custom fields and tags.
type ZoneRequestTenant1 = BriefTenantRequest

// ZoneRequest_Tenant defines model for ZoneRequest.Tenant.
type ZoneRequest_Tenant struct {
	union json.RawMessage
}

// ZoneRequestView0 defines model for .
type ZoneRequestView0 = int

// ZoneRequestView1 Adds support for custom fields and tags.
type ZoneRequestView1 = BriefViewRequest

// ZoneRequest_View View the zone belongs to
type ZoneRequest_View struct {
	union json.RawMessage
}

// ZoneTemplate Adds support for custom fields and tags.
type ZoneTemplate struct {
	Active *bool `json:"active"`

	// AdminC Administrative contact for the domain
	AdminC *BriefRegistrationContact `json:"admin_c,omitempty"`

	// BillingC Billing contact for the domain
	BillingC     *BriefRegistrationContact `json:"billing_c,omitempty"`
	Created      *time.Time                `json:"created"`
	CustomFields *map[string]interface{}   `json:"custom_fields,omitempty"`
	Description  *string                   `json:"description,omitempty"`
	Display      *string                   `json:"display,omitempty"`

	// DnssecPolicy DNSSEC policy assigned to the zone template
	DnssecPolicy *BriefDNSSECPolicy `json:"dnssec_policy,omitempty"`
	Id           *int               `json:"id,omitempty"`
	LastUpdated  *time.Time         `json:"last_updated"`
	Name         string             `json:"name"`

	// Nameservers Nameservers for the zone
	Nameservers *[]BriefNameServer `json:"nameservers,omitempty"`

	// RecordTemplates Record templates assigned to the zone template
	RecordTemplates *[]NestedRecordTemplate `json:"record_templates,omitempty"`

	// Registrant Registrant of the domain
	Registrant *BriefRegistrationContact `json:"registrant,omitempty"`

	// Registrar Registrar the domain is registered with
	Registrar *BriefRegistrar `json:"registrar,omitempty"`

	// SoaMname Primary nameserver for the zone
	SoaMname *BriefNameServer `json:"soa_mname,omitempty"`
	SoaRname *string          `json:"soa_rname,omitempty"`
	Tags     *[]NestedTag     `json:"tags,omitempty"`

	// TechC Technical contact for the domain
	TechC  *BriefRegistrationContact `json:"tech_c,omitempty"`
	Tenant *BriefTenant              `json:"tenant"`
	Url    *string                   `json:"url,omitempty"`
}

// ZoneTemplateRequest Adds support for custom fields and tags.
type ZoneTemplateRequest struct {
	// AdminC Administrative contact for the domain
	AdminC *ZoneTemplateRequest_AdminC `json:"admin_c,omitempty"`

	// BillingC Billing contact for the domain
	BillingC     *ZoneTemplateRequest_BillingC `json:"billing_c,omitempty"`
	CustomFields *map[string]interface{}       `json:"custom_fields,omitempty"`
	Description  *string                       `json:"description,omitempty"`

	// DnssecPolicy DNSSEC policy assigned to the zone template
	DnssecPolicy *ZoneTemplateRequest_DnssecPolicy `json:"dnssec_policy,omitempty"`
	Name         string                            `json:"name"`

	// Nameservers Nameservers for the zone
	Nameservers *[]BriefNameServerRequest `json:"nameservers,omitempty"`

	// RecordTemplates Record templates assigned to the zone template
	RecordTemplates *[]NestedRecordTemplateRequest `json:"record_templates,omitempty"`

	// Registrant Registrant of the domain
	Registrant *ZoneTemplateRequest_Registrant `json:"registrant,omitempty"`

	// Registrar Registrar the domain is registered with
	Registrar *ZoneTemplateRequest_Registrar `json:"registrar,omitempty"`

	// SoaMname Primary nameserver for the zone
	SoaMname *ZoneTemplateRequest_SoaMname `json:"soa_mname,omitempty"`
	SoaRname *string                       `json:"soa_rname,omitempty"`
	Tags     *[]NestedTagRequest           `json:"tags,omitempty"`

	// TechC Technical contact for the domain
	TechC  *ZoneTemplateRequest_TechC  `json:"tech_c,omitempty"`
	Tenant *ZoneTemplateRequest_Tenant `json:"tenant"`
}

// ZoneTemplateRequestAdminC0 defines model for .
type ZoneTemplateRequestAdminC0 = int

// ZoneTemplateRequestAdminC1 Adds support for custom fields and tags.
type ZoneTemplateRequestAdminC1 = BriefRegistrationContactRequest

// ZoneTemplateRequest_AdminC Administrative contact for the domain
type ZoneTemplateRequest_AdminC struct {
	union json.RawMessage
}

// ZoneTemplateRequestBillingC0 defines model for .
type ZoneTemplateRequestBillingC0 = int

// ZoneTemplateRequestBillingC1 Adds support for custom fields and tags.
type ZoneTemplateRequestBillingC1 = BriefRegistrationContactRequest

// ZoneTemplateRequest_BillingC Billing contact for the domain
type ZoneTemplateRequest_BillingC struct {
	union json.RawMessage
}

// ZoneTemplateRequestDnssecPolicy0 defines model for .
type ZoneTemplateRequestDnssecPolicy0 = int

// ZoneTemplateRequestDnssecPolicy1 Adds support for custom fields and tags.
type ZoneTemplateRequestDnssecPolicy1 = BriefDNSSECPolicyRequest

// ZoneTemplateRequest_DnssecPolicy DNSSEC policy assigned to the zone template
type ZoneTemplateRequest_DnssecPolicy struct {
	union json.RawMessage
}

// ZoneTemplateRequestRegistrant0 defines model for .
type ZoneTemplateRequestRegistrant0 = int

// ZoneTemplateRequestRegistrant1 Adds support for custom fields and tags.
type ZoneTemplateRequestRegistrant1 = BriefRegistrationContactRequest

// ZoneTemplateRequest_Registrant Registrant of the domain
type ZoneTemplateRequest_Registrant struct {
	union json.RawMessage
}

// ZoneTemplateRequestRegistrar0 defines model for .
type ZoneTemplateRequestRegistrar0 = int

// ZoneTemplateRequestRegistrar1 Adds support for custom fields and tags.
type ZoneTemplateRequestRegistrar1 = BriefRegistrarRequest

// ZoneTemplateRequest_Registrar Registrar the domain is registered with
type ZoneTemplateRequest_Registrar struct {
	union json.RawMessage
}

// ZoneTemplateRequestSoaMname0 defines model for .
type ZoneTemplateRequestSoaMname0 = int

// ZoneTemplateRequestSoaMname1 Adds support for custom fields and tags.
type ZoneTemplateRequestSoaMname1 = BriefNameServerRequest

// ZoneTemplateRequest_SoaMname Primary nameserver for the zone
type ZoneTemplateRequest_SoaMname struct {
	union json.RawMessage
}

// ZoneTemplateRequestTechC0 defines model for .
type ZoneTemplateRequestTechC0 = int

// ZoneTemplateRequestTechC1 Adds support for custom fields and tags.
type ZoneTemplateRequestTechC1 = BriefRegistrationContactRequest

// ZoneTemplateRequest_TechC Technical contact for the domain
type ZoneTemplateRequest_TechC struct {
	union json.RawMessage
}

// ZoneTemplateRequestTenant0 defines model for .
type ZoneTemplateRequestTenant0 = int

// ZoneTemplateRequestTenant1 Adds support for custom fields and tags.
type ZoneTemplateRequestTenant1 = BriefTenantRequest

// ZoneTemplateRequest_Tenant defines model for ZoneTemplateRequest.Tenant.
type ZoneTemplateRequest_Tenant struct {
	union json.RawMessage
}

// PluginsNetboxDnsContactsBulkDestroyJSONBody defines parameters for PluginsNetboxDnsContactsBulkDestroy.
type PluginsNetboxDnsContactsBulkDestroyJSONBody = []RegistrationContactRequest

// PluginsNetboxDnsContactsBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsContactsBulkDestroy.
type PluginsNetboxDnsContactsBulkDestroyMultipartBody = []RegistrationContactRequest

// PluginsNetboxDnsContactsListParams defines parameters for PluginsNetboxDnsContactsList.
type PluginsNetboxDnsContactsListParams struct {
	City             *[]string           `form:"city,omitempty" json:"city,omitempty"`
	CityEmpty        *bool               `form:"city__empty,omitempty" json:"city__empty,omitempty"`
	CityIc           *[]string           `form:"city__ic,omitempty" json:"city__ic,omitempty"`
	CityIe           *[]string           `form:"city__ie,omitempty" json:"city__ie,omitempty"`
	CityIew          *[]string           `form:"city__iew,omitempty" json:"city__iew,omitempty"`
	CityIsw          *[]string           `form:"city__isw,omitempty" json:"city__isw,omitempty"`
	CityN            *[]string           `form:"city__n,omitempty" json:"city__n,omitempty"`
	CityNic          *[]string           `form:"city__nic,omitempty" json:"city__nic,omitempty"`
	CityNie          *[]string           `form:"city__nie,omitempty" json:"city__nie,omitempty"`
	CityNiew         *[]string           `form:"city__niew,omitempty" json:"city__niew,omitempty"`
	CityNisw         *[]string           `form:"city__nisw,omitempty" json:"city__nisw,omitempty"`
	ContactId        *[]string           `form:"contact_id,omitempty" json:"contact_id,omitempty"`
	ContactIdEmpty   *bool               `form:"contact_id__empty,omitempty" json:"contact_id__empty,omitempty"`
	ContactIdIc      *[]string           `form:"contact_id__ic,omitempty" json:"contact_id__ic,omitempty"`
	ContactIdIe      *[]string           `form:"contact_id__ie,omitempty" json:"contact_id__ie,omitempty"`
	ContactIdIew     *[]string           `form:"contact_id__iew,omitempty" json:"contact_id__iew,omitempty"`
	ContactIdIsw     *[]string           `form:"contact_id__isw,omitempty" json:"contact_id__isw,omitempty"`
	ContactIdN       *[]string           `form:"contact_id__n,omitempty" json:"contact_id__n,omitempty"`
	ContactIdNic     *[]string           `form:"contact_id__nic,omitempty" json:"contact_id__nic,omitempty"`
	ContactIdNie     *[]string           `form:"contact_id__nie,omitempty" json:"contact_id__nie,omitempty"`
	ContactIdNiew    *[]string           `form:"contact_id__niew,omitempty" json:"contact_id__niew,omitempty"`
	ContactIdNisw    *[]string           `form:"contact_id__nisw,omitempty" json:"contact_id__nisw,omitempty"`
	Country          *[]string           `form:"country,omitempty" json:"country,omitempty"`
	CountryEmpty     *bool               `form:"country__empty,omitempty" json:"country__empty,omitempty"`
	CountryIc        *[]string           `form:"country__ic,omitempty" json:"country__ic,omitempty"`
	CountryIe        *[]string           `form:"country__ie,omitempty" json:"country__ie,omitempty"`
	CountryIew       *[]string           `form:"country__iew,omitempty" json:"country__iew,omitempty"`
	CountryIsw       *[]string           `form:"country__isw,omitempty" json:"country__isw,omitempty"`
	CountryN         *[]string           `form:"country__n,omitempty" json:"country__n,omitempty"`
	CountryNic       *[]string           `form:"country__nic,omitempty" json:"country__nic,omitempty"`
	CountryNie       *[]string           `form:"country__nie,omitempty" json:"country__nie,omitempty"`
	CountryNiew      *[]string           `form:"country__niew,omitempty" json:"country__niew,omitempty"`
	CountryNisw      *[]string           `form:"country__nisw,omitempty" json:"country__nisw,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Email            *[]string           `form:"email,omitempty" json:"email,omitempty"`
	EmailEmpty       *bool               `form:"email__empty,omitempty" json:"email__empty,omitempty"`
	EmailIc          *[]string           `form:"email__ic,omitempty" json:"email__ic,omitempty"`
	EmailIe          *[]string           `form:"email__ie,omitempty" json:"email__ie,omitempty"`
	EmailIew         *[]string           `form:"email__iew,omitempty" json:"email__iew,omitempty"`
	EmailIsw         *[]string           `form:"email__isw,omitempty" json:"email__isw,omitempty"`
	EmailN           *[]string           `form:"email__n,omitempty" json:"email__n,omitempty"`
	EmailNic         *[]string           `form:"email__nic,omitempty" json:"email__nic,omitempty"`
	EmailNie         *[]string           `form:"email__nie,omitempty" json:"email__nie,omitempty"`
	EmailNiew        *[]string           `form:"email__niew,omitempty" json:"email__niew,omitempty"`
	EmailNisw        *[]string           `form:"email__nisw,omitempty" json:"email__nisw,omitempty"`
	Fax              *[]string           `form:"fax,omitempty" json:"fax,omitempty"`
	FaxEmpty         *bool               `form:"fax__empty,omitempty" json:"fax__empty,omitempty"`
	FaxIc            *[]string           `form:"fax__ic,omitempty" json:"fax__ic,omitempty"`
	FaxIe            *[]string           `form:"fax__ie,omitempty" json:"fax__ie,omitempty"`
	FaxIew           *[]string           `form:"fax__iew,omitempty" json:"fax__iew,omitempty"`
	FaxIsw           *[]string           `form:"fax__isw,omitempty" json:"fax__isw,omitempty"`
	FaxN             *[]string           `form:"fax__n,omitempty" json:"fax__n,omitempty"`
	FaxNic           *[]string           `form:"fax__nic,omitempty" json:"fax__nic,omitempty"`
	FaxNie           *[]string           `form:"fax__nie,omitempty" json:"fax__nie,omitempty"`
	FaxNiew          *[]string           `form:"fax__niew,omitempty" json:"fax__niew,omitempty"`
	FaxNisw          *[]string           `form:"fax__nisw,omitempty" json:"fax__nisw,omitempty"`
	FaxExt           *[]string           `form:"fax_ext,omitempty" json:"fax_ext,omitempty"`
	FaxExtEmpty      *bool               `form:"fax_ext__empty,omitempty" json:"fax_ext__empty,omitempty"`
	FaxExtIc         *[]string           `form:"fax_ext__ic,omitempty" json:"fax_ext__ic,omitempty"`
	FaxExtIe         *[]string           `form:"fax_ext__ie,omitempty" json:"fax_ext__ie,omitempty"`
	FaxExtIew        *[]string           `form:"fax_ext__iew,omitempty" json:"fax_ext__iew,omitempty"`
	FaxExtIsw        *[]string           `form:"fax_ext__isw,omitempty" json:"fax_ext__isw,omitempty"`
	FaxExtN          *[]string           `form:"fax_ext__n,omitempty" json:"fax_ext__n,omitempty"`
	FaxExtNic        *[]string           `form:"fax_ext__nic,omitempty" json:"fax_ext__nic,omitempty"`
	FaxExtNie        *[]string           `form:"fax_ext__nie,omitempty" json:"fax_ext__nie,omitempty"`
	FaxExtNiew       *[]string           `form:"fax_ext__niew,omitempty" json:"fax_ext__niew,omitempty"`
	FaxExtNisw       *[]string           `form:"fax_ext__nisw,omitempty" json:"fax_ext__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering          *string   `form:"ordering,omitempty" json:"ordering,omitempty"`
	Organization      *[]string `form:"organization,omitempty" json:"organization,omitempty"`
	OrganizationEmpty *bool     `form:"organization__empty,omitempty" json:"organization__empty,omitempty"`
	OrganizationIc    *[]string `form:"organization__ic,omitempty" json:"organization__ic,omitempty"`
	OrganizationIe    *[]string `form:"organization__ie,omitempty" json:"organization__ie,omitempty"`
	OrganizationIew   *[]string `form:"organization__iew,omitempty" json:"organization__iew,omitempty"`
	OrganizationIsw   *[]string `form:"organization__isw,omitempty" json:"organization__isw,omitempty"`
	OrganizationN     *[]string `form:"organization__n,omitempty" json:"organization__n,omitempty"`
	OrganizationNic   *[]string `form:"organization__nic,omitempty" json:"organization__nic,omitempty"`
	OrganizationNie   *[]string `form:"organization__nie,omitempty" json:"organization__nie,omitempty"`
	OrganizationNiew  *[]string `form:"organization__niew,omitempty" json:"organization__niew,omitempty"`
	OrganizationNisw  *[]string `form:"organization__nisw,omitempty" json:"organization__nisw,omitempty"`
	Phone             *[]string `form:"phone,omitempty" json:"phone,omitempty"`
	PhoneEmpty        *bool     `form:"phone__empty,omitempty" json:"phone__empty,omitempty"`
	PhoneIc           *[]string `form:"phone__ic,omitempty" json:"phone__ic,omitempty"`
	PhoneIe           *[]string `form:"phone__ie,omitempty" json:"phone__ie,omitempty"`
	PhoneIew          *[]string `form:"phone__iew,omitempty" json:"phone__iew,omitempty"`
	PhoneIsw          *[]string `form:"phone__isw,omitempty" json:"phone__isw,omitempty"`
	PhoneN            *[]string `form:"phone__n,omitempty" json:"phone__n,omitempty"`
	PhoneNic          *[]string `form:"phone__nic,omitempty" json:"phone__nic,omitempty"`
	PhoneNie          *[]string `form:"phone__nie,omitempty" json:"phone__nie,omitempty"`
	PhoneNiew         *[]string `form:"phone__niew,omitempty" json:"phone__niew,omitempty"`
	PhoneNisw         *[]string `form:"phone__nisw,omitempty" json:"phone__nisw,omitempty"`
	PhoneExt          *[]string `form:"phone_ext,omitempty" json:"phone_ext,omitempty"`
	PhoneExtEmpty     *bool     `form:"phone_ext__empty,omitempty" json:"phone_ext__empty,omitempty"`
	PhoneExtIc        *[]string `form:"phone_ext__ic,omitempty" json:"phone_ext__ic,omitempty"`
	PhoneExtIe        *[]string `form:"phone_ext__ie,omitempty" json:"phone_ext__ie,omitempty"`
	PhoneExtIew       *[]string `form:"phone_ext__iew,omitempty" json:"phone_ext__iew,omitempty"`
	PhoneExtIsw       *[]string `form:"phone_ext__isw,omitempty" json:"phone_ext__isw,omitempty"`
	PhoneExtN         *[]string `form:"phone_ext__n,omitempty" json:"phone_ext__n,omitempty"`
	PhoneExtNic       *[]string `form:"phone_ext__nic,omitempty" json:"phone_ext__nic,omitempty"`
	PhoneExtNie       *[]string `form:"phone_ext__nie,omitempty" json:"phone_ext__nie,omitempty"`
	PhoneExtNiew      *[]string `form:"phone_ext__niew,omitempty" json:"phone_ext__niew,omitempty"`
	PhoneExtNisw      *[]string `form:"phone_ext__nisw,omitempty" json:"phone_ext__nisw,omitempty"`
	PostalCode        *[]string `form:"postal_code,omitempty" json:"postal_code,omitempty"`
	PostalCodeEmpty   *bool     `form:"postal_code__empty,omitempty" json:"postal_code__empty,omitempty"`
	PostalCodeIc      *[]string `form:"postal_code__ic,omitempty" json:"postal_code__ic,omitempty"`
	PostalCodeIe      *[]string `form:"postal_code__ie,omitempty" json:"postal_code__ie,omitempty"`
	PostalCodeIew     *[]string `form:"postal_code__iew,omitempty" json:"postal_code__iew,omitempty"`
	PostalCodeIsw     *[]string `form:"postal_code__isw,omitempty" json:"postal_code__isw,omitempty"`
	PostalCodeN       *[]string `form:"postal_code__n,omitempty" json:"postal_code__n,omitempty"`
	PostalCodeNic     *[]string `form:"postal_code__nic,omitempty" json:"postal_code__nic,omitempty"`
	PostalCodeNie     *[]string `form:"postal_code__nie,omitempty" json:"postal_code__nie,omitempty"`
	PostalCodeNiew    *[]string `form:"postal_code__niew,omitempty" json:"postal_code__niew,omitempty"`
	PostalCodeNisw    *[]string `form:"postal_code__nisw,omitempty" json:"postal_code__nisw,omitempty"`

	// Q Search
	Q                  *string             `form:"q,omitempty" json:"q,omitempty"`
	StateProvince      *[]string           `form:"state_province,omitempty" json:"state_province,omitempty"`
	StateProvinceEmpty *bool               `form:"state_province__empty,omitempty" json:"state_province__empty,omitempty"`
	StateProvinceIc    *[]string           `form:"state_province__ic,omitempty" json:"state_province__ic,omitempty"`
	StateProvinceIe    *[]string           `form:"state_province__ie,omitempty" json:"state_province__ie,omitempty"`
	StateProvinceIew   *[]string           `form:"state_province__iew,omitempty" json:"state_province__iew,omitempty"`
	StateProvinceIsw   *[]string           `form:"state_province__isw,omitempty" json:"state_province__isw,omitempty"`
	StateProvinceN     *[]string           `form:"state_province__n,omitempty" json:"state_province__n,omitempty"`
	StateProvinceNic   *[]string           `form:"state_province__nic,omitempty" json:"state_province__nic,omitempty"`
	StateProvinceNie   *[]string           `form:"state_province__nie,omitempty" json:"state_province__nie,omitempty"`
	StateProvinceNiew  *[]string           `form:"state_province__niew,omitempty" json:"state_province__niew,omitempty"`
	StateProvinceNisw  *[]string           `form:"state_province__nisw,omitempty" json:"state_province__nisw,omitempty"`
	Street             *[]string           `form:"street,omitempty" json:"street,omitempty"`
	StreetEmpty        *bool               `form:"street__empty,omitempty" json:"street__empty,omitempty"`
	StreetIc           *[]string           `form:"street__ic,omitempty" json:"street__ic,omitempty"`
	StreetIe           *[]string           `form:"street__ie,omitempty" json:"street__ie,omitempty"`
	StreetIew          *[]string           `form:"street__iew,omitempty" json:"street__iew,omitempty"`
	StreetIsw          *[]string           `form:"street__isw,omitempty" json:"street__isw,omitempty"`
	StreetN            *[]string           `form:"street__n,omitempty" json:"street__n,omitempty"`
	StreetNic          *[]string           `form:"street__nic,omitempty" json:"street__nic,omitempty"`
	StreetNie          *[]string           `form:"street__nie,omitempty" json:"street__nie,omitempty"`
	StreetNiew         *[]string           `form:"street__niew,omitempty" json:"street__niew,omitempty"`
	StreetNisw         *[]string           `form:"street__nisw,omitempty" json:"street__nisw,omitempty"`
	Tag                *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN               *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest   *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsNetboxDnsContactsBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsContactsBulkPartialUpdate.
type PluginsNetboxDnsContactsBulkPartialUpdateJSONBody = []RegistrationContactRequest

// PluginsNetboxDnsContactsBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsContactsBulkPartialUpdate.
type PluginsNetboxDnsContactsBulkPartialUpdateMultipartBody = []RegistrationContactRequest

// PluginsNetboxDnsContactsBulkUpdateJSONBody defines parameters for PluginsNetboxDnsContactsBulkUpdate.
type PluginsNetboxDnsContactsBulkUpdateJSONBody = []RegistrationContactRequest

// PluginsNetboxDnsContactsBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsContactsBulkUpdate.
type PluginsNetboxDnsContactsBulkUpdateMultipartBody = []RegistrationContactRequest

// PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONBody defines parameters for PluginsNetboxDnsDnsseckeytemplatesBulkDestroy.
type PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONBody = []DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsDnsseckeytemplatesBulkDestroy.
type PluginsNetboxDnsDnsseckeytemplatesBulkDestroyMultipartBody = []DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesListParams defines parameters for PluginsNetboxDnsDnsseckeytemplatesList.
type PluginsNetboxDnsDnsseckeytemplatesListParams struct {
	Algorithm        *[]string           `form:"algorithm,omitempty" json:"algorithm,omitempty"`
	AlgorithmEmpty   *bool               `form:"algorithm__empty,omitempty" json:"algorithm__empty,omitempty"`
	AlgorithmIc      *[]string           `form:"algorithm__ic,omitempty" json:"algorithm__ic,omitempty"`
	AlgorithmIe      *[]string           `form:"algorithm__ie,omitempty" json:"algorithm__ie,omitempty"`
	AlgorithmIew     *[]string           `form:"algorithm__iew,omitempty" json:"algorithm__iew,omitempty"`
	AlgorithmIsw     *[]string           `form:"algorithm__isw,omitempty" json:"algorithm__isw,omitempty"`
	AlgorithmN       *[]string           `form:"algorithm__n,omitempty" json:"algorithm__n,omitempty"`
	AlgorithmNic     *[]string           `form:"algorithm__nic,omitempty" json:"algorithm__nic,omitempty"`
	AlgorithmNie     *[]string           `form:"algorithm__nie,omitempty" json:"algorithm__nie,omitempty"`
	AlgorithmNiew    *[]string           `form:"algorithm__niew,omitempty" json:"algorithm__niew,omitempty"`
	AlgorithmNisw    *[]string           `form:"algorithm__nisw,omitempty" json:"algorithm__nisw,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	KeySize          *[]int              `form:"key_size,omitempty" json:"key_size,omitempty"`
	KeySizeIc        *[]int              `form:"key_size__ic,omitempty" json:"key_size__ic,omitempty"`
	KeySizeIe        *[]int              `form:"key_size__ie,omitempty" json:"key_size__ie,omitempty"`
	KeySizeIew       *[]int              `form:"key_size__iew,omitempty" json:"key_size__iew,omitempty"`
	KeySizeIsw       *[]int              `form:"key_size__isw,omitempty" json:"key_size__isw,omitempty"`
	KeySizeN         *[]int              `form:"key_size__n,omitempty" json:"key_size__n,omitempty"`
	KeySizeNic       *[]int              `form:"key_size__nic,omitempty" json:"key_size__nic,omitempty"`
	KeySizeNie       *[]int              `form:"key_size__nie,omitempty" json:"key_size__nie,omitempty"`
	KeySizeNiew      *[]int              `form:"key_size__niew,omitempty" json:"key_size__niew,omitempty"`
	KeySizeNisw      *[]int              `form:"key_size__nisw,omitempty" json:"key_size__nisw,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`
	Lifetime         *[]int32            `form:"lifetime,omitempty" json:"lifetime,omitempty"`
	LifetimeEmpty    *bool               `form:"lifetime__empty,omitempty" json:"lifetime__empty,omitempty"`
	LifetimeGt       *[]int32            `form:"lifetime__gt,omitempty" json:"lifetime__gt,omitempty"`
	LifetimeGte      *[]int32            `form:"lifetime__gte,omitempty" json:"lifetime__gte,omitempty"`
	LifetimeLt       *[]int32            `form:"lifetime__lt,omitempty" json:"lifetime__lt,omitempty"`
	LifetimeLte      *[]int32            `form:"lifetime__lte,omitempty" json:"lifetime__lte,omitempty"`
	LifetimeN        *[]int32            `form:"lifetime__n,omitempty" json:"lifetime__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Policy DNSSEC Policies
	Policy *[]string `form:"policy,omitempty" json:"policy,omitempty"`

	// PolicyN DNSSEC Policies
	PolicyN *[]string `form:"policy__n,omitempty" json:"policy__n,omitempty"`

	// PolicyId DNSSEC Policy IDs
	PolicyId *[]int `form:"policy_id,omitempty" json:"policy_id,omitempty"`

	// PolicyIdN DNSSEC Policy IDs
	PolicyIdN *[]int `form:"policy_id__n,omitempty" json:"policy_id__n,omitempty"`

	// Q Search
	Q    *string   `form:"q,omitempty" json:"q,omitempty"`
	Tag  *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	Type             *[]string           `form:"type,omitempty" json:"type,omitempty"`
	TypeEmpty        *bool               `form:"type__empty,omitempty" json:"type__empty,omitempty"`
	TypeIc           *[]string           `form:"type__ic,omitempty" json:"type__ic,omitempty"`
	TypeIe           *[]string           `form:"type__ie,omitempty" json:"type__ie,omitempty"`
	TypeIew          *[]string           `form:"type__iew,omitempty" json:"type__iew,omitempty"`
	TypeIsw          *[]string           `form:"type__isw,omitempty" json:"type__isw,omitempty"`
	TypeN            *[]string           `form:"type__n,omitempty" json:"type__n,omitempty"`
	TypeNic          *[]string           `form:"type__nic,omitempty" json:"type__nic,omitempty"`
	TypeNie          *[]string           `form:"type__nie,omitempty" json:"type__nie,omitempty"`
	TypeNiew         *[]string           `form:"type__niew,omitempty" json:"type__niew,omitempty"`
	TypeNisw         *[]string           `form:"type__nisw,omitempty" json:"type__nisw,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate.
type PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONBody = []DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate.
type PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateMultipartBody = []DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONBody defines parameters for PluginsNetboxDnsDnsseckeytemplatesBulkUpdate.
type PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONBody = []DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsDnsseckeytemplatesBulkUpdate.
type PluginsNetboxDnsDnsseckeytemplatesBulkUpdateMultipartBody = []DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONBody defines parameters for PluginsNetboxDnsDnssecpoliciesBulkDestroy.
type PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONBody = []DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsDnssecpoliciesBulkDestroy.
type PluginsNetboxDnsDnssecpoliciesBulkDestroyMultipartBody = []DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesListParams defines parameters for PluginsNetboxDnsDnssecpoliciesList.
type PluginsNetboxDnsDnssecpoliciesListParams struct {
	CdsDigestTypes   *[]string           `form:"cds_digest_types,omitempty" json:"cds_digest_types,omitempty"`
	CreateCdnskey    *bool               `form:"create_cdnskey,omitempty" json:"create_cdnskey,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	DnskeyTtl        *[]int32            `form:"dnskey_ttl,omitempty" json:"dnskey_ttl,omitempty"`
	DnskeyTtlEmpty   *bool               `form:"dnskey_ttl__empty,omitempty" json:"dnskey_ttl__empty,omitempty"`
	DnskeyTtlGt      *[]int32            `form:"dnskey_ttl__gt,omitempty" json:"dnskey_ttl__gt,omitempty"`
	DnskeyTtlGte     *[]int32            `form:"dnskey_ttl__gte,omitempty" json:"dnskey_ttl__gte,omitempty"`
	DnskeyTtlLt      *[]int32            `form:"dnskey_ttl__lt,omitempty" json:"dnskey_ttl__lt,omitempty"`
	DnskeyTtlLte     *[]int32            `form:"dnskey_ttl__lte,omitempty" json:"dnskey_ttl__lte,omitempty"`
	DnskeyTtlN       *[]int32            `form:"dnskey_ttl__n,omitempty" json:"dnskey_ttl__n,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`

	// KeyTemplate DNSSEC Key Templates
	KeyTemplate *[]string `form:"key_template,omitempty" json:"key_template,omitempty"`

	// KeyTemplateN DNSSEC Key Templates
	KeyTemplateN *[]string `form:"key_template__n,omitempty" json:"key_template__n,omitempty"`

	// KeyTemplateId DNSSEC Key Template IDs
	KeyTemplateId *[]int `form:"key_template_id,omitempty" json:"key_template_id,omitempty"`

	// KeyTemplateIdN DNSSEC Key Template IDs
	KeyTemplateIdN   *[]int       `form:"key_template_id__n,omitempty" json:"key_template_id__n,omitempty"`
	LastUpdated      *[]time.Time `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit                *int                `form:"limit,omitempty" json:"limit,omitempty"`
	MaxZoneTtl           *[]int32            `form:"max_zone_ttl,omitempty" json:"max_zone_ttl,omitempty"`
	MaxZoneTtlEmpty      *bool               `form:"max_zone_ttl__empty,omitempty" json:"max_zone_ttl__empty,omitempty"`
	MaxZoneTtlGt         *[]int32            `form:"max_zone_ttl__gt,omitempty" json:"max_zone_ttl__gt,omitempty"`
	MaxZoneTtlGte        *[]int32            `form:"max_zone_ttl__gte,omitempty" json:"max_zone_ttl__gte,omitempty"`
	MaxZoneTtlLt         *[]int32            `form:"max_zone_ttl__lt,omitempty" json:"max_zone_ttl__lt,omitempty"`
	MaxZoneTtlLte        *[]int32            `form:"max_zone_ttl__lte,omitempty" json:"max_zone_ttl__lte,omitempty"`
	MaxZoneTtlN          *[]int32            `form:"max_zone_ttl__n,omitempty" json:"max_zone_ttl__n,omitempty"`
	ModifiedByRequest    *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name                 *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty            *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc               *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe               *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew              *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw              *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN                *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic              *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie              *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew             *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw             *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`
	Nsec3Iterations      *[]int32            `form:"nsec3_iterations,omitempty" json:"nsec3_iterations,omitempty"`
	Nsec3IterationsEmpty *bool               `form:"nsec3_iterations__empty,omitempty" json:"nsec3_iterations__empty,omitempty"`
	Nsec3IterationsGt    *[]int32            `form:"nsec3_iterations__gt,omitempty" json:"nsec3_iterations__gt,omitempty"`
	Nsec3IterationsGte   *[]int32            `form:"nsec3_iterations__gte,omitempty" json:"nsec3_iterations__gte,omitempty"`
	Nsec3IterationsLt    *[]int32            `form:"nsec3_iterations__lt,omitempty" json:"nsec3_iterations__lt,omitempty"`
	Nsec3IterationsLte   *[]int32            `form:"nsec3_iterations__lte,omitempty" json:"nsec3_iterations__lte,omitempty"`
	Nsec3IterationsN     *[]int32            `form:"nsec3_iterations__n,omitempty" json:"nsec3_iterations__n,omitempty"`
	Nsec3OptOut          *bool               `form:"nsec3_opt_out,omitempty" json:"nsec3_opt_out,omitempty"`
	Nsec3SaltSize        *[]int32            `form:"nsec3_salt_size,omitempty" json:"nsec3_salt_size,omitempty"`
	Nsec3SaltSizeEmpty   *bool               `form:"nsec3_salt_size__empty,omitempty" json:"nsec3_salt_size__empty,omitempty"`
	Nsec3SaltSizeGt      *[]int32            `form:"nsec3_salt_size__gt,omitempty" json:"nsec3_salt_size__gt,omitempty"`
	Nsec3SaltSizeGte     *[]int32            `form:"nsec3_salt_size__gte,omitempty" json:"nsec3_salt_size__gte,omitempty"`
	Nsec3SaltSizeLt      *[]int32            `form:"nsec3_salt_size__lt,omitempty" json:"nsec3_salt_size__lt,omitempty"`
	Nsec3SaltSizeLte     *[]int32            `form:"nsec3_salt_size__lte,omitempty" json:"nsec3_salt_size__lte,omitempty"`
	Nsec3SaltSizeN       *[]int32            `form:"nsec3_salt_size__n,omitempty" json:"nsec3_salt_size__n,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering                    *string  `form:"ordering,omitempty" json:"ordering,omitempty"`
	ParentDsTtl                 *[]int32 `form:"parent_ds_ttl,omitempty" json:"parent_ds_ttl,omitempty"`
	ParentDsTtlEmpty            *bool    `form:"parent_ds_ttl__empty,omitempty" json:"parent_ds_ttl__empty,omitempty"`
	ParentDsTtlGt               *[]int32 `form:"parent_ds_ttl__gt,omitempty" json:"parent_ds_ttl__gt,omitempty"`
	ParentDsTtlGte              *[]int32 `form:"parent_ds_ttl__gte,omitempty" json:"parent_ds_ttl__gte,omitempty"`
	ParentDsTtlLt               *[]int32 `form:"parent_ds_ttl__lt,omitempty" json:"parent_ds_ttl__lt,omitempty"`
	ParentDsTtlLte              *[]int32 `form:"parent_ds_ttl__lte,omitempty" json:"parent_ds_ttl__lte,omitempty"`
	ParentDsTtlN                *[]int32 `form:"parent_ds_ttl__n,omitempty" json:"parent_ds_ttl__n,omitempty"`
	ParentPropagationDelay      *[]int32 `form:"parent_propagation_delay,omitempty" json:"parent_propagation_delay,omitempty"`
	ParentPropagationDelayEmpty *bool    `form:"parent_propagation_delay__empty,omitempty" json:"parent_propagation_delay__empty,omitempty"`
	ParentPropagationDelayGt    *[]int32 `form:"parent_propagation_delay__gt,omitempty" json:"parent_propagation_delay__gt,omitempty"`
	ParentPropagationDelayGte   *[]int32 `form:"parent_propagation_delay__gte,omitempty" json:"parent_propagation_delay__gte,omitempty"`
	ParentPropagationDelayLt    *[]int32 `form:"parent_propagation_delay__lt,omitempty" json:"parent_propagation_delay__lt,omitempty"`
	ParentPropagationDelayLte   *[]int32 `form:"parent_propagation_delay__lte,omitempty" json:"parent_propagation_delay__lte,omitempty"`
	ParentPropagationDelayN     *[]int32 `form:"parent_propagation_delay__n,omitempty" json:"parent_propagation_delay__n,omitempty"`
	PublishSafety               *[]int32 `form:"publish_safety,omitempty" json:"publish_safety,omitempty"`
	PublishSafetyEmpty          *bool    `form:"publish_safety__empty,omitempty" json:"publish_safety__empty,omitempty"`
	PublishSafetyGt             *[]int32 `form:"publish_safety__gt,omitempty" json:"publish_safety__gt,omitempty"`
	PublishSafetyGte            *[]int32 `form:"publish_safety__gte,omitempty" json:"publish_safety__gte,omitempty"`
	PublishSafetyLt             *[]int32 `form:"publish_safety__lt,omitempty" json:"publish_safety__lt,omitempty"`
	PublishSafetyLte            *[]int32 `form:"publish_safety__lte,omitempty" json:"publish_safety__lte,omitempty"`
	PublishSafetyN              *[]int32 `form:"publish_safety__n,omitempty" json:"publish_safety__n,omitempty"`
	PurgeKeys                   *[]int32 `form:"purge_keys,omitempty" json:"purge_keys,omitempty"`
	PurgeKeysEmpty              *bool    `form:"purge_keys__empty,omitempty" json:"purge_keys__empty,omitempty"`
	PurgeKeysGt                 *[]int32 `form:"purge_keys__gt,omitempty" json:"purge_keys__gt,omitempty"`
	PurgeKeysGte                *[]int32 `form:"purge_keys__gte,omitempty" json:"purge_keys__gte,omitempty"`
	PurgeKeysLt                 *[]int32 `form:"purge_keys__lt,omitempty" json:"purge_keys__lt,omitempty"`
	PurgeKeysLte                *[]int32 `form:"purge_keys__lte,omitempty" json:"purge_keys__lte,omitempty"`
	PurgeKeysN                  *[]int32 `form:"purge_keys__n,omitempty" json:"purge_keys__n,omitempty"`

	// Q Search
	Q                             *string   `form:"q,omitempty" json:"q,omitempty"`
	RetireSafety                  *[]int32  `form:"retire_safety,omitempty" json:"retire_safety,omitempty"`
	RetireSafetyEmpty             *bool     `form:"retire_safety__empty,omitempty" json:"retire_safety__empty,omitempty"`
	RetireSafetyGt                *[]int32  `form:"retire_safety__gt,omitempty" json:"retire_safety__gt,omitempty"`
	RetireSafetyGte               *[]int32  `form:"retire_safety__gte,omitempty" json:"retire_safety__gte,omitempty"`
	RetireSafetyLt                *[]int32  `form:"retire_safety__lt,omitempty" json:"retire_safety__lt,omitempty"`
	RetireSafetyLte               *[]int32  `form:"retire_safety__lte,omitempty" json:"retire_safety__lte,omitempty"`
	RetireSafetyN                 *[]int32  `form:"retire_safety__n,omitempty" json:"retire_safety__n,omitempty"`
	SignaturesJitter              *[]int32  `form:"signatures_jitter,omitempty" json:"signatures_jitter,omitempty"`
	SignaturesJitterEmpty         *bool     `form:"signatures_jitter__empty,omitempty" json:"signatures_jitter__empty,omitempty"`
	SignaturesJitterGt            *[]int32  `form:"signatures_jitter__gt,omitempty" json:"signatures_jitter__gt,omitempty"`
	SignaturesJitterGte           *[]int32  `form:"signatures_jitter__gte,omitempty" json:"signatures_jitter__gte,omitempty"`
	SignaturesJitterLt            *[]int32  `form:"signatures_jitter__lt,omitempty" json:"signatures_jitter__lt,omitempty"`
	SignaturesJitterLte           *[]int32  `form:"signatures_jitter__lte,omitempty" json:"signatures_jitter__lte,omitempty"`
	SignaturesJitterN             *[]int32  `form:"signatures_jitter__n,omitempty" json:"signatures_jitter__n,omitempty"`
	SignaturesRefresh             *[]int32  `form:"signatures_refresh,omitempty" json:"signatures_refresh,omitempty"`
	SignaturesRefreshEmpty        *bool     `form:"signatures_refresh__empty,omitempty" json:"signatures_refresh__empty,omitempty"`
	SignaturesRefreshGt           *[]int32  `form:"signatures_refresh__gt,omitempty" json:"signatures_refresh__gt,omitempty"`
	SignaturesRefreshGte          *[]int32  `form:"signatures_refresh__gte,omitempty" json:"signatures_refresh__gte,omitempty"`
	SignaturesRefreshLt           *[]int32  `form:"signatures_refresh__lt,omitempty" json:"signatures_refresh__lt,omitempty"`
	SignaturesRefreshLte          *[]int32  `form:"signatures_refresh__lte,omitempty" json:"signatures_refresh__lte,omitempty"`
	SignaturesRefreshN            *[]int32  `form:"signatures_refresh__n,omitempty" json:"signatures_refresh__n,omitempty"`
	SignaturesValidity            *[]int32  `form:"signatures_validity,omitempty" json:"signatures_validity,omitempty"`
	SignaturesValidityEmpty       *bool     `form:"signatures_validity__empty,omitempty" json:"signatures_validity__empty,omitempty"`
	SignaturesValidityGt          *[]int32  `form:"signatures_validity__gt,omitempty" json:"signatures_validity__gt,omitempty"`
	SignaturesValidityGte         *[]int32  `form:"signatures_validity__gte,omitempty" json:"signatures_validity__gte,omitempty"`
	SignaturesValidityLt          *[]int32  `form:"signatures_validity__lt,omitempty" json:"signatures_validity__lt,omitempty"`
	SignaturesValidityLte         *[]int32  `form:"signatures_validity__lte,omitempty" json:"signatures_validity__lte,omitempty"`
	SignaturesValidityN           *[]int32  `form:"signatures_validity__n,omitempty" json:"signatures_validity__n,omitempty"`
	SignaturesValidityDnskey      *[]int32  `form:"signatures_validity_dnskey,omitempty" json:"signatures_validity_dnskey,omitempty"`
	SignaturesValidityDnskeyEmpty *bool     `form:"signatures_validity_dnskey__empty,omitempty" json:"signatures_validity_dnskey__empty,omitempty"`
	SignaturesValidityDnskeyGt    *[]int32  `form:"signatures_validity_dnskey__gt,omitempty" json:"signatures_validity_dnskey__gt,omitempty"`
	SignaturesValidityDnskeyGte   *[]int32  `form:"signatures_validity_dnskey__gte,omitempty" json:"signatures_validity_dnskey__gte,omitempty"`
	SignaturesValidityDnskeyLt    *[]int32  `form:"signatures_validity_dnskey__lt,omitempty" json:"signatures_validity_dnskey__lt,omitempty"`
	SignaturesValidityDnskeyLte   *[]int32  `form:"signatures_validity_dnskey__lte,omitempty" json:"signatures_validity_dnskey__lte,omitempty"`
	SignaturesValidityDnskeyN     *[]int32  `form:"signatures_validity_dnskey__n,omitempty" json:"signatures_validity_dnskey__n,omitempty"`
	Status                        *[]string `form:"status,omitempty" json:"status,omitempty"`
	StatusEmpty                   *bool     `form:"status__empty,omitempty" json:"status__empty,omitempty"`
	StatusIc                      *[]string `form:"status__ic,omitempty" json:"status__ic,omitempty"`
	StatusIe                      *[]string `form:"status__ie,omitempty" json:"status__ie,omitempty"`
	StatusIew                     *[]string `form:"status__iew,omitempty" json:"status__iew,omitempty"`
	StatusIsw                     *[]string `form:"status__isw,omitempty" json:"status__isw,omitempty"`
	StatusN                       *[]string `form:"status__n,omitempty" json:"status__n,omitempty"`
	StatusNic                     *[]string `form:"status__nic,omitempty" json:"status__nic,omitempty"`
	StatusNie                     *[]string `form:"status__nie,omitempty" json:"status__nie,omitempty"`
	StatusNiew                    *[]string `form:"status__niew,omitempty" json:"status__niew,omitempty"`
	StatusNisw                    *[]string `form:"status__nisw,omitempty" json:"status__nisw,omitempty"`
	Tag                           *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN                          *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
	UseNsec3         *bool               `form:"use_nsec3,omitempty" json:"use_nsec3,omitempty"`

	// Zone Zones
	Zone *[]string `form:"zone,omitempty" json:"zone,omitempty"`

	// ZoneN Zones
	ZoneN *[]string `form:"zone__n,omitempty" json:"zone__n,omitempty"`

	// ZoneId Zone IDs
	ZoneId *[]int `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ZoneIdN Zone IDs
	ZoneIdN                   *[]int   `form:"zone_id__n,omitempty" json:"zone_id__n,omitempty"`
	ZonePropagationDelay      *[]int32 `form:"zone_propagation_delay,omitempty" json:"zone_propagation_delay,omitempty"`
	ZonePropagationDelayEmpty *bool    `form:"zone_propagation_delay__empty,omitempty" json:"zone_propagation_delay__empty,omitempty"`
	ZonePropagationDelayGt    *[]int32 `form:"zone_propagation_delay__gt,omitempty" json:"zone_propagation_delay__gt,omitempty"`
	ZonePropagationDelayGte   *[]int32 `form:"zone_propagation_delay__gte,omitempty" json:"zone_propagation_delay__gte,omitempty"`
	ZonePropagationDelayLt    *[]int32 `form:"zone_propagation_delay__lt,omitempty" json:"zone_propagation_delay__lt,omitempty"`
	ZonePropagationDelayLte   *[]int32 `form:"zone_propagation_delay__lte,omitempty" json:"zone_propagation_delay__lte,omitempty"`
	ZonePropagationDelayN     *[]int32 `form:"zone_propagation_delay__n,omitempty" json:"zone_propagation_delay__n,omitempty"`

	// ZoneTemplate Zone Templates
	ZoneTemplate *[]string `form:"zone_template,omitempty" json:"zone_template,omitempty"`

	// ZoneTemplateN Zone Templates
	ZoneTemplateN *[]string `form:"zone_template__n,omitempty" json:"zone_template__n,omitempty"`

	// ZoneTemplateId Zone Template IDs
	ZoneTemplateId *[]int `form:"zone_template_id,omitempty" json:"zone_template_id,omitempty"`

	// ZoneTemplateIdN Zone Template IDs
	ZoneTemplateIdN *[]int `form:"zone_template_id__n,omitempty" json:"zone_template_id__n,omitempty"`
}

// PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate.
type PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONBody = []DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate.
type PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateMultipartBody = []DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONBody defines parameters for PluginsNetboxDnsDnssecpoliciesBulkUpdate.
type PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONBody = []DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsDnssecpoliciesBulkUpdate.
type PluginsNetboxDnsDnssecpoliciesBulkUpdateMultipartBody = []DNSSECPolicyRequest

// PluginsNetboxDnsNameserversBulkDestroyJSONBody defines parameters for PluginsNetboxDnsNameserversBulkDestroy.
type PluginsNetboxDnsNameserversBulkDestroyJSONBody = []NameServerRequest

// PluginsNetboxDnsNameserversBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsNameserversBulkDestroy.
type PluginsNetboxDnsNameserversBulkDestroyMultipartBody = []NameServerRequest

// PluginsNetboxDnsNameserversListParams defines parameters for PluginsNetboxDnsNameserversList.
type PluginsNetboxDnsNameserversListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// SoaZoneId SOA Zones
	SoaZoneId *[]string `form:"soa_zone_id,omitempty" json:"soa_zone_id,omitempty"`
	Tag       *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN      *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`

	// ZoneId Zones
	ZoneId *[]int `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ZoneIdN Zones
	ZoneIdN *[]int `form:"zone_id__n,omitempty" json:"zone_id__n,omitempty"`
}

// PluginsNetboxDnsNameserversBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsNameserversBulkPartialUpdate.
type PluginsNetboxDnsNameserversBulkPartialUpdateJSONBody = []NameServerRequest

// PluginsNetboxDnsNameserversBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsNameserversBulkPartialUpdate.
type PluginsNetboxDnsNameserversBulkPartialUpdateMultipartBody = []NameServerRequest

// PluginsNetboxDnsNameserversBulkUpdateJSONBody defines parameters for PluginsNetboxDnsNameserversBulkUpdate.
type PluginsNetboxDnsNameserversBulkUpdateJSONBody = []NameServerRequest

// PluginsNetboxDnsNameserversBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsNameserversBulkUpdate.
type PluginsNetboxDnsNameserversBulkUpdateMultipartBody = []NameServerRequest

// PluginsNetboxDnsPrefixesBulkDestroyJSONBody defines parameters for PluginsNetboxDnsPrefixesBulkDestroy.
type PluginsNetboxDnsPrefixesBulkDestroyJSONBody = []PrefixRequest

// PluginsNetboxDnsPrefixesBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsPrefixesBulkDestroy.
type PluginsNetboxDnsPrefixesBulkDestroyMultipartBody = []PrefixRequest

// PluginsNetboxDnsPrefixesListParams defines parameters for PluginsNetboxDnsPrefixesList.
type PluginsNetboxDnsPrefixesListParams struct {
	Children      *[]int32 `form:"children,omitempty" json:"children,omitempty"`
	ChildrenEmpty *[]int32 `form:"children__empty,omitempty" json:"children__empty,omitempty"`
	ChildrenGt    *[]int32 `form:"children__gt,omitempty" json:"children__gt,omitempty"`
	ChildrenGte   *[]int32 `form:"children__gte,omitempty" json:"children__gte,omitempty"`
	ChildrenLt    *[]int32 `form:"children__lt,omitempty" json:"children__lt,omitempty"`
	ChildrenLte   *[]int32 `form:"children__lte,omitempty" json:"children__lte,omitempty"`
	ChildrenN     *[]int32 `form:"children__n,omitempty" json:"children__n,omitempty"`

	// Contact Contact
	Contact *[]int `form:"contact,omitempty" json:"contact,omitempty"`

	// ContactN Contact
	ContactN      *[]int    `form:"contact__n,omitempty" json:"contact__n,omitempty"`
	ContactGroup  *[]string `form:"contact_group,omitempty" json:"contact_group,omitempty"`
	ContactGroupN *[]string `form:"contact_group__n,omitempty" json:"contact_group__n,omitempty"`

	// ContactRole Contact Role
	ContactRole *[]int `form:"contact_role,omitempty" json:"contact_role,omitempty"`

	// ContactRoleN Contact Role
	ContactRoleN *[]int `form:"contact_role__n,omitempty" json:"contact_role__n,omitempty"`

	// Contains Prefixes which contain this prefix or IP
	Contains         *string             `form:"contains,omitempty" json:"contains,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Depth            *[]int32            `form:"depth,omitempty" json:"depth,omitempty"`
	DepthEmpty       *[]int32            `form:"depth__empty,omitempty" json:"depth__empty,omitempty"`
	DepthGt          *[]int32            `form:"depth__gt,omitempty" json:"depth__gt,omitempty"`
	DepthGte         *[]int32            `form:"depth__gte,omitempty" json:"depth__gte,omitempty"`
	DepthLt          *[]int32            `form:"depth__lt,omitempty" json:"depth__lt,omitempty"`
	DepthLte         *[]int32            `form:"depth__lte,omitempty" json:"depth__lte,omitempty"`
	DepthN           *[]int32            `form:"depth__n,omitempty" json:"depth__n,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Family           *float32            `form:"family,omitempty" json:"family,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	IsPool           *bool               `form:"is_pool,omitempty" json:"is_pool,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	Location          *[]string           `form:"location,omitempty" json:"location,omitempty"`
	LocationN         *[]string           `form:"location__n,omitempty" json:"location__n,omitempty"`
	LocationId        *[]string           `form:"location_id,omitempty" json:"location_id,omitempty"`
	LocationIdN       *[]string           `form:"location_id__n,omitempty" json:"location_id__n,omitempty"`
	MarkUtilized      *bool               `form:"mark_utilized,omitempty" json:"mark_utilized,omitempty"`
	MaskLength        *[]int32            `form:"mask_length,omitempty" json:"mask_length,omitempty"`
	MaskLengthGte     *float32            `form:"mask_length__gte,omitempty" json:"mask_length__gte,omitempty"`
	MaskLengthLte     *float32            `form:"mask_length__lte,omitempty" json:"mask_length__lte,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering       *string   `form:"ordering,omitempty" json:"ordering,omitempty"`
	Prefix         *[]string `form:"prefix,omitempty" json:"prefix,omitempty"`
	PresentInVrf   *string   `form:"present_in_vrf,omitempty" json:"present_in_vrf,omitempty"`
	PresentInVrfId *string   `form:"present_in_vrf_id,omitempty" json:"present_in_vrf_id,omitempty"`

	// Q Search
	Q         *string   `form:"q,omitempty" json:"q,omitempty"`
	Region    *[]string `form:"region,omitempty" json:"region,omitempty"`
	RegionN   *[]string `form:"region__n,omitempty" json:"region__n,omitempty"`
	RegionId  *[]string `form:"region_id,omitempty" json:"region_id,omitempty"`
	RegionIdN *[]string `form:"region_id__n,omitempty" json:"region_id__n,omitempty"`

	// Role Role (slug)
	Role *[]string `form:"role,omitempty" json:"role,omitempty"`

	// RoleN Role (slug)
	RoleN *[]string `form:"role__n,omitempty" json:"role__n,omitempty"`

	// RoleId Role (ID)
	RoleId *[]int `form:"role_id,omitempty" json:"role_id,omitempty"`

	// RoleIdN Role (ID)
	RoleIdN      *[]int   `form:"role_id__n,omitempty" json:"role_id__n,omitempty"`
	ScopeId      *[]int32 `form:"scope_id,omitempty" json:"scope_id,omitempty"`
	ScopeIdEmpty *bool    `form:"scope_id__empty,omitempty" json:"scope_id__empty,omitempty"`
	ScopeIdGt    *[]int32 `form:"scope_id__gt,omitempty" json:"scope_id__gt,omitempty"`
	ScopeIdGte   *[]int32 `form:"scope_id__gte,omitempty" json:"scope_id__gte,omitempty"`
	ScopeIdLt    *[]int32 `form:"scope_id__lt,omitempty" json:"scope_id__lt,omitempty"`
	ScopeIdLte   *[]int32 `form:"scope_id__lte,omitempty" json:"scope_id__lte,omitempty"`
	ScopeIdN     *[]int32 `form:"scope_id__n,omitempty" json:"scope_id__n,omitempty"`
	ScopeType    *string  `form:"scope_type,omitempty" json:"scope_type,omitempty"`
	ScopeTypeN   *string  `form:"scope_type__n,omitempty" json:"scope_type__n,omitempty"`

	// Site Site (slug)
	Site *[]string `form:"site,omitempty" json:"site,omitempty"`

	// SiteN Site (slug)
	SiteN        *[]string `form:"site__n,omitempty" json:"site__n,omitempty"`
	SiteGroup    *[]string `form:"site_group,omitempty" json:"site_group,omitempty"`
	SiteGroupN   *[]string `form:"site_group__n,omitempty" json:"site_group__n,omitempty"`
	SiteGroupId  *[]string `form:"site_group_id,omitempty" json:"site_group_id,omitempty"`
	SiteGroupIdN *[]string `form:"site_group_id__n,omitempty" json:"site_group_id__n,omitempty"`

	// SiteId Site (ID)
	SiteId *[]int `form:"site_id,omitempty" json:"site_id,omitempty"`

	// SiteIdN Site (ID)
	SiteIdN *[]int `form:"site_id__n,omitempty" json:"site_id__n,omitempty"`

	// Status Operational status of this prefix
	Status      *[]string `form:"status,omitempty" json:"status,omitempty"`
	StatusEmpty *bool     `form:"status__empty,omitempty" json:"status__empty,omitempty"`

	// StatusIc Operational status of this prefix
	StatusIc *[]string `form:"status__ic,omitempty" json:"status__ic,omitempty"`

	// StatusIe Operational status of this prefix
	StatusIe *[]string `form:"status__ie,omitempty" json:"status__ie,omitempty"`

	// StatusIew Operational status of this prefix
	StatusIew *[]string `form:"status__iew,omitempty" json:"status__iew,omitempty"`

	// StatusIsw Operational status of this prefix
	StatusIsw *[]string `form:"status__isw,omitempty" json:"status__isw,omitempty"`

	// StatusN Operational status of this prefix
	StatusN *[]string `form:"status__n,omitempty" json:"status__n,omitempty"`

	// StatusNic Operational status of this prefix
	StatusNic *[]string `form:"status__nic,omitempty" json:"status__nic,omitempty"`

	// StatusNie Operational status of this prefix
	StatusNie *[]string `form:"status__nie,omitempty" json:"status__nie,omitempty"`

	// StatusNiew Operational status of this prefix
	StatusNiew *[]string `form:"status__niew,omitempty" json:"status__niew,omitempty"`

	// StatusNisw Operational status of this prefix
	StatusNisw *[]string `form:"status__nisw,omitempty" json:"status__nisw,omitempty"`
	Tag        *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN       *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`

	// VlanId VLAN (ID)
	VlanId *[]int `form:"vlan_id,omitempty" json:"vlan_id,omitempty"`

	// VlanIdN VLAN (ID)
	VlanIdN *[]int `form:"vlan_id__n,omitempty" json:"vlan_id__n,omitempty"`

	// VlanVid VLAN number (1-4094)
	VlanVid *int `form:"vlan_vid,omitempty" json:"vlan_vid,omitempty"`

	// VlanVidEmpty VLAN number (1-4094)
	VlanVidEmpty *int `form:"vlan_vid__empty,omitempty" json:"vlan_vid__empty,omitempty"`

	// VlanVidGt VLAN number (1-4094)
	VlanVidGt *int `form:"vlan_vid__gt,omitempty" json:"vlan_vid__gt,omitempty"`

	// VlanVidGte VLAN number (1-4094)
	VlanVidGte *int `form:"vlan_vid__gte,omitempty" json:"vlan_vid__gte,omitempty"`

	// VlanVidLt VLAN number (1-4094)
	VlanVidLt *int `form:"vlan_vid__lt,omitempty" json:"vlan_vid__lt,omitempty"`

	// VlanVidLte VLAN number (1-4094)
	VlanVidLte *int `form:"vlan_vid__lte,omitempty" json:"vlan_vid__lte,omitempty"`

	// VlanVidN VLAN number (1-4094)
	VlanVidN *int `form:"vlan_vid__n,omitempty" json:"vlan_vid__n,omitempty"`

	// Vrf VRF (RD)
	Vrf *[]string `form:"vrf,omitempty" json:"vrf,omitempty"`

	// VrfN VRF (RD)
	VrfN *[]string `form:"vrf__n,omitempty" json:"vrf__n,omitempty"`

	// VrfId VRF
	VrfId *[]int `form:"vrf_id,omitempty" json:"vrf_id,omitempty"`

	// VrfIdN VRF
	VrfIdN *[]int `form:"vrf_id__n,omitempty" json:"vrf_id__n,omitempty"`

	// Within Within prefix
	Within *string `form:"within,omitempty" json:"within,omitempty"`

	// WithinInclude Within and including prefix
	WithinInclude *string `form:"within_include,omitempty" json:"within_include,omitempty"`
}

// PluginsNetboxDnsPrefixesBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsPrefixesBulkPartialUpdate.
type PluginsNetboxDnsPrefixesBulkPartialUpdateJSONBody = []PrefixRequest

// PluginsNetboxDnsPrefixesBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsPrefixesBulkPartialUpdate.
type PluginsNetboxDnsPrefixesBulkPartialUpdateMultipartBody = []PrefixRequest

// PluginsNetboxDnsPrefixesBulkUpdateJSONBody defines parameters for PluginsNetboxDnsPrefixesBulkUpdate.
type PluginsNetboxDnsPrefixesBulkUpdateJSONBody = []PrefixRequest

// PluginsNetboxDnsPrefixesBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsPrefixesBulkUpdate.
type PluginsNetboxDnsPrefixesBulkUpdateMultipartBody = []PrefixRequest

// PluginsNetboxDnsRecordsBulkDestroyJSONBody defines parameters for PluginsNetboxDnsRecordsBulkDestroy.
type PluginsNetboxDnsRecordsBulkDestroyJSONBody = []RecordRequest

// PluginsNetboxDnsRecordsBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsRecordsBulkDestroy.
type PluginsNetboxDnsRecordsBulkDestroyMultipartBody = []RecordRequest

// PluginsNetboxDnsRecordsListParams defines parameters for PluginsNetboxDnsRecordsList.
type PluginsNetboxDnsRecordsListParams struct {
	// Active Record is active
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// AddressRecordId Address Record
	AddressRecordId *[]int `form:"address_record_id,omitempty" json:"address_record_id,omitempty"`

	// AddressRecordIdN Address Record
	AddressRecordIdN *[]int              `form:"address_record_id__n,omitempty" json:"address_record_id__n,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	DisablePtr       *bool               `form:"disable_ptr,omitempty" json:"disable_ptr,omitempty"`
	Fqdn             *[]string           `form:"fqdn,omitempty" json:"fqdn,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	IpAddress        *[]string           `form:"ip_address,omitempty" json:"ip_address,omitempty"`

	// IpamIpAddressId IPAM IP Address
	IpamIpAddressId *[]int `form:"ipam_ip_address_id,omitempty" json:"ipam_ip_address_id,omitempty"`

	// IpamIpAddressIdN IPAM IP Address
	IpamIpAddressIdN *[]int       `form:"ipam_ip_address_id__n,omitempty" json:"ipam_ip_address_id__n,omitempty"`
	LastUpdated      *[]time.Time `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	Managed           *bool               `form:"managed,omitempty" json:"managed,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// PtrRecordId Pointer Record
	PtrRecordId *[]int `form:"ptr_record_id,omitempty" json:"ptr_record_id,omitempty"`

	// PtrRecordIdN Pointer Record
	PtrRecordIdN *[]int `form:"ptr_record_id__n,omitempty" json:"ptr_record_id__n,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Rfc2317CnameRecordId Pointer Record
	Rfc2317CnameRecordId *[]int `form:"rfc2317_cname_record_id,omitempty" json:"rfc2317_cname_record_id,omitempty"`

	// Rfc2317CnameRecordIdN Pointer Record
	Rfc2317CnameRecordIdN *[]int    `form:"rfc2317_cname_record_id__n,omitempty" json:"rfc2317_cname_record_id__n,omitempty"`
	Status                *[]string `form:"status,omitempty" json:"status,omitempty"`
	StatusEmpty           *bool     `form:"status__empty,omitempty" json:"status__empty,omitempty"`
	StatusIc              *[]string `form:"status__ic,omitempty" json:"status__ic,omitempty"`
	StatusIe              *[]string `form:"status__ie,omitempty" json:"status__ie,omitempty"`
	StatusIew             *[]string `form:"status__iew,omitempty" json:"status__iew,omitempty"`
	StatusIsw             *[]string `form:"status__isw,omitempty" json:"status__isw,omitempty"`
	StatusN               *[]string `form:"status__n,omitempty" json:"status__n,omitempty"`
	StatusNic             *[]string `form:"status__nic,omitempty" json:"status__nic,omitempty"`
	StatusNie             *[]string `form:"status__nie,omitempty" json:"status__nie,omitempty"`
	StatusNiew            *[]string `form:"status__niew,omitempty" json:"status__niew,omitempty"`
	StatusNisw            *[]string `form:"status__nisw,omitempty" json:"status__nisw,omitempty"`
	Tag                   *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN                  *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	Ttl              *[]int32            `form:"ttl,omitempty" json:"ttl,omitempty"`
	TtlEmpty         *bool               `form:"ttl__empty,omitempty" json:"ttl__empty,omitempty"`
	TtlGt            *[]int32            `form:"ttl__gt,omitempty" json:"ttl__gt,omitempty"`
	TtlGte           *[]int32            `form:"ttl__gte,omitempty" json:"ttl__gte,omitempty"`
	TtlLt            *[]int32            `form:"ttl__lt,omitempty" json:"ttl__lt,omitempty"`
	TtlLte           *[]int32            `form:"ttl__lte,omitempty" json:"ttl__lte,omitempty"`
	TtlN             *[]int32            `form:"ttl__n,omitempty" json:"ttl__n,omitempty"`
	Type             *[]string           `form:"type,omitempty" json:"type,omitempty"`
	TypeEmpty        *bool               `form:"type__empty,omitempty" json:"type__empty,omitempty"`
	TypeIc           *[]string           `form:"type__ic,omitempty" json:"type__ic,omitempty"`
	TypeIe           *[]string           `form:"type__ie,omitempty" json:"type__ie,omitempty"`
	TypeIew          *[]string           `form:"type__iew,omitempty" json:"type__iew,omitempty"`
	TypeIsw          *[]string           `form:"type__isw,omitempty" json:"type__isw,omitempty"`
	TypeN            *[]string           `form:"type__n,omitempty" json:"type__n,omitempty"`
	TypeNic          *[]string           `form:"type__nic,omitempty" json:"type__nic,omitempty"`
	TypeNie          *[]string           `form:"type__nie,omitempty" json:"type__nie,omitempty"`
	TypeNiew         *[]string           `form:"type__niew,omitempty" json:"type__niew,omitempty"`
	TypeNisw         *[]string           `form:"type__nisw,omitempty" json:"type__nisw,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
	Value            *[]string           `form:"value,omitempty" json:"value,omitempty"`
	ValueEmpty       *bool               `form:"value__empty,omitempty" json:"value__empty,omitempty"`
	ValueIc          *[]string           `form:"value__ic,omitempty" json:"value__ic,omitempty"`
	ValueIe          *[]string           `form:"value__ie,omitempty" json:"value__ie,omitempty"`
	ValueIew         *[]string           `form:"value__iew,omitempty" json:"value__iew,omitempty"`
	ValueIsw         *[]string           `form:"value__isw,omitempty" json:"value__isw,omitempty"`
	ValueN           *[]string           `form:"value__n,omitempty" json:"value__n,omitempty"`
	ValueNic         *[]string           `form:"value__nic,omitempty" json:"value__nic,omitempty"`
	ValueNie         *[]string           `form:"value__nie,omitempty" json:"value__nie,omitempty"`
	ValueNiew        *[]string           `form:"value__niew,omitempty" json:"value__niew,omitempty"`
	ValueNisw        *[]string           `form:"value__nisw,omitempty" json:"value__nisw,omitempty"`

	// View View the Parent Zone belongs to
	View *[]string `form:"view,omitempty" json:"view,omitempty"`

	// ViewN View the Parent Zone belongs to
	ViewN *[]string `form:"view__n,omitempty" json:"view__n,omitempty"`

	// ViewId ID of the View the Parent Zone belongs to
	ViewId *[]int `form:"view_id,omitempty" json:"view_id,omitempty"`

	// ViewIdN ID of the View the Parent Zone belongs to
	ViewIdN *[]int `form:"view_id__n,omitempty" json:"view_id__n,omitempty"`

	// Zone Parent Zone
	Zone *[]string `form:"zone,omitempty" json:"zone,omitempty"`

	// ZoneN Parent Zone
	ZoneN *[]string `form:"zone__n,omitempty" json:"zone__n,omitempty"`

	// ZoneId Parent Zone ID
	ZoneId *[]int `form:"zone_id,omitempty" json:"zone_id,omitempty"`

	// ZoneIdN Parent Zone ID
	ZoneIdN *[]int `form:"zone_id__n,omitempty" json:"zone_id__n,omitempty"`
}

// PluginsNetboxDnsRecordsBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsRecordsBulkPartialUpdate.
type PluginsNetboxDnsRecordsBulkPartialUpdateJSONBody = []RecordRequest

// PluginsNetboxDnsRecordsBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsRecordsBulkPartialUpdate.
type PluginsNetboxDnsRecordsBulkPartialUpdateMultipartBody = []RecordRequest

// PluginsNetboxDnsRecordsBulkUpdateJSONBody defines parameters for PluginsNetboxDnsRecordsBulkUpdate.
type PluginsNetboxDnsRecordsBulkUpdateJSONBody = []RecordRequest

// PluginsNetboxDnsRecordsBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsRecordsBulkUpdate.
type PluginsNetboxDnsRecordsBulkUpdateMultipartBody = []RecordRequest

// PluginsNetboxDnsRecordtemplatesBulkDestroyJSONBody defines parameters for PluginsNetboxDnsRecordtemplatesBulkDestroy.
type PluginsNetboxDnsRecordtemplatesBulkDestroyJSONBody = []RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsRecordtemplatesBulkDestroy.
type PluginsNetboxDnsRecordtemplatesBulkDestroyMultipartBody = []RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesListParams defines parameters for PluginsNetboxDnsRecordtemplatesList.
type PluginsNetboxDnsRecordtemplatesListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	DisablePtr       *bool               `form:"disable_ptr,omitempty" json:"disable_ptr,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q               *string   `form:"q,omitempty" json:"q,omitempty"`
	RecordName      *[]string `form:"record_name,omitempty" json:"record_name,omitempty"`
	RecordNameEmpty *bool     `form:"record_name__empty,omitempty" json:"record_name__empty,omitempty"`
	RecordNameIc    *[]string `form:"record_name__ic,omitempty" json:"record_name__ic,omitempty"`
	RecordNameIe    *[]string `form:"record_name__ie,omitempty" json:"record_name__ie,omitempty"`
	RecordNameIew   *[]string `form:"record_name__iew,omitempty" json:"record_name__iew,omitempty"`
	RecordNameIsw   *[]string `form:"record_name__isw,omitempty" json:"record_name__isw,omitempty"`
	RecordNameN     *[]string `form:"record_name__n,omitempty" json:"record_name__n,omitempty"`
	RecordNameNic   *[]string `form:"record_name__nic,omitempty" json:"record_name__nic,omitempty"`
	RecordNameNie   *[]string `form:"record_name__nie,omitempty" json:"record_name__nie,omitempty"`
	RecordNameNiew  *[]string `form:"record_name__niew,omitempty" json:"record_name__niew,omitempty"`
	RecordNameNisw  *[]string `form:"record_name__nisw,omitempty" json:"record_name__nisw,omitempty"`
	Status          *[]string `form:"status,omitempty" json:"status,omitempty"`
	StatusEmpty     *bool     `form:"status__empty,omitempty" json:"status__empty,omitempty"`
	StatusIc        *[]string `form:"status__ic,omitempty" json:"status__ic,omitempty"`
	StatusIe        *[]string `form:"status__ie,omitempty" json:"status__ie,omitempty"`
	StatusIew       *[]string `form:"status__iew,omitempty" json:"status__iew,omitempty"`
	StatusIsw       *[]string `form:"status__isw,omitempty" json:"status__isw,omitempty"`
	StatusN         *[]string `form:"status__n,omitempty" json:"status__n,omitempty"`
	StatusNic       *[]string `form:"status__nic,omitempty" json:"status__nic,omitempty"`
	StatusNie       *[]string `form:"status__nie,omitempty" json:"status__nie,omitempty"`
	StatusNiew      *[]string `form:"status__niew,omitempty" json:"status__niew,omitempty"`
	StatusNisw      *[]string `form:"status__nisw,omitempty" json:"status__nisw,omitempty"`
	Tag             *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN            *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	Ttl              *[]int32            `form:"ttl,omitempty" json:"ttl,omitempty"`
	TtlEmpty         *bool               `form:"ttl__empty,omitempty" json:"ttl__empty,omitempty"`
	TtlGt            *[]int32            `form:"ttl__gt,omitempty" json:"ttl__gt,omitempty"`
	TtlGte           *[]int32            `form:"ttl__gte,omitempty" json:"ttl__gte,omitempty"`
	TtlLt            *[]int32            `form:"ttl__lt,omitempty" json:"ttl__lt,omitempty"`
	TtlLte           *[]int32            `form:"ttl__lte,omitempty" json:"ttl__lte,omitempty"`
	TtlN             *[]int32            `form:"ttl__n,omitempty" json:"ttl__n,omitempty"`
	Type             *[]string           `form:"type,omitempty" json:"type,omitempty"`
	TypeEmpty        *bool               `form:"type__empty,omitempty" json:"type__empty,omitempty"`
	TypeIc           *[]string           `form:"type__ic,omitempty" json:"type__ic,omitempty"`
	TypeIe           *[]string           `form:"type__ie,omitempty" json:"type__ie,omitempty"`
	TypeIew          *[]string           `form:"type__iew,omitempty" json:"type__iew,omitempty"`
	TypeIsw          *[]string           `form:"type__isw,omitempty" json:"type__isw,omitempty"`
	TypeN            *[]string           `form:"type__n,omitempty" json:"type__n,omitempty"`
	TypeNic          *[]string           `form:"type__nic,omitempty" json:"type__nic,omitempty"`
	TypeNie          *[]string           `form:"type__nie,omitempty" json:"type__nie,omitempty"`
	TypeNiew         *[]string           `form:"type__niew,omitempty" json:"type__niew,omitempty"`
	TypeNisw         *[]string           `form:"type__nisw,omitempty" json:"type__nisw,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
	Value            *[]string           `form:"value,omitempty" json:"value,omitempty"`
	ValueEmpty       *bool               `form:"value__empty,omitempty" json:"value__empty,omitempty"`
	ValueIc          *[]string           `form:"value__ic,omitempty" json:"value__ic,omitempty"`
	ValueIe          *[]string           `form:"value__ie,omitempty" json:"value__ie,omitempty"`
	ValueIew         *[]string           `form:"value__iew,omitempty" json:"value__iew,omitempty"`
	ValueIsw         *[]string           `form:"value__isw,omitempty" json:"value__isw,omitempty"`
	ValueN           *[]string           `form:"value__n,omitempty" json:"value__n,omitempty"`
	ValueNic         *[]string           `form:"value__nic,omitempty" json:"value__nic,omitempty"`
	ValueNie         *[]string           `form:"value__nie,omitempty" json:"value__nie,omitempty"`
	ValueNiew        *[]string           `form:"value__niew,omitempty" json:"value__niew,omitempty"`
	ValueNisw        *[]string           `form:"value__nisw,omitempty" json:"value__nisw,omitempty"`

	// ZoneTemplate Zone Template
	ZoneTemplate *[]string `form:"zone_template,omitempty" json:"zone_template,omitempty"`

	// ZoneTemplateN Zone Template
	ZoneTemplateN *[]string `form:"zone_template__n,omitempty" json:"zone_template__n,omitempty"`

	// ZoneTemplateId Zone Template ID
	ZoneTemplateId *[]int `form:"zone_template_id,omitempty" json:"zone_template_id,omitempty"`

	// ZoneTemplateIdN Zone Template ID
	ZoneTemplateIdN *[]int `form:"zone_template_id__n,omitempty" json:"zone_template_id__n,omitempty"`
}

// PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsRecordtemplatesBulkPartialUpdate.
type PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONBody = []RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsRecordtemplatesBulkPartialUpdate.
type PluginsNetboxDnsRecordtemplatesBulkPartialUpdateMultipartBody = []RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesBulkUpdateJSONBody defines parameters for PluginsNetboxDnsRecordtemplatesBulkUpdate.
type PluginsNetboxDnsRecordtemplatesBulkUpdateJSONBody = []RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsRecordtemplatesBulkUpdate.
type PluginsNetboxDnsRecordtemplatesBulkUpdateMultipartBody = []RecordTemplateRequest

// PluginsNetboxDnsRegistrarsBulkDestroyJSONBody defines parameters for PluginsNetboxDnsRegistrarsBulkDestroy.
type PluginsNetboxDnsRegistrarsBulkDestroyJSONBody = []RegistrarRequest

// PluginsNetboxDnsRegistrarsBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsRegistrarsBulkDestroy.
type PluginsNetboxDnsRegistrarsBulkDestroyMultipartBody = []RegistrarRequest

// PluginsNetboxDnsRegistrarsListParams defines parameters for PluginsNetboxDnsRegistrarsList.
type PluginsNetboxDnsRegistrarsListParams struct {
	AbuseEmail       *[]string           `form:"abuse_email,omitempty" json:"abuse_email,omitempty"`
	AbuseEmailEmpty  *bool               `form:"abuse_email__empty,omitempty" json:"abuse_email__empty,omitempty"`
	AbuseEmailIc     *[]string           `form:"abuse_email__ic,omitempty" json:"abuse_email__ic,omitempty"`
	AbuseEmailIe     *[]string           `form:"abuse_email__ie,omitempty" json:"abuse_email__ie,omitempty"`
	AbuseEmailIew    *[]string           `form:"abuse_email__iew,omitempty" json:"abuse_email__iew,omitempty"`
	AbuseEmailIsw    *[]string           `form:"abuse_email__isw,omitempty" json:"abuse_email__isw,omitempty"`
	AbuseEmailN      *[]string           `form:"abuse_email__n,omitempty" json:"abuse_email__n,omitempty"`
	AbuseEmailNic    *[]string           `form:"abuse_email__nic,omitempty" json:"abuse_email__nic,omitempty"`
	AbuseEmailNie    *[]string           `form:"abuse_email__nie,omitempty" json:"abuse_email__nie,omitempty"`
	AbuseEmailNiew   *[]string           `form:"abuse_email__niew,omitempty" json:"abuse_email__niew,omitempty"`
	AbuseEmailNisw   *[]string           `form:"abuse_email__nisw,omitempty" json:"abuse_email__nisw,omitempty"`
	AbusePhone       *[]string           `form:"abuse_phone,omitempty" json:"abuse_phone,omitempty"`
	AbusePhoneEmpty  *bool               `form:"abuse_phone__empty,omitempty" json:"abuse_phone__empty,omitempty"`
	AbusePhoneIc     *[]string           `form:"abuse_phone__ic,omitempty" json:"abuse_phone__ic,omitempty"`
	AbusePhoneIe     *[]string           `form:"abuse_phone__ie,omitempty" json:"abuse_phone__ie,omitempty"`
	AbusePhoneIew    *[]string           `form:"abuse_phone__iew,omitempty" json:"abuse_phone__iew,omitempty"`
	AbusePhoneIsw    *[]string           `form:"abuse_phone__isw,omitempty" json:"abuse_phone__isw,omitempty"`
	AbusePhoneN      *[]string           `form:"abuse_phone__n,omitempty" json:"abuse_phone__n,omitempty"`
	AbusePhoneNic    *[]string           `form:"abuse_phone__nic,omitempty" json:"abuse_phone__nic,omitempty"`
	AbusePhoneNie    *[]string           `form:"abuse_phone__nie,omitempty" json:"abuse_phone__nie,omitempty"`
	AbusePhoneNiew   *[]string           `form:"abuse_phone__niew,omitempty" json:"abuse_phone__niew,omitempty"`
	AbusePhoneNisw   *[]string           `form:"abuse_phone__nisw,omitempty" json:"abuse_phone__nisw,omitempty"`
	Address          *[]string           `form:"address,omitempty" json:"address,omitempty"`
	AddressEmpty     *bool               `form:"address__empty,omitempty" json:"address__empty,omitempty"`
	AddressIc        *[]string           `form:"address__ic,omitempty" json:"address__ic,omitempty"`
	AddressIe        *[]string           `form:"address__ie,omitempty" json:"address__ie,omitempty"`
	AddressIew       *[]string           `form:"address__iew,omitempty" json:"address__iew,omitempty"`
	AddressIsw       *[]string           `form:"address__isw,omitempty" json:"address__isw,omitempty"`
	AddressN         *[]string           `form:"address__n,omitempty" json:"address__n,omitempty"`
	AddressNic       *[]string           `form:"address__nic,omitempty" json:"address__nic,omitempty"`
	AddressNie       *[]string           `form:"address__nie,omitempty" json:"address__nie,omitempty"`
	AddressNiew      *[]string           `form:"address__niew,omitempty" json:"address__niew,omitempty"`
	AddressNisw      *[]string           `form:"address__nisw,omitempty" json:"address__nisw,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	IanaId           *[]int32            `form:"iana_id,omitempty" json:"iana_id,omitempty"`
	IanaIdEmpty      *bool               `form:"iana_id__empty,omitempty" json:"iana_id__empty,omitempty"`
	IanaIdGt         *[]int32            `form:"iana_id__gt,omitempty" json:"iana_id__gt,omitempty"`
	IanaIdGte        *[]int32            `form:"iana_id__gte,omitempty" json:"iana_id__gte,omitempty"`
	IanaIdLt         *[]int32            `form:"iana_id__lt,omitempty" json:"iana_id__lt,omitempty"`
	IanaIdLte        *[]int32            `form:"iana_id__lte,omitempty" json:"iana_id__lte,omitempty"`
	IanaIdN          *[]int32            `form:"iana_id__n,omitempty" json:"iana_id__n,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	ReferralUrl      *[]string           `form:"referral_url,omitempty" json:"referral_url,omitempty"`
	ReferralUrlEmpty *bool               `form:"referral_url__empty,omitempty" json:"referral_url__empty,omitempty"`
	ReferralUrlIc    *[]string           `form:"referral_url__ic,omitempty" json:"referral_url__ic,omitempty"`
	ReferralUrlIe    *[]string           `form:"referral_url__ie,omitempty" json:"referral_url__ie,omitempty"`
	ReferralUrlIew   *[]string           `form:"referral_url__iew,omitempty" json:"referral_url__iew,omitempty"`
	ReferralUrlIsw   *[]string           `form:"referral_url__isw,omitempty" json:"referral_url__isw,omitempty"`
	ReferralUrlN     *[]string           `form:"referral_url__n,omitempty" json:"referral_url__n,omitempty"`
	ReferralUrlNic   *[]string           `form:"referral_url__nic,omitempty" json:"referral_url__nic,omitempty"`
	ReferralUrlNie   *[]string           `form:"referral_url__nie,omitempty" json:"referral_url__nie,omitempty"`
	ReferralUrlNiew  *[]string           `form:"referral_url__niew,omitempty" json:"referral_url__niew,omitempty"`
	ReferralUrlNisw  *[]string           `form:"referral_url__nisw,omitempty" json:"referral_url__nisw,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
	WhoisServer      *[]string           `form:"whois_server,omitempty" json:"whois_server,omitempty"`
	WhoisServerEmpty *bool               `form:"whois_server__empty,omitempty" json:"whois_server__empty,omitempty"`
	WhoisServerIc    *[]string           `form:"whois_server__ic,omitempty" json:"whois_server__ic,omitempty"`
	WhoisServerIe    *[]string           `form:"whois_server__ie,omitempty" json:"whois_server__ie,omitempty"`
	WhoisServerIew   *[]string           `form:"whois_server__iew,omitempty" json:"whois_server__iew,omitempty"`
	WhoisServerIsw   *[]string           `form:"whois_server__isw,omitempty" json:"whois_server__isw,omitempty"`
	WhoisServerN     *[]string           `form:"whois_server__n,omitempty" json:"whois_server__n,omitempty"`
	WhoisServerNic   *[]string           `form:"whois_server__nic,omitempty" json:"whois_server__nic,omitempty"`
	WhoisServerNie   *[]string           `form:"whois_server__nie,omitempty" json:"whois_server__nie,omitempty"`
	WhoisServerNiew  *[]string           `form:"whois_server__niew,omitempty" json:"whois_server__niew,omitempty"`
	WhoisServerNisw  *[]string           `form:"whois_server__nisw,omitempty" json:"whois_server__nisw,omitempty"`
}

// PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsRegistrarsBulkPartialUpdate.
type PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONBody = []RegistrarRequest

// PluginsNetboxDnsRegistrarsBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsRegistrarsBulkPartialUpdate.
type PluginsNetboxDnsRegistrarsBulkPartialUpdateMultipartBody = []RegistrarRequest

// PluginsNetboxDnsRegistrarsBulkUpdateJSONBody defines parameters for PluginsNetboxDnsRegistrarsBulkUpdate.
type PluginsNetboxDnsRegistrarsBulkUpdateJSONBody = []RegistrarRequest

// PluginsNetboxDnsRegistrarsBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsRegistrarsBulkUpdate.
type PluginsNetboxDnsRegistrarsBulkUpdateMultipartBody = []RegistrarRequest

// PluginsNetboxDnsViewsBulkDestroyJSONBody defines parameters for PluginsNetboxDnsViewsBulkDestroy.
type PluginsNetboxDnsViewsBulkDestroyJSONBody = []ViewRequest

// PluginsNetboxDnsViewsBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsViewsBulkDestroy.
type PluginsNetboxDnsViewsBulkDestroyMultipartBody = []ViewRequest

// PluginsNetboxDnsViewsListParams defines parameters for PluginsNetboxDnsViewsList.
type PluginsNetboxDnsViewsListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	DefaultView      *bool               `form:"default_view,omitempty" json:"default_view,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Prefix Prefix
	Prefix *[]string `form:"prefix,omitempty" json:"prefix,omitempty"`

	// PrefixN Prefix
	PrefixN *[]string `form:"prefix__n,omitempty" json:"prefix__n,omitempty"`

	// PrefixId Prefix ID
	PrefixId *[]int `form:"prefix_id,omitempty" json:"prefix_id,omitempty"`

	// PrefixIdN Prefix ID
	PrefixIdN *[]int `form:"prefix_id__n,omitempty" json:"prefix_id__n,omitempty"`

	// Q Search
	Q    *string   `form:"q,omitempty" json:"q,omitempty"`
	Tag  *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsNetboxDnsViewsBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsViewsBulkPartialUpdate.
type PluginsNetboxDnsViewsBulkPartialUpdateJSONBody = []ViewRequest

// PluginsNetboxDnsViewsBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsViewsBulkPartialUpdate.
type PluginsNetboxDnsViewsBulkPartialUpdateMultipartBody = []ViewRequest

// PluginsNetboxDnsViewsBulkUpdateJSONBody defines parameters for PluginsNetboxDnsViewsBulkUpdate.
type PluginsNetboxDnsViewsBulkUpdateJSONBody = []ViewRequest

// PluginsNetboxDnsViewsBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsViewsBulkUpdate.
type PluginsNetboxDnsViewsBulkUpdateMultipartBody = []ViewRequest

// PluginsNetboxDnsZonesBulkDestroyJSONBody defines parameters for PluginsNetboxDnsZonesBulkDestroy.
type PluginsNetboxDnsZonesBulkDestroyJSONBody = []ZoneRequest

// PluginsNetboxDnsZonesBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsZonesBulkDestroy.
type PluginsNetboxDnsZonesBulkDestroyMultipartBody = []ZoneRequest

// PluginsNetboxDnsZonesListParams defines parameters for PluginsNetboxDnsZonesList.
type PluginsNetboxDnsZonesListParams struct {
	// Active Zone is active
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// AdminC Administrative Contact
	AdminC *[]string `form:"admin_c,omitempty" json:"admin_c,omitempty"`

	// AdminCN Administrative Contact
	AdminCN *[]string `form:"admin_c__n,omitempty" json:"admin_c__n,omitempty"`

	// AdminCId Administrative Contact ID
	AdminCId *[]int `form:"admin_c_id,omitempty" json:"admin_c_id,omitempty"`

	// AdminCIdN Administrative Contact ID
	AdminCIdN   *[]int    `form:"admin_c_id__n,omitempty" json:"admin_c_id__n,omitempty"`
	ArpaNetwork *[]string `form:"arpa_network,omitempty" json:"arpa_network,omitempty"`

	// BillingC Billing Contact
	BillingC *[]string `form:"billing_c,omitempty" json:"billing_c,omitempty"`

	// BillingCN Billing Contact
	BillingCN *[]string `form:"billing_c__n,omitempty" json:"billing_c__n,omitempty"`

	// BillingCId Billing Contact ID
	BillingCId *[]int `form:"billing_c_id,omitempty" json:"billing_c_id,omitempty"`

	// BillingCIdN Billing Contact ID
	BillingCIdN      *[]int              `form:"billing_c_id__n,omitempty" json:"billing_c_id__n,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	DefaultTtl       *[]int32            `form:"default_ttl,omitempty" json:"default_ttl,omitempty"`
	DefaultTtlEmpty  *bool               `form:"default_ttl__empty,omitempty" json:"default_ttl__empty,omitempty"`
	DefaultTtlGt     *[]int32            `form:"default_ttl__gt,omitempty" json:"default_ttl__gt,omitempty"`
	DefaultTtlGte    *[]int32            `form:"default_ttl__gte,omitempty" json:"default_ttl__gte,omitempty"`
	DefaultTtlLt     *[]int32            `form:"default_ttl__lt,omitempty" json:"default_ttl__lt,omitempty"`
	DefaultTtlLte    *[]int32            `form:"default_ttl__lte,omitempty" json:"default_ttl__lte,omitempty"`
	DefaultTtlN      *[]int32            `form:"default_ttl__n,omitempty" json:"default_ttl__n,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`

	// DnssecPolicy DNSSEC Policy
	DnssecPolicy *[]string `form:"dnssec_policy,omitempty" json:"dnssec_policy,omitempty"`

	// DnssecPolicyN DNSSEC Policy
	DnssecPolicyN *[]string `form:"dnssec_policy__n,omitempty" json:"dnssec_policy__n,omitempty"`

	// DnssecPolicyId DNSSEC Policy ID
	DnssecPolicyId *[]int `form:"dnssec_policy_id,omitempty" json:"dnssec_policy_id,omitempty"`

	// DnssecPolicyIdN DNSSEC Policy ID
	DnssecPolicyIdN      *[]int              `form:"dnssec_policy_id__n,omitempty" json:"dnssec_policy_id__n,omitempty"`
	DomainStatus         *[]string           `form:"domain_status,omitempty" json:"domain_status,omitempty"`
	DomainStatusEmpty    *bool               `form:"domain_status__empty,omitempty" json:"domain_status__empty,omitempty"`
	DomainStatusIc       *[]string           `form:"domain_status__ic,omitempty" json:"domain_status__ic,omitempty"`
	DomainStatusIe       *[]string           `form:"domain_status__ie,omitempty" json:"domain_status__ie,omitempty"`
	DomainStatusIew      *[]string           `form:"domain_status__iew,omitempty" json:"domain_status__iew,omitempty"`
	DomainStatusIsw      *[]string           `form:"domain_status__isw,omitempty" json:"domain_status__isw,omitempty"`
	DomainStatusN        *[]string           `form:"domain_status__n,omitempty" json:"domain_status__n,omitempty"`
	DomainStatusNic      *[]string           `form:"domain_status__nic,omitempty" json:"domain_status__nic,omitempty"`
	DomainStatusNie      *[]string           `form:"domain_status__nie,omitempty" json:"domain_status__nie,omitempty"`
	DomainStatusNiew     *[]string           `form:"domain_status__niew,omitempty" json:"domain_status__niew,omitempty"`
	DomainStatusNisw     *[]string           `form:"domain_status__nisw,omitempty" json:"domain_status__nisw,omitempty"`
	ExpirationDateAfter  *openapi_types.Date `form:"expiration_date_after,omitempty" json:"expiration_date_after,omitempty"`
	ExpirationDateBefore *openapi_types.Date `form:"expiration_date_before,omitempty" json:"expiration_date_before,omitempty"`
	Id                   *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty              *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt                 *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte                *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt                 *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte                *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN                  *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	InlineSigning        *bool               `form:"inline_signing,omitempty" json:"inline_signing,omitempty"`
	LastUpdated          *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty     *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt        *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte       *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt        *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte       *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN         *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Nameserver Nameserver
	Nameserver *[]string `form:"nameserver,omitempty" json:"nameserver,omitempty"`

	// NameserverN Nameserver
	NameserverN *[]string `form:"nameserver__n,omitempty" json:"nameserver__n,omitempty"`

	// NameserverId Nameservers ID
	NameserverId *[]int `form:"nameserver_id,omitempty" json:"nameserver_id,omitempty"`

	// NameserverIdN Nameservers ID
	NameserverIdN *[]int `form:"nameserver_id__n,omitempty" json:"nameserver_id__n,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Registrant Registrant
	Registrant *[]string `form:"registrant,omitempty" json:"registrant,omitempty"`

	// RegistrantN Registrant
	RegistrantN *[]string `form:"registrant__n,omitempty" json:"registrant__n,omitempty"`

	// RegistrantId Registrant ID
	RegistrantId *[]int `form:"registrant_id,omitempty" json:"registrant_id,omitempty"`

	// RegistrantIdN Registrant ID
	RegistrantIdN *[]int `form:"registrant_id__n,omitempty" json:"registrant_id__n,omitempty"`

	// Registrar Registrar
	Registrar *[]string `form:"registrar,omitempty" json:"registrar,omitempty"`

	// RegistrarN Registrar
	RegistrarN *[]string `form:"registrar__n,omitempty" json:"registrar__n,omitempty"`

	// RegistrarId Registrar ID
	RegistrarId *[]int `form:"registrar_id,omitempty" json:"registrar_id,omitempty"`

	// RegistrarIdN Registrar ID
	RegistrarIdN          *[]int    `form:"registrar_id__n,omitempty" json:"registrar_id__n,omitempty"`
	RegistryDomainId      *[]string `form:"registry_domain_id,omitempty" json:"registry_domain_id,omitempty"`
	RegistryDomainIdEmpty *bool     `form:"registry_domain_id__empty,omitempty" json:"registry_domain_id__empty,omitempty"`
	RegistryDomainIdIc    *[]string `form:"registry_domain_id__ic,omitempty" json:"registry_domain_id__ic,omitempty"`
	RegistryDomainIdIe    *[]string `form:"registry_domain_id__ie,omitempty" json:"registry_domain_id__ie,omitempty"`
	RegistryDomainIdIew   *[]string `form:"registry_domain_id__iew,omitempty" json:"registry_domain_id__iew,omitempty"`
	RegistryDomainIdIsw   *[]string `form:"registry_domain_id__isw,omitempty" json:"registry_domain_id__isw,omitempty"`
	RegistryDomainIdN     *[]string `form:"registry_domain_id__n,omitempty" json:"registry_domain_id__n,omitempty"`
	RegistryDomainIdNic   *[]string `form:"registry_domain_id__nic,omitempty" json:"registry_domain_id__nic,omitempty"`
	RegistryDomainIdNie   *[]string `form:"registry_domain_id__nie,omitempty" json:"registry_domain_id__nie,omitempty"`
	RegistryDomainIdNiew  *[]string `form:"registry_domain_id__niew,omitempty" json:"registry_domain_id__niew,omitempty"`
	RegistryDomainIdNisw  *[]string `form:"registry_domain_id__nisw,omitempty" json:"registry_domain_id__nisw,omitempty"`
	Rfc2317ParentManaged  *bool     `form:"rfc2317_parent_managed,omitempty" json:"rfc2317_parent_managed,omitempty"`

	// Rfc2317ParentZone RFC2317 Parent Zone
	Rfc2317ParentZone *[]string `form:"rfc2317_parent_zone,omitempty" json:"rfc2317_parent_zone,omitempty"`

	// Rfc2317ParentZoneN RFC2317 Parent Zone
	Rfc2317ParentZoneN *[]string `form:"rfc2317_parent_zone__n,omitempty" json:"rfc2317_parent_zone__n,omitempty"`

	// Rfc2317ParentZoneId RFC2317 Parent Zone
	Rfc2317ParentZoneId *[]int `form:"rfc2317_parent_zone_id,omitempty" json:"rfc2317_parent_zone_id,omitempty"`

	// Rfc2317ParentZoneIdN RFC2317 Parent Zone
	Rfc2317ParentZoneIdN *[]int    `form:"rfc2317_parent_zone_id__n,omitempty" json:"rfc2317_parent_zone_id__n,omitempty"`
	Rfc2317Prefix        *[]string `form:"rfc2317_prefix,omitempty" json:"rfc2317_prefix,omitempty"`
	SoaExpire            *[]int32  `form:"soa_expire,omitempty" json:"soa_expire,omitempty"`
	SoaExpireEmpty       *bool     `form:"soa_expire__empty,omitempty" json:"soa_expire__empty,omitempty"`
	SoaExpireGt          *[]int32  `form:"soa_expire__gt,omitempty" json:"soa_expire__gt,omitempty"`
	SoaExpireGte         *[]int32  `form:"soa_expire__gte,omitempty" json:"soa_expire__gte,omitempty"`
	SoaExpireLt          *[]int32  `form:"soa_expire__lt,omitempty" json:"soa_expire__lt,omitempty"`
	SoaExpireLte         *[]int32  `form:"soa_expire__lte,omitempty" json:"soa_expire__lte,omitempty"`
	SoaExpireN           *[]int32  `form:"soa_expire__n,omitempty" json:"soa_expire__n,omitempty"`
	SoaMinimum           *[]int32  `form:"soa_minimum,omitempty" json:"soa_minimum,omitempty"`
	SoaMinimumEmpty      *bool     `form:"soa_minimum__empty,omitempty" json:"soa_minimum__empty,omitempty"`
	SoaMinimumGt         *[]int32  `form:"soa_minimum__gt,omitempty" json:"soa_minimum__gt,omitempty"`
	SoaMinimumGte        *[]int32  `form:"soa_minimum__gte,omitempty" json:"soa_minimum__gte,omitempty"`
	SoaMinimumLt         *[]int32  `form:"soa_minimum__lt,omitempty" json:"soa_minimum__lt,omitempty"`
	SoaMinimumLte        *[]int32  `form:"soa_minimum__lte,omitempty" json:"soa_minimum__lte,omitempty"`
	SoaMinimumN          *[]int32  `form:"soa_minimum__n,omitempty" json:"soa_minimum__n,omitempty"`

	// SoaMname SOA MName
	SoaMname *[]string `form:"soa_mname,omitempty" json:"soa_mname,omitempty"`

	// SoaMnameN SOA MName
	SoaMnameN *[]string `form:"soa_mname__n,omitempty" json:"soa_mname__n,omitempty"`

	// SoaMnameId SOA MName ID
	SoaMnameId *[]int `form:"soa_mname_id,omitempty" json:"soa_mname_id,omitempty"`

	// SoaMnameIdN SOA MName ID
	SoaMnameIdN     *[]int    `form:"soa_mname_id__n,omitempty" json:"soa_mname_id__n,omitempty"`
	SoaRefresh      *[]int32  `form:"soa_refresh,omitempty" json:"soa_refresh,omitempty"`
	SoaRefreshEmpty *bool     `form:"soa_refresh__empty,omitempty" json:"soa_refresh__empty,omitempty"`
	SoaRefreshGt    *[]int32  `form:"soa_refresh__gt,omitempty" json:"soa_refresh__gt,omitempty"`
	SoaRefreshGte   *[]int32  `form:"soa_refresh__gte,omitempty" json:"soa_refresh__gte,omitempty"`
	SoaRefreshLt    *[]int32  `form:"soa_refresh__lt,omitempty" json:"soa_refresh__lt,omitempty"`
	SoaRefreshLte   *[]int32  `form:"soa_refresh__lte,omitempty" json:"soa_refresh__lte,omitempty"`
	SoaRefreshN     *[]int32  `form:"soa_refresh__n,omitempty" json:"soa_refresh__n,omitempty"`
	SoaRetry        *[]int32  `form:"soa_retry,omitempty" json:"soa_retry,omitempty"`
	SoaRetryEmpty   *bool     `form:"soa_retry__empty,omitempty" json:"soa_retry__empty,omitempty"`
	SoaRetryGt      *[]int32  `form:"soa_retry__gt,omitempty" json:"soa_retry__gt,omitempty"`
	SoaRetryGte     *[]int32  `form:"soa_retry__gte,omitempty" json:"soa_retry__gte,omitempty"`
	SoaRetryLt      *[]int32  `form:"soa_retry__lt,omitempty" json:"soa_retry__lt,omitempty"`
	SoaRetryLte     *[]int32  `form:"soa_retry__lte,omitempty" json:"soa_retry__lte,omitempty"`
	SoaRetryN       *[]int32  `form:"soa_retry__n,omitempty" json:"soa_retry__n,omitempty"`
	SoaRname        *[]string `form:"soa_rname,omitempty" json:"soa_rname,omitempty"`
	SoaRnameEmpty   *bool     `form:"soa_rname__empty,omitempty" json:"soa_rname__empty,omitempty"`
	SoaRnameIc      *[]string `form:"soa_rname__ic,omitempty" json:"soa_rname__ic,omitempty"`
	SoaRnameIe      *[]string `form:"soa_rname__ie,omitempty" json:"soa_rname__ie,omitempty"`
	SoaRnameIew     *[]string `form:"soa_rname__iew,omitempty" json:"soa_rname__iew,omitempty"`
	SoaRnameIsw     *[]string `form:"soa_rname__isw,omitempty" json:"soa_rname__isw,omitempty"`
	SoaRnameN       *[]string `form:"soa_rname__n,omitempty" json:"soa_rname__n,omitempty"`
	SoaRnameNic     *[]string `form:"soa_rname__nic,omitempty" json:"soa_rname__nic,omitempty"`
	SoaRnameNie     *[]string `form:"soa_rname__nie,omitempty" json:"soa_rname__nie,omitempty"`
	SoaRnameNiew    *[]string `form:"soa_rname__niew,omitempty" json:"soa_rname__niew,omitempty"`
	SoaRnameNisw    *[]string `form:"soa_rname__nisw,omitempty" json:"soa_rname__nisw,omitempty"`
	SoaSerial       *[]int32  `form:"soa_serial,omitempty" json:"soa_serial,omitempty"`
	SoaSerialEmpty  *bool     `form:"soa_serial__empty,omitempty" json:"soa_serial__empty,omitempty"`
	SoaSerialGt     *[]int32  `form:"soa_serial__gt,omitempty" json:"soa_serial__gt,omitempty"`
	SoaSerialGte    *[]int32  `form:"soa_serial__gte,omitempty" json:"soa_serial__gte,omitempty"`
	SoaSerialLt     *[]int32  `form:"soa_serial__lt,omitempty" json:"soa_serial__lt,omitempty"`
	SoaSerialLte    *[]int32  `form:"soa_serial__lte,omitempty" json:"soa_serial__lte,omitempty"`
	SoaSerialN      *[]int32  `form:"soa_serial__n,omitempty" json:"soa_serial__n,omitempty"`
	SoaSerialAuto   *bool     `form:"soa_serial_auto,omitempty" json:"soa_serial_auto,omitempty"`
	SoaTtl          *[]int32  `form:"soa_ttl,omitempty" json:"soa_ttl,omitempty"`
	SoaTtlEmpty     *bool     `form:"soa_ttl__empty,omitempty" json:"soa_ttl__empty,omitempty"`
	SoaTtlGt        *[]int32  `form:"soa_ttl__gt,omitempty" json:"soa_ttl__gt,omitempty"`
	SoaTtlGte       *[]int32  `form:"soa_ttl__gte,omitempty" json:"soa_ttl__gte,omitempty"`
	SoaTtlLt        *[]int32  `form:"soa_ttl__lt,omitempty" json:"soa_ttl__lt,omitempty"`
	SoaTtlLte       *[]int32  `form:"soa_ttl__lte,omitempty" json:"soa_ttl__lte,omitempty"`
	SoaTtlN         *[]int32  `form:"soa_ttl__n,omitempty" json:"soa_ttl__n,omitempty"`
	Status          *[]string `form:"status,omitempty" json:"status,omitempty"`
	StatusEmpty     *bool     `form:"status__empty,omitempty" json:"status__empty,omitempty"`
	StatusIc        *[]string `form:"status__ic,omitempty" json:"status__ic,omitempty"`
	StatusIe        *[]string `form:"status__ie,omitempty" json:"status__ie,omitempty"`
	StatusIew       *[]string `form:"status__iew,omitempty" json:"status__iew,omitempty"`
	StatusIsw       *[]string `form:"status__isw,omitempty" json:"status__isw,omitempty"`
	StatusN         *[]string `form:"status__n,omitempty" json:"status__n,omitempty"`
	StatusNic       *[]string `form:"status__nic,omitempty" json:"status__nic,omitempty"`
	StatusNie       *[]string `form:"status__nie,omitempty" json:"status__nie,omitempty"`
	StatusNiew      *[]string `form:"status__niew,omitempty" json:"status__niew,omitempty"`
	StatusNisw      *[]string `form:"status__nisw,omitempty" json:"status__nisw,omitempty"`
	Tag             *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN            *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// TechC Technical Contact
	TechC *[]string `form:"tech_c,omitempty" json:"tech_c,omitempty"`

	// TechCN Technical Contact
	TechCN *[]string `form:"tech_c__n,omitempty" json:"tech_c__n,omitempty"`

	// TechCId Technical Contact ID
	TechCId *[]int `form:"tech_c_id,omitempty" json:"tech_c_id,omitempty"`

	// TechCIdN Technical Contact ID
	TechCIdN *[]int `form:"tech_c_id__n,omitempty" json:"tech_c_id__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`

	// View View
	View *[]string `form:"view,omitempty" json:"view,omitempty"`

	// ViewN View
	ViewN *[]string `form:"view__n,omitempty" json:"view__n,omitempty"`

	// ViewId View ID
	ViewId *[]int `form:"view_id,omitempty" json:"view_id,omitempty"`

	// ViewIdN View ID
	ViewIdN *[]int `form:"view_id__n,omitempty" json:"view_id__n,omitempty"`
}

// PluginsNetboxDnsZonesBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsZonesBulkPartialUpdate.
type PluginsNetboxDnsZonesBulkPartialUpdateJSONBody = []ZoneRequest

// PluginsNetboxDnsZonesBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsZonesBulkPartialUpdate.
type PluginsNetboxDnsZonesBulkPartialUpdateMultipartBody = []ZoneRequest

// PluginsNetboxDnsZonesBulkUpdateJSONBody defines parameters for PluginsNetboxDnsZonesBulkUpdate.
type PluginsNetboxDnsZonesBulkUpdateJSONBody = []ZoneRequest

// PluginsNetboxDnsZonesBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsZonesBulkUpdate.
type PluginsNetboxDnsZonesBulkUpdateMultipartBody = []ZoneRequest

// PluginsNetboxDnsZonetemplatesBulkDestroyJSONBody defines parameters for PluginsNetboxDnsZonetemplatesBulkDestroy.
type PluginsNetboxDnsZonetemplatesBulkDestroyJSONBody = []ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesBulkDestroyMultipartBody defines parameters for PluginsNetboxDnsZonetemplatesBulkDestroy.
type PluginsNetboxDnsZonetemplatesBulkDestroyMultipartBody = []ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesListParams defines parameters for PluginsNetboxDnsZonetemplatesList.
type PluginsNetboxDnsZonetemplatesListParams struct {
	// AdminC Administrative Contact
	AdminC *[]string `form:"admin_c,omitempty" json:"admin_c,omitempty"`

	// AdminCN Administrative Contact
	AdminCN *[]string `form:"admin_c__n,omitempty" json:"admin_c__n,omitempty"`

	// AdminCId Administrative Contact ID
	AdminCId *[]int `form:"admin_c_id,omitempty" json:"admin_c_id,omitempty"`

	// AdminCIdN Administrative Contact ID
	AdminCIdN *[]int `form:"admin_c_id__n,omitempty" json:"admin_c_id__n,omitempty"`

	// BillingC Billing Contact
	BillingC *[]string `form:"billing_c,omitempty" json:"billing_c,omitempty"`

	// BillingCN Billing Contact
	BillingCN *[]string `form:"billing_c__n,omitempty" json:"billing_c__n,omitempty"`

	// BillingCId Billing Contact ID
	BillingCId *[]int `form:"billing_c_id,omitempty" json:"billing_c_id,omitempty"`

	// BillingCIdN Billing Contact ID
	BillingCIdN      *[]int              `form:"billing_c_id__n,omitempty" json:"billing_c_id__n,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`

	// DnssecPolicy DNSSEC Policy
	DnssecPolicy *[]string `form:"dnssec_policy,omitempty" json:"dnssec_policy,omitempty"`

	// DnssecPolicyN DNSSEC Policy
	DnssecPolicyN *[]string `form:"dnssec_policy__n,omitempty" json:"dnssec_policy__n,omitempty"`

	// DnssecPolicyId DNSSEC Policy ID
	DnssecPolicyId *[]int `form:"dnssec_policy_id,omitempty" json:"dnssec_policy_id,omitempty"`

	// DnssecPolicyIdN DNSSEC Policy ID
	DnssecPolicyIdN  *[]int       `form:"dnssec_policy_id__n,omitempty" json:"dnssec_policy_id__n,omitempty"`
	Id               *[]int32     `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool        `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32     `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32     `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32     `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32     `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32     `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Nameserver Nameserver
	Nameserver *[]string `form:"nameserver,omitempty" json:"nameserver,omitempty"`

	// NameserverN Nameserver
	NameserverN *[]string `form:"nameserver__n,omitempty" json:"nameserver__n,omitempty"`

	// NameserverId Nameservers ID
	NameserverId *[]int `form:"nameserver_id,omitempty" json:"nameserver_id,omitempty"`

	// NameserverIdN Nameservers ID
	NameserverIdN *[]int `form:"nameserver_id__n,omitempty" json:"nameserver_id__n,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// RecordTemplate Record Template
	RecordTemplate *[]string `form:"record_template,omitempty" json:"record_template,omitempty"`

	// RecordTemplateN Record Template
	RecordTemplateN *[]string `form:"record_template__n,omitempty" json:"record_template__n,omitempty"`

	// RecordTemplateId Record Template ID
	RecordTemplateId *[]int `form:"record_template_id,omitempty" json:"record_template_id,omitempty"`

	// RecordTemplateIdN Record Template ID
	RecordTemplateIdN *[]int `form:"record_template_id__n,omitempty" json:"record_template_id__n,omitempty"`

	// Registrant Registrant
	Registrant *[]string `form:"registrant,omitempty" json:"registrant,omitempty"`

	// RegistrantN Registrant
	RegistrantN *[]string `form:"registrant__n,omitempty" json:"registrant__n,omitempty"`

	// RegistrantId Registrant ID
	RegistrantId *[]int `form:"registrant_id,omitempty" json:"registrant_id,omitempty"`

	// RegistrantIdN Registrant ID
	RegistrantIdN *[]int `form:"registrant_id__n,omitempty" json:"registrant_id__n,omitempty"`

	// Registrar Registrar
	Registrar *[]string `form:"registrar,omitempty" json:"registrar,omitempty"`

	// RegistrarN Registrar
	RegistrarN *[]string `form:"registrar__n,omitempty" json:"registrar__n,omitempty"`

	// RegistrarId Registrar ID
	RegistrarId *[]int `form:"registrar_id,omitempty" json:"registrar_id,omitempty"`

	// RegistrarIdN Registrar ID
	RegistrarIdN *[]int `form:"registrar_id__n,omitempty" json:"registrar_id__n,omitempty"`

	// SoaMname SOA MName
	SoaMname *[]string `form:"soa_mname,omitempty" json:"soa_mname,omitempty"`

	// SoaMnameN SOA MName
	SoaMnameN *[]string `form:"soa_mname__n,omitempty" json:"soa_mname__n,omitempty"`

	// SoaMnameId SOA MName ID
	SoaMnameId *[]int `form:"soa_mname_id,omitempty" json:"soa_mname_id,omitempty"`

	// SoaMnameIdN SOA MName ID
	SoaMnameIdN   *[]int    `form:"soa_mname_id__n,omitempty" json:"soa_mname_id__n,omitempty"`
	SoaRname      *[]string `form:"soa_rname,omitempty" json:"soa_rname,omitempty"`
	SoaRnameEmpty *bool     `form:"soa_rname__empty,omitempty" json:"soa_rname__empty,omitempty"`
	SoaRnameIc    *[]string `form:"soa_rname__ic,omitempty" json:"soa_rname__ic,omitempty"`
	SoaRnameIe    *[]string `form:"soa_rname__ie,omitempty" json:"soa_rname__ie,omitempty"`
	SoaRnameIew   *[]string `form:"soa_rname__iew,omitempty" json:"soa_rname__iew,omitempty"`
	SoaRnameIsw   *[]string `form:"soa_rname__isw,omitempty" json:"soa_rname__isw,omitempty"`
	SoaRnameN     *[]string `form:"soa_rname__n,omitempty" json:"soa_rname__n,omitempty"`
	SoaRnameNic   *[]string `form:"soa_rname__nic,omitempty" json:"soa_rname__nic,omitempty"`
	SoaRnameNie   *[]string `form:"soa_rname__nie,omitempty" json:"soa_rname__nie,omitempty"`
	SoaRnameNiew  *[]string `form:"soa_rname__niew,omitempty" json:"soa_rname__niew,omitempty"`
	SoaRnameNisw  *[]string `form:"soa_rname__nisw,omitempty" json:"soa_rname__nisw,omitempty"`
	Tag           *[]string `form:"tag,omitempty" json:"tag,omitempty"`
	TagN          *[]string `form:"tag__n,omitempty" json:"tag__n,omitempty"`

	// TechC Technical Contact
	TechC *[]string `form:"tech_c,omitempty" json:"tech_c,omitempty"`

	// TechCN Technical Contact
	TechCN *[]string `form:"tech_c__n,omitempty" json:"tech_c__n,omitempty"`

	// TechCId Technical Contact ID
	TechCId *[]int `form:"tech_c_id,omitempty" json:"tech_c_id,omitempty"`

	// TechCIdN Technical Contact ID
	TechCIdN *[]int `form:"tech_c_id__n,omitempty" json:"tech_c_id__n,omitempty"`

	// Tenant Tenant (slug)
	Tenant *[]string `form:"tenant,omitempty" json:"tenant,omitempty"`

	// TenantN Tenant (slug)
	TenantN        *[]string `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	TenantGroup    *[]string `form:"tenant_group,omitempty" json:"tenant_group,omitempty"`
	TenantGroupN   *[]string `form:"tenant_group__n,omitempty" json:"tenant_group__n,omitempty"`
	TenantGroupId  *[]string `form:"tenant_group_id,omitempty" json:"tenant_group_id,omitempty"`
	TenantGroupIdN *[]string `form:"tenant_group_id__n,omitempty" json:"tenant_group_id__n,omitempty"`

	// TenantId Tenant (ID)
	TenantId *[]int `form:"tenant_id,omitempty" json:"tenant_id,omitempty"`

	// TenantIdN Tenant (ID)
	TenantIdN        *[]int              `form:"tenant_id__n,omitempty" json:"tenant_id__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONBody defines parameters for PluginsNetboxDnsZonetemplatesBulkPartialUpdate.
type PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONBody = []ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxDnsZonetemplatesBulkPartialUpdate.
type PluginsNetboxDnsZonetemplatesBulkPartialUpdateMultipartBody = []ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesBulkUpdateJSONBody defines parameters for PluginsNetboxDnsZonetemplatesBulkUpdate.
type PluginsNetboxDnsZonetemplatesBulkUpdateJSONBody = []ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesBulkUpdateMultipartBody defines parameters for PluginsNetboxDnsZonetemplatesBulkUpdate.
type PluginsNetboxDnsZonetemplatesBulkUpdateMultipartBody = []ZoneTemplateRequest

// PluginsNetboxdhcpProfileBulkDestroyJSONBody defines parameters for PluginsNetboxdhcpProfileBulkDestroy.
type PluginsNetboxdhcpProfileBulkDestroyJSONBody = []ProfileRequest

// PluginsNetboxdhcpProfileBulkDestroyMultipartBody defines parameters for PluginsNetboxdhcpProfileBulkDestroy.
type PluginsNetboxdhcpProfileBulkDestroyMultipartBody = []ProfileRequest

// PluginsNetboxdhcpProfileListParams defines parameters for PluginsNetboxdhcpProfileList.
type PluginsNetboxdhcpProfileListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	Text             *string             `form:"text,omitempty" json:"text,omitempty"`
	TextIc           *string             `form:"text__ic,omitempty" json:"text__ic,omitempty"`
	TextIe           *string             `form:"text__ie,omitempty" json:"text__ie,omitempty"`
	TextIew          *string             `form:"text__iew,omitempty" json:"text__iew,omitempty"`
	TextIsw          *string             `form:"text__isw,omitempty" json:"text__isw,omitempty"`
	TextN            *string             `form:"text__n,omitempty" json:"text__n,omitempty"`
	TextNic          *string             `form:"text__nic,omitempty" json:"text__nic,omitempty"`
	TextNie          *string             `form:"text__nie,omitempty" json:"text__nie,omitempty"`
	TextNiew         *string             `form:"text__niew,omitempty" json:"text__niew,omitempty"`
	TextNisw         *string             `form:"text__nisw,omitempty" json:"text__nisw,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsNetboxdhcpProfileBulkPartialUpdateJSONBody defines parameters for PluginsNetboxdhcpProfileBulkPartialUpdate.
type PluginsNetboxdhcpProfileBulkPartialUpdateJSONBody = []ProfileRequest

// PluginsNetboxdhcpProfileBulkPartialUpdateMultipartBody defines parameters for PluginsNetboxdhcpProfileBulkPartialUpdate.
type PluginsNetboxdhcpProfileBulkPartialUpdateMultipartBody = []ProfileRequest

// PluginsNetboxdhcpProfileBulkUpdateJSONBody defines parameters for PluginsNetboxdhcpProfileBulkUpdate.
type PluginsNetboxdhcpProfileBulkUpdateJSONBody = []ProfileRequest

// PluginsNetboxdhcpProfileBulkUpdateMultipartBody defines parameters for PluginsNetboxdhcpProfileBulkUpdate.
type PluginsNetboxdhcpProfileBulkUpdateMultipartBody = []ProfileRequest

// PluginsNetboxDnsContactsBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsContactsBulkDestroy for application/json ContentType.
type PluginsNetboxDnsContactsBulkDestroyJSONRequestBody = PluginsNetboxDnsContactsBulkDestroyJSONBody

// PluginsNetboxDnsContactsBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsContactsBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsContactsBulkDestroyMultipartRequestBody = PluginsNetboxDnsContactsBulkDestroyMultipartBody

// PluginsNetboxDnsContactsBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsContactsBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsContactsBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsContactsBulkPartialUpdateJSONBody

// PluginsNetboxDnsContactsBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsContactsBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsContactsBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsContactsBulkPartialUpdateMultipartBody

// PluginsNetboxDnsContactsCreateJSONRequestBody defines body for PluginsNetboxDnsContactsCreate for application/json ContentType.
type PluginsNetboxDnsContactsCreateJSONRequestBody = RegistrationContactRequest

// PluginsNetboxDnsContactsCreateMultipartRequestBody defines body for PluginsNetboxDnsContactsCreate for multipart/form-data ContentType.
type PluginsNetboxDnsContactsCreateMultipartRequestBody = RegistrationContactRequest

// PluginsNetboxDnsContactsBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsContactsBulkUpdate for application/json ContentType.
type PluginsNetboxDnsContactsBulkUpdateJSONRequestBody = PluginsNetboxDnsContactsBulkUpdateJSONBody

// PluginsNetboxDnsContactsBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsContactsBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsContactsBulkUpdateMultipartRequestBody = PluginsNetboxDnsContactsBulkUpdateMultipartBody

// PluginsNetboxDnsContactsPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsContactsPartialUpdate for application/json ContentType.
type PluginsNetboxDnsContactsPartialUpdateJSONRequestBody = PatchedRegistrationContactRequest

// PluginsNetboxDnsContactsPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsContactsPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsContactsPartialUpdateMultipartRequestBody = PatchedRegistrationContactRequest

// PluginsNetboxDnsContactsUpdateJSONRequestBody defines body for PluginsNetboxDnsContactsUpdate for application/json ContentType.
type PluginsNetboxDnsContactsUpdateJSONRequestBody = RegistrationContactRequest

// PluginsNetboxDnsContactsUpdateMultipartRequestBody defines body for PluginsNetboxDnsContactsUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsContactsUpdateMultipartRequestBody = RegistrationContactRequest

// PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesBulkDestroy for application/json ContentType.
type PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONRequestBody = PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONBody

// PluginsNetboxDnsDnsseckeytemplatesBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsDnsseckeytemplatesBulkDestroyMultipartRequestBody = PluginsNetboxDnsDnsseckeytemplatesBulkDestroyMultipartBody

// PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONBody

// PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateMultipartBody

// PluginsNetboxDnsDnsseckeytemplatesCreateJSONRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesCreate for application/json ContentType.
type PluginsNetboxDnsDnsseckeytemplatesCreateJSONRequestBody = DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesCreateMultipartRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesCreate for multipart/form-data ContentType.
type PluginsNetboxDnsDnsseckeytemplatesCreateMultipartRequestBody = DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesBulkUpdate for application/json ContentType.
type PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONRequestBody = PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONBody

// PluginsNetboxDnsDnsseckeytemplatesBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnsseckeytemplatesBulkUpdateMultipartRequestBody = PluginsNetboxDnsDnsseckeytemplatesBulkUpdateMultipartBody

// PluginsNetboxDnsDnsseckeytemplatesPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesPartialUpdate for application/json ContentType.
type PluginsNetboxDnsDnsseckeytemplatesPartialUpdateJSONRequestBody = PatchedDNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnsseckeytemplatesPartialUpdateMultipartRequestBody = PatchedDNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesUpdateJSONRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesUpdate for application/json ContentType.
type PluginsNetboxDnsDnsseckeytemplatesUpdateJSONRequestBody = DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnsseckeytemplatesUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnsseckeytemplatesUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnsseckeytemplatesUpdateMultipartRequestBody = DNSSECKeyTemplateRequest

// PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsDnssecpoliciesBulkDestroy for application/json ContentType.
type PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONRequestBody = PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONBody

// PluginsNetboxDnsDnssecpoliciesBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsDnssecpoliciesBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsDnssecpoliciesBulkDestroyMultipartRequestBody = PluginsNetboxDnsDnssecpoliciesBulkDestroyMultipartBody

// PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONBody

// PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateMultipartBody

// PluginsNetboxDnsDnssecpoliciesCreateJSONRequestBody defines body for PluginsNetboxDnsDnssecpoliciesCreate for application/json ContentType.
type PluginsNetboxDnsDnssecpoliciesCreateJSONRequestBody = DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesCreateMultipartRequestBody defines body for PluginsNetboxDnsDnssecpoliciesCreate for multipart/form-data ContentType.
type PluginsNetboxDnsDnssecpoliciesCreateMultipartRequestBody = DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsDnssecpoliciesBulkUpdate for application/json ContentType.
type PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONRequestBody = PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONBody

// PluginsNetboxDnsDnssecpoliciesBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnssecpoliciesBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnssecpoliciesBulkUpdateMultipartRequestBody = PluginsNetboxDnsDnssecpoliciesBulkUpdateMultipartBody

// PluginsNetboxDnsDnssecpoliciesPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsDnssecpoliciesPartialUpdate for application/json ContentType.
type PluginsNetboxDnsDnssecpoliciesPartialUpdateJSONRequestBody = PatchedDNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnssecpoliciesPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnssecpoliciesPartialUpdateMultipartRequestBody = PatchedDNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesUpdateJSONRequestBody defines body for PluginsNetboxDnsDnssecpoliciesUpdate for application/json ContentType.
type PluginsNetboxDnsDnssecpoliciesUpdateJSONRequestBody = DNSSECPolicyRequest

// PluginsNetboxDnsDnssecpoliciesUpdateMultipartRequestBody defines body for PluginsNetboxDnsDnssecpoliciesUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsDnssecpoliciesUpdateMultipartRequestBody = DNSSECPolicyRequest

// PluginsNetboxDnsNameserversBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsNameserversBulkDestroy for application/json ContentType.
type PluginsNetboxDnsNameserversBulkDestroyJSONRequestBody = PluginsNetboxDnsNameserversBulkDestroyJSONBody

// PluginsNetboxDnsNameserversBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsNameserversBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsNameserversBulkDestroyMultipartRequestBody = PluginsNetboxDnsNameserversBulkDestroyMultipartBody

// PluginsNetboxDnsNameserversBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsNameserversBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsNameserversBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsNameserversBulkPartialUpdateJSONBody

// PluginsNetboxDnsNameserversBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsNameserversBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsNameserversBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsNameserversBulkPartialUpdateMultipartBody

// PluginsNetboxDnsNameserversCreateJSONRequestBody defines body for PluginsNetboxDnsNameserversCreate for application/json ContentType.
type PluginsNetboxDnsNameserversCreateJSONRequestBody = NameServerRequest

// PluginsNetboxDnsNameserversCreateMultipartRequestBody defines body for PluginsNetboxDnsNameserversCreate for multipart/form-data ContentType.
type PluginsNetboxDnsNameserversCreateMultipartRequestBody = NameServerRequest

// PluginsNetboxDnsNameserversBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsNameserversBulkUpdate for application/json ContentType.
type PluginsNetboxDnsNameserversBulkUpdateJSONRequestBody = PluginsNetboxDnsNameserversBulkUpdateJSONBody

// PluginsNetboxDnsNameserversBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsNameserversBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsNameserversBulkUpdateMultipartRequestBody = PluginsNetboxDnsNameserversBulkUpdateMultipartBody

// PluginsNetboxDnsNameserversPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsNameserversPartialUpdate for application/json ContentType.
type PluginsNetboxDnsNameserversPartialUpdateJSONRequestBody = PatchedNameServerRequest

// PluginsNetboxDnsNameserversPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsNameserversPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsNameserversPartialUpdateMultipartRequestBody = PatchedNameServerRequest

// PluginsNetboxDnsNameserversUpdateJSONRequestBody defines body for PluginsNetboxDnsNameserversUpdate for application/json ContentType.
type PluginsNetboxDnsNameserversUpdateJSONRequestBody = NameServerRequest

// PluginsNetboxDnsNameserversUpdateMultipartRequestBody defines body for PluginsNetboxDnsNameserversUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsNameserversUpdateMultipartRequestBody = NameServerRequest

// PluginsNetboxDnsPrefixesBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsPrefixesBulkDestroy for application/json ContentType.
type PluginsNetboxDnsPrefixesBulkDestroyJSONRequestBody = PluginsNetboxDnsPrefixesBulkDestroyJSONBody

// PluginsNetboxDnsPrefixesBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsPrefixesBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsPrefixesBulkDestroyMultipartRequestBody = PluginsNetboxDnsPrefixesBulkDestroyMultipartBody

// PluginsNetboxDnsPrefixesBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsPrefixesBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsPrefixesBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsPrefixesBulkPartialUpdateJSONBody

// PluginsNetboxDnsPrefixesBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsPrefixesBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsPrefixesBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsPrefixesBulkPartialUpdateMultipartBody

// PluginsNetboxDnsPrefixesCreateJSONRequestBody defines body for PluginsNetboxDnsPrefixesCreate for application/json ContentType.
type PluginsNetboxDnsPrefixesCreateJSONRequestBody = WritablePrefixRequest

// PluginsNetboxDnsPrefixesCreateMultipartRequestBody defines body for PluginsNetboxDnsPrefixesCreate for multipart/form-data ContentType.
type PluginsNetboxDnsPrefixesCreateMultipartRequestBody = WritablePrefixRequest

// PluginsNetboxDnsPrefixesBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsPrefixesBulkUpdate for application/json ContentType.
type PluginsNetboxDnsPrefixesBulkUpdateJSONRequestBody = PluginsNetboxDnsPrefixesBulkUpdateJSONBody

// PluginsNetboxDnsPrefixesBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsPrefixesBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsPrefixesBulkUpdateMultipartRequestBody = PluginsNetboxDnsPrefixesBulkUpdateMultipartBody

// PluginsNetboxDnsPrefixesPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsPrefixesPartialUpdate for application/json ContentType.
type PluginsNetboxDnsPrefixesPartialUpdateJSONRequestBody = PatchedWritablePrefixRequest

// PluginsNetboxDnsPrefixesPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsPrefixesPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsPrefixesPartialUpdateMultipartRequestBody = PatchedWritablePrefixRequest

// PluginsNetboxDnsPrefixesUpdateJSONRequestBody defines body for PluginsNetboxDnsPrefixesUpdate for application/json ContentType.
type PluginsNetboxDnsPrefixesUpdateJSONRequestBody = WritablePrefixRequest

// PluginsNetboxDnsPrefixesUpdateMultipartRequestBody defines body for PluginsNetboxDnsPrefixesUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsPrefixesUpdateMultipartRequestBody = WritablePrefixRequest

// PluginsNetboxDnsRecordsBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsRecordsBulkDestroy for application/json ContentType.
type PluginsNetboxDnsRecordsBulkDestroyJSONRequestBody = PluginsNetboxDnsRecordsBulkDestroyJSONBody

// PluginsNetboxDnsRecordsBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsRecordsBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsRecordsBulkDestroyMultipartRequestBody = PluginsNetboxDnsRecordsBulkDestroyMultipartBody

// PluginsNetboxDnsRecordsBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordsBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsRecordsBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsRecordsBulkPartialUpdateJSONBody

// PluginsNetboxDnsRecordsBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordsBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordsBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsRecordsBulkPartialUpdateMultipartBody

// PluginsNetboxDnsRecordsCreateJSONRequestBody defines body for PluginsNetboxDnsRecordsCreate for application/json ContentType.
type PluginsNetboxDnsRecordsCreateJSONRequestBody = WritableRecordRequest

// PluginsNetboxDnsRecordsCreateMultipartRequestBody defines body for PluginsNetboxDnsRecordsCreate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordsCreateMultipartRequestBody = WritableRecordRequest

// PluginsNetboxDnsRecordsBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordsBulkUpdate for application/json ContentType.
type PluginsNetboxDnsRecordsBulkUpdateJSONRequestBody = PluginsNetboxDnsRecordsBulkUpdateJSONBody

// PluginsNetboxDnsRecordsBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordsBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordsBulkUpdateMultipartRequestBody = PluginsNetboxDnsRecordsBulkUpdateMultipartBody

// PluginsNetboxDnsRecordsPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordsPartialUpdate for application/json ContentType.
type PluginsNetboxDnsRecordsPartialUpdateJSONRequestBody = PatchedWritableRecordRequest

// PluginsNetboxDnsRecordsPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordsPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordsPartialUpdateMultipartRequestBody = PatchedWritableRecordRequest

// PluginsNetboxDnsRecordsUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordsUpdate for application/json ContentType.
type PluginsNetboxDnsRecordsUpdateJSONRequestBody = WritableRecordRequest

// PluginsNetboxDnsRecordsUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordsUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordsUpdateMultipartRequestBody = WritableRecordRequest

// PluginsNetboxDnsRecordtemplatesBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsRecordtemplatesBulkDestroy for application/json ContentType.
type PluginsNetboxDnsRecordtemplatesBulkDestroyJSONRequestBody = PluginsNetboxDnsRecordtemplatesBulkDestroyJSONBody

// PluginsNetboxDnsRecordtemplatesBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsRecordtemplatesBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsRecordtemplatesBulkDestroyMultipartRequestBody = PluginsNetboxDnsRecordtemplatesBulkDestroyMultipartBody

// PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordtemplatesBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONBody

// PluginsNetboxDnsRecordtemplatesBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordtemplatesBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordtemplatesBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsRecordtemplatesBulkPartialUpdateMultipartBody

// PluginsNetboxDnsRecordtemplatesCreateJSONRequestBody defines body for PluginsNetboxDnsRecordtemplatesCreate for application/json ContentType.
type PluginsNetboxDnsRecordtemplatesCreateJSONRequestBody = RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesCreateMultipartRequestBody defines body for PluginsNetboxDnsRecordtemplatesCreate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordtemplatesCreateMultipartRequestBody = RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordtemplatesBulkUpdate for application/json ContentType.
type PluginsNetboxDnsRecordtemplatesBulkUpdateJSONRequestBody = PluginsNetboxDnsRecordtemplatesBulkUpdateJSONBody

// PluginsNetboxDnsRecordtemplatesBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordtemplatesBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordtemplatesBulkUpdateMultipartRequestBody = PluginsNetboxDnsRecordtemplatesBulkUpdateMultipartBody

// PluginsNetboxDnsRecordtemplatesPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordtemplatesPartialUpdate for application/json ContentType.
type PluginsNetboxDnsRecordtemplatesPartialUpdateJSONRequestBody = PatchedRecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordtemplatesPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordtemplatesPartialUpdateMultipartRequestBody = PatchedRecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesUpdateJSONRequestBody defines body for PluginsNetboxDnsRecordtemplatesUpdate for application/json ContentType.
type PluginsNetboxDnsRecordtemplatesUpdateJSONRequestBody = RecordTemplateRequest

// PluginsNetboxDnsRecordtemplatesUpdateMultipartRequestBody defines body for PluginsNetboxDnsRecordtemplatesUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRecordtemplatesUpdateMultipartRequestBody = RecordTemplateRequest

// PluginsNetboxDnsRegistrarsBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsRegistrarsBulkDestroy for application/json ContentType.
type PluginsNetboxDnsRegistrarsBulkDestroyJSONRequestBody = PluginsNetboxDnsRegistrarsBulkDestroyJSONBody

// PluginsNetboxDnsRegistrarsBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsRegistrarsBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsRegistrarsBulkDestroyMultipartRequestBody = PluginsNetboxDnsRegistrarsBulkDestroyMultipartBody

// PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsRegistrarsBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONBody

// PluginsNetboxDnsRegistrarsBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsRegistrarsBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRegistrarsBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsRegistrarsBulkPartialUpdateMultipartBody

// PluginsNetboxDnsRegistrarsCreateJSONRequestBody defines body for PluginsNetboxDnsRegistrarsCreate for application/json ContentType.
type PluginsNetboxDnsRegistrarsCreateJSONRequestBody = RegistrarRequest

// PluginsNetboxDnsRegistrarsCreateMultipartRequestBody defines body for PluginsNetboxDnsRegistrarsCreate for multipart/form-data ContentType.
type PluginsNetboxDnsRegistrarsCreateMultipartRequestBody = RegistrarRequest

// PluginsNetboxDnsRegistrarsBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsRegistrarsBulkUpdate for application/json ContentType.
type PluginsNetboxDnsRegistrarsBulkUpdateJSONRequestBody = PluginsNetboxDnsRegistrarsBulkUpdateJSONBody

// PluginsNetboxDnsRegistrarsBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsRegistrarsBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRegistrarsBulkUpdateMultipartRequestBody = PluginsNetboxDnsRegistrarsBulkUpdateMultipartBody

// PluginsNetboxDnsRegistrarsPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsRegistrarsPartialUpdate for application/json ContentType.
type PluginsNetboxDnsRegistrarsPartialUpdateJSONRequestBody = PatchedRegistrarRequest

// PluginsNetboxDnsRegistrarsPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsRegistrarsPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRegistrarsPartialUpdateMultipartRequestBody = PatchedRegistrarRequest

// PluginsNetboxDnsRegistrarsUpdateJSONRequestBody defines body for PluginsNetboxDnsRegistrarsUpdate for application/json ContentType.
type PluginsNetboxDnsRegistrarsUpdateJSONRequestBody = RegistrarRequest

// PluginsNetboxDnsRegistrarsUpdateMultipartRequestBody defines body for PluginsNetboxDnsRegistrarsUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsRegistrarsUpdateMultipartRequestBody = RegistrarRequest

// PluginsNetboxDnsViewsBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsViewsBulkDestroy for application/json ContentType.
type PluginsNetboxDnsViewsBulkDestroyJSONRequestBody = PluginsNetboxDnsViewsBulkDestroyJSONBody

// PluginsNetboxDnsViewsBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsViewsBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsViewsBulkDestroyMultipartRequestBody = PluginsNetboxDnsViewsBulkDestroyMultipartBody

// PluginsNetboxDnsViewsBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsViewsBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsViewsBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsViewsBulkPartialUpdateJSONBody

// PluginsNetboxDnsViewsBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsViewsBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsViewsBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsViewsBulkPartialUpdateMultipartBody

// PluginsNetboxDnsViewsCreateJSONRequestBody defines body for PluginsNetboxDnsViewsCreate for application/json ContentType.
type PluginsNetboxDnsViewsCreateJSONRequestBody = ViewRequest

// PluginsNetboxDnsViewsCreateMultipartRequestBody defines body for PluginsNetboxDnsViewsCreate for multipart/form-data ContentType.
type PluginsNetboxDnsViewsCreateMultipartRequestBody = ViewRequest

// PluginsNetboxDnsViewsBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsViewsBulkUpdate for application/json ContentType.
type PluginsNetboxDnsViewsBulkUpdateJSONRequestBody = PluginsNetboxDnsViewsBulkUpdateJSONBody

// PluginsNetboxDnsViewsBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsViewsBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsViewsBulkUpdateMultipartRequestBody = PluginsNetboxDnsViewsBulkUpdateMultipartBody

// PluginsNetboxDnsViewsPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsViewsPartialUpdate for application/json ContentType.
type PluginsNetboxDnsViewsPartialUpdateJSONRequestBody = PatchedViewRequest

// PluginsNetboxDnsViewsPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsViewsPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsViewsPartialUpdateMultipartRequestBody = PatchedViewRequest

// PluginsNetboxDnsViewsUpdateJSONRequestBody defines body for PluginsNetboxDnsViewsUpdate for application/json ContentType.
type PluginsNetboxDnsViewsUpdateJSONRequestBody = ViewRequest

// PluginsNetboxDnsViewsUpdateMultipartRequestBody defines body for PluginsNetboxDnsViewsUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsViewsUpdateMultipartRequestBody = ViewRequest

// PluginsNetboxDnsZonesBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsZonesBulkDestroy for application/json ContentType.
type PluginsNetboxDnsZonesBulkDestroyJSONRequestBody = PluginsNetboxDnsZonesBulkDestroyJSONBody

// PluginsNetboxDnsZonesBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsZonesBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsZonesBulkDestroyMultipartRequestBody = PluginsNetboxDnsZonesBulkDestroyMultipartBody

// PluginsNetboxDnsZonesBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsZonesBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsZonesBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsZonesBulkPartialUpdateJSONBody

// PluginsNetboxDnsZonesBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonesBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonesBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsZonesBulkPartialUpdateMultipartBody

// PluginsNetboxDnsZonesCreateJSONRequestBody defines body for PluginsNetboxDnsZonesCreate for application/json ContentType.
type PluginsNetboxDnsZonesCreateJSONRequestBody = WritableZoneRequest

// PluginsNetboxDnsZonesCreateMultipartRequestBody defines body for PluginsNetboxDnsZonesCreate for multipart/form-data ContentType.
type PluginsNetboxDnsZonesCreateMultipartRequestBody = WritableZoneRequest

// PluginsNetboxDnsZonesBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsZonesBulkUpdate for application/json ContentType.
type PluginsNetboxDnsZonesBulkUpdateJSONRequestBody = PluginsNetboxDnsZonesBulkUpdateJSONBody

// PluginsNetboxDnsZonesBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonesBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonesBulkUpdateMultipartRequestBody = PluginsNetboxDnsZonesBulkUpdateMultipartBody

// PluginsNetboxDnsZonesPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsZonesPartialUpdate for application/json ContentType.
type PluginsNetboxDnsZonesPartialUpdateJSONRequestBody = PatchedWritableZoneRequest

// PluginsNetboxDnsZonesPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonesPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonesPartialUpdateMultipartRequestBody = PatchedWritableZoneRequest

// PluginsNetboxDnsZonesUpdateJSONRequestBody defines body for PluginsNetboxDnsZonesUpdate for application/json ContentType.
type PluginsNetboxDnsZonesUpdateJSONRequestBody = WritableZoneRequest

// PluginsNetboxDnsZonesUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonesUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonesUpdateMultipartRequestBody = WritableZoneRequest

// PluginsNetboxDnsZonetemplatesBulkDestroyJSONRequestBody defines body for PluginsNetboxDnsZonetemplatesBulkDestroy for application/json ContentType.
type PluginsNetboxDnsZonetemplatesBulkDestroyJSONRequestBody = PluginsNetboxDnsZonetemplatesBulkDestroyJSONBody

// PluginsNetboxDnsZonetemplatesBulkDestroyMultipartRequestBody defines body for PluginsNetboxDnsZonetemplatesBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxDnsZonetemplatesBulkDestroyMultipartRequestBody = PluginsNetboxDnsZonetemplatesBulkDestroyMultipartBody

// PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsZonetemplatesBulkPartialUpdate for application/json ContentType.
type PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONRequestBody = PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONBody

// PluginsNetboxDnsZonetemplatesBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonetemplatesBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonetemplatesBulkPartialUpdateMultipartRequestBody = PluginsNetboxDnsZonetemplatesBulkPartialUpdateMultipartBody

// PluginsNetboxDnsZonetemplatesCreateJSONRequestBody defines body for PluginsNetboxDnsZonetemplatesCreate for application/json ContentType.
type PluginsNetboxDnsZonetemplatesCreateJSONRequestBody = ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesCreateMultipartRequestBody defines body for PluginsNetboxDnsZonetemplatesCreate for multipart/form-data ContentType.
type PluginsNetboxDnsZonetemplatesCreateMultipartRequestBody = ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesBulkUpdateJSONRequestBody defines body for PluginsNetboxDnsZonetemplatesBulkUpdate for application/json ContentType.
type PluginsNetboxDnsZonetemplatesBulkUpdateJSONRequestBody = PluginsNetboxDnsZonetemplatesBulkUpdateJSONBody

// PluginsNetboxDnsZonetemplatesBulkUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonetemplatesBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonetemplatesBulkUpdateMultipartRequestBody = PluginsNetboxDnsZonetemplatesBulkUpdateMultipartBody

// PluginsNetboxDnsZonetemplatesPartialUpdateJSONRequestBody defines body for PluginsNetboxDnsZonetemplatesPartialUpdate for application/json ContentType.
type PluginsNetboxDnsZonetemplatesPartialUpdateJSONRequestBody = PatchedZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesPartialUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonetemplatesPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonetemplatesPartialUpdateMultipartRequestBody = PatchedZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesUpdateJSONRequestBody defines body for PluginsNetboxDnsZonetemplatesUpdate for application/json ContentType.
type PluginsNetboxDnsZonetemplatesUpdateJSONRequestBody = ZoneTemplateRequest

// PluginsNetboxDnsZonetemplatesUpdateMultipartRequestBody defines body for PluginsNetboxDnsZonetemplatesUpdate for multipart/form-data ContentType.
type PluginsNetboxDnsZonetemplatesUpdateMultipartRequestBody = ZoneTemplateRequest

// PluginsNetboxdhcpProfileBulkDestroyJSONRequestBody defines body for PluginsNetboxdhcpProfileBulkDestroy for application/json ContentType.
type PluginsNetboxdhcpProfileBulkDestroyJSONRequestBody = PluginsNetboxdhcpProfileBulkDestroyJSONBody

// PluginsNetboxdhcpProfileBulkDestroyMultipartRequestBody defines body for PluginsNetboxdhcpProfileBulkDestroy for multipart/form-data ContentType.
type PluginsNetboxdhcpProfileBulkDestroyMultipartRequestBody = PluginsNetboxdhcpProfileBulkDestroyMultipartBody

// PluginsNetboxdhcpProfileBulkPartialUpdateJSONRequestBody defines body for PluginsNetboxdhcpProfileBulkPartialUpdate for application/json ContentType.
type PluginsNetboxdhcpProfileBulkPartialUpdateJSONRequestBody = PluginsNetboxdhcpProfileBulkPartialUpdateJSONBody

// PluginsNetboxdhcpProfileBulkPartialUpdateMultipartRequestBody defines body for PluginsNetboxdhcpProfileBulkPartialUpdate for multipart/form-data ContentType.
type PluginsNetboxdhcpProfileBulkPartialUpdateMultipartRequestBody = PluginsNetboxdhcpProfileBulkPartialUpdateMultipartBody

// PluginsNetboxdhcpProfileCreateJSONRequestBody defines body for PluginsNetboxdhcpProfileCreate for application/json ContentType.
type PluginsNetboxdhcpProfileCreateJSONRequestBody = ProfileRequest

// PluginsNetboxdhcpProfileCreateMultipartRequestBody defines body for PluginsNetboxdhcpProfileCreate for multipart/form-data ContentType.
type PluginsNetboxdhcpProfileCreateMultipartRequestBody = ProfileRequest

// PluginsNetboxdhcpProfileBulkUpdateJSONRequestBody defines body for PluginsNetboxdhcpProfileBulkUpdate for application/json ContentType.
type PluginsNetboxdhcpProfileBulkUpdateJSONRequestBody = PluginsNetboxdhcpProfileBulkUpdateJSONBody

// PluginsNetboxdhcpProfileBulkUpdateMultipartRequestBody defines body for PluginsNetboxdhcpProfileBulkUpdate for multipart/form-data ContentType.
type PluginsNetboxdhcpProfileBulkUpdateMultipartRequestBody = PluginsNetboxdhcpProfileBulkUpdateMultipartBody

// PluginsNetboxdhcpProfilePartialUpdateJSONRequestBody defines body for PluginsNetboxdhcpProfilePartialUpdate for application/json ContentType.
type PluginsNetboxdhcpProfilePartialUpdateJSONRequestBody = PatchedProfileRequest

// PluginsNetboxdhcpProfilePartialUpdateMultipartRequestBody defines body for PluginsNetboxdhcpProfilePartialUpdate for multipart/form-data ContentType.
type PluginsNetboxdhcpProfilePartialUpdateMultipartRequestBody = PatchedProfileRequest

// PluginsNetboxdhcpProfileUpdateJSONRequestBody defines body for PluginsNetboxdhcpProfileUpdate for application/json ContentType.
type PluginsNetboxdhcpProfileUpdateJSONRequestBody = ProfileRequest

// PluginsNetboxdhcpProfileUpdateMultipartRequestBody defines body for PluginsNetboxdhcpProfileUpdate for multipart/form-data ContentType.
type PluginsNetboxdhcpProfileUpdateMultipartRequestBody = ProfileRequest

// AsPatchedRecordTemplateRequestTenant0 returns the union data inside the PatchedRecordTemplateRequest_Tenant as a PatchedRecordTemplateRequestTenant0
func (t PatchedRecordTemplateRequest_Tenant) AsPatchedRecordTemplateRequestTenant0() (PatchedRecordTemplateRequestTenant0, error) {
	var body PatchedRecordTemplateRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedRecordTemplateRequestTenant0 overwrites any union data inside the PatchedRecordTemplateRequest_Tenant as the provided PatchedRecordTemplateRequestTenant0
func (t *PatchedRecordTemplateRequest_Tenant) FromPatchedRecordTemplateRequestTenant0(v PatchedRecordTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedRecordTemplateRequestTenant0 performs a merge with any union data inside the PatchedRecordTemplateRequest_Tenant, using the provided PatchedRecordTemplateRequestTenant0
func (t *PatchedRecordTemplateRequest_Tenant) MergePatchedRecordTemplateRequestTenant0(v PatchedRecordTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedRecordTemplateRequestTenant1 returns the union data inside the PatchedRecordTemplateRequest_Tenant as a PatchedRecordTemplateRequestTenant1
func (t PatchedRecordTemplateRequest_Tenant) AsPatchedRecordTemplateRequestTenant1() (PatchedRecordTemplateRequestTenant1, error) {
	var body PatchedRecordTemplateRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedRecordTemplateRequestTenant1 overwrites any union data inside the PatchedRecordTemplateRequest_Tenant as the provided PatchedRecordTemplateRequestTenant1
func (t *PatchedRecordTemplateRequest_Tenant) FromPatchedRecordTemplateRequestTenant1(v PatchedRecordTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedRecordTemplateRequestTenant1 performs a merge with any union data inside the PatchedRecordTemplateRequest_Tenant, using the provided PatchedRecordTemplateRequestTenant1
func (t *PatchedRecordTemplateRequest_Tenant) MergePatchedRecordTemplateRequestTenant1(v PatchedRecordTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedRecordTemplateRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedRecordTemplateRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedViewRequestTenant0 returns the union data inside the PatchedViewRequest_Tenant as a PatchedViewRequestTenant0
func (t PatchedViewRequest_Tenant) AsPatchedViewRequestTenant0() (PatchedViewRequestTenant0, error) {
	var body PatchedViewRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedViewRequestTenant0 overwrites any union data inside the PatchedViewRequest_Tenant as the provided PatchedViewRequestTenant0
func (t *PatchedViewRequest_Tenant) FromPatchedViewRequestTenant0(v PatchedViewRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedViewRequestTenant0 performs a merge with any union data inside the PatchedViewRequest_Tenant, using the provided PatchedViewRequestTenant0
func (t *PatchedViewRequest_Tenant) MergePatchedViewRequestTenant0(v PatchedViewRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedViewRequestTenant1 returns the union data inside the PatchedViewRequest_Tenant as a PatchedViewRequestTenant1
func (t PatchedViewRequest_Tenant) AsPatchedViewRequestTenant1() (PatchedViewRequestTenant1, error) {
	var body PatchedViewRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedViewRequestTenant1 overwrites any union data inside the PatchedViewRequest_Tenant as the provided PatchedViewRequestTenant1
func (t *PatchedViewRequest_Tenant) FromPatchedViewRequestTenant1(v PatchedViewRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedViewRequestTenant1 performs a merge with any union data inside the PatchedViewRequest_Tenant, using the provided PatchedViewRequestTenant1
func (t *PatchedViewRequest_Tenant) MergePatchedViewRequestTenant1(v PatchedViewRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedViewRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedViewRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritablePrefixRequestRole0 returns the union data inside the PatchedWritablePrefixRequest_Role as a PatchedWritablePrefixRequestRole0
func (t PatchedWritablePrefixRequest_Role) AsPatchedWritablePrefixRequestRole0() (PatchedWritablePrefixRequestRole0, error) {
	var body PatchedWritablePrefixRequestRole0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestRole0 overwrites any union data inside the PatchedWritablePrefixRequest_Role as the provided PatchedWritablePrefixRequestRole0
func (t *PatchedWritablePrefixRequest_Role) FromPatchedWritablePrefixRequestRole0(v PatchedWritablePrefixRequestRole0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestRole0 performs a merge with any union data inside the PatchedWritablePrefixRequest_Role, using the provided PatchedWritablePrefixRequestRole0
func (t *PatchedWritablePrefixRequest_Role) MergePatchedWritablePrefixRequestRole0(v PatchedWritablePrefixRequestRole0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritablePrefixRequestRole1 returns the union data inside the PatchedWritablePrefixRequest_Role as a PatchedWritablePrefixRequestRole1
func (t PatchedWritablePrefixRequest_Role) AsPatchedWritablePrefixRequestRole1() (PatchedWritablePrefixRequestRole1, error) {
	var body PatchedWritablePrefixRequestRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestRole1 overwrites any union data inside the PatchedWritablePrefixRequest_Role as the provided PatchedWritablePrefixRequestRole1
func (t *PatchedWritablePrefixRequest_Role) FromPatchedWritablePrefixRequestRole1(v PatchedWritablePrefixRequestRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestRole1 performs a merge with any union data inside the PatchedWritablePrefixRequest_Role, using the provided PatchedWritablePrefixRequestRole1
func (t *PatchedWritablePrefixRequest_Role) MergePatchedWritablePrefixRequestRole1(v PatchedWritablePrefixRequestRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritablePrefixRequest_Role) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritablePrefixRequest_Role) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritablePrefixRequestTenant0 returns the union data inside the PatchedWritablePrefixRequest_Tenant as a PatchedWritablePrefixRequestTenant0
func (t PatchedWritablePrefixRequest_Tenant) AsPatchedWritablePrefixRequestTenant0() (PatchedWritablePrefixRequestTenant0, error) {
	var body PatchedWritablePrefixRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestTenant0 overwrites any union data inside the PatchedWritablePrefixRequest_Tenant as the provided PatchedWritablePrefixRequestTenant0
func (t *PatchedWritablePrefixRequest_Tenant) FromPatchedWritablePrefixRequestTenant0(v PatchedWritablePrefixRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestTenant0 performs a merge with any union data inside the PatchedWritablePrefixRequest_Tenant, using the provided PatchedWritablePrefixRequestTenant0
func (t *PatchedWritablePrefixRequest_Tenant) MergePatchedWritablePrefixRequestTenant0(v PatchedWritablePrefixRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritablePrefixRequestTenant1 returns the union data inside the PatchedWritablePrefixRequest_Tenant as a PatchedWritablePrefixRequestTenant1
func (t PatchedWritablePrefixRequest_Tenant) AsPatchedWritablePrefixRequestTenant1() (PatchedWritablePrefixRequestTenant1, error) {
	var body PatchedWritablePrefixRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestTenant1 overwrites any union data inside the PatchedWritablePrefixRequest_Tenant as the provided PatchedWritablePrefixRequestTenant1
func (t *PatchedWritablePrefixRequest_Tenant) FromPatchedWritablePrefixRequestTenant1(v PatchedWritablePrefixRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestTenant1 performs a merge with any union data inside the PatchedWritablePrefixRequest_Tenant, using the provided PatchedWritablePrefixRequestTenant1
func (t *PatchedWritablePrefixRequest_Tenant) MergePatchedWritablePrefixRequestTenant1(v PatchedWritablePrefixRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritablePrefixRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritablePrefixRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritablePrefixRequestVlan0 returns the union data inside the PatchedWritablePrefixRequest_Vlan as a PatchedWritablePrefixRequestVlan0
func (t PatchedWritablePrefixRequest_Vlan) AsPatchedWritablePrefixRequestVlan0() (PatchedWritablePrefixRequestVlan0, error) {
	var body PatchedWritablePrefixRequestVlan0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestVlan0 overwrites any union data inside the PatchedWritablePrefixRequest_Vlan as the provided PatchedWritablePrefixRequestVlan0
func (t *PatchedWritablePrefixRequest_Vlan) FromPatchedWritablePrefixRequestVlan0(v PatchedWritablePrefixRequestVlan0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestVlan0 performs a merge with any union data inside the PatchedWritablePrefixRequest_Vlan, using the provided PatchedWritablePrefixRequestVlan0
func (t *PatchedWritablePrefixRequest_Vlan) MergePatchedWritablePrefixRequestVlan0(v PatchedWritablePrefixRequestVlan0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritablePrefixRequestVlan1 returns the union data inside the PatchedWritablePrefixRequest_Vlan as a PatchedWritablePrefixRequestVlan1
func (t PatchedWritablePrefixRequest_Vlan) AsPatchedWritablePrefixRequestVlan1() (PatchedWritablePrefixRequestVlan1, error) {
	var body PatchedWritablePrefixRequestVlan1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestVlan1 overwrites any union data inside the PatchedWritablePrefixRequest_Vlan as the provided PatchedWritablePrefixRequestVlan1
func (t *PatchedWritablePrefixRequest_Vlan) FromPatchedWritablePrefixRequestVlan1(v PatchedWritablePrefixRequestVlan1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestVlan1 performs a merge with any union data inside the PatchedWritablePrefixRequest_Vlan, using the provided PatchedWritablePrefixRequestVlan1
func (t *PatchedWritablePrefixRequest_Vlan) MergePatchedWritablePrefixRequestVlan1(v PatchedWritablePrefixRequestVlan1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritablePrefixRequest_Vlan) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritablePrefixRequest_Vlan) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritablePrefixRequestVrf0 returns the union data inside the PatchedWritablePrefixRequest_Vrf as a PatchedWritablePrefixRequestVrf0
func (t PatchedWritablePrefixRequest_Vrf) AsPatchedWritablePrefixRequestVrf0() (PatchedWritablePrefixRequestVrf0, error) {
	var body PatchedWritablePrefixRequestVrf0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestVrf0 overwrites any union data inside the PatchedWritablePrefixRequest_Vrf as the provided PatchedWritablePrefixRequestVrf0
func (t *PatchedWritablePrefixRequest_Vrf) FromPatchedWritablePrefixRequestVrf0(v PatchedWritablePrefixRequestVrf0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestVrf0 performs a merge with any union data inside the PatchedWritablePrefixRequest_Vrf, using the provided PatchedWritablePrefixRequestVrf0
func (t *PatchedWritablePrefixRequest_Vrf) MergePatchedWritablePrefixRequestVrf0(v PatchedWritablePrefixRequestVrf0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritablePrefixRequestVrf1 returns the union data inside the PatchedWritablePrefixRequest_Vrf as a PatchedWritablePrefixRequestVrf1
func (t PatchedWritablePrefixRequest_Vrf) AsPatchedWritablePrefixRequestVrf1() (PatchedWritablePrefixRequestVrf1, error) {
	var body PatchedWritablePrefixRequestVrf1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritablePrefixRequestVrf1 overwrites any union data inside the PatchedWritablePrefixRequest_Vrf as the provided PatchedWritablePrefixRequestVrf1
func (t *PatchedWritablePrefixRequest_Vrf) FromPatchedWritablePrefixRequestVrf1(v PatchedWritablePrefixRequestVrf1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritablePrefixRequestVrf1 performs a merge with any union data inside the PatchedWritablePrefixRequest_Vrf, using the provided PatchedWritablePrefixRequestVrf1
func (t *PatchedWritablePrefixRequest_Vrf) MergePatchedWritablePrefixRequestVrf1(v PatchedWritablePrefixRequestVrf1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritablePrefixRequest_Vrf) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritablePrefixRequest_Vrf) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableRecordRequestTenant0 returns the union data inside the PatchedWritableRecordRequest_Tenant as a PatchedWritableRecordRequestTenant0
func (t PatchedWritableRecordRequest_Tenant) AsPatchedWritableRecordRequestTenant0() (PatchedWritableRecordRequestTenant0, error) {
	var body PatchedWritableRecordRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableRecordRequestTenant0 overwrites any union data inside the PatchedWritableRecordRequest_Tenant as the provided PatchedWritableRecordRequestTenant0
func (t *PatchedWritableRecordRequest_Tenant) FromPatchedWritableRecordRequestTenant0(v PatchedWritableRecordRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableRecordRequestTenant0 performs a merge with any union data inside the PatchedWritableRecordRequest_Tenant, using the provided PatchedWritableRecordRequestTenant0
func (t *PatchedWritableRecordRequest_Tenant) MergePatchedWritableRecordRequestTenant0(v PatchedWritableRecordRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableRecordRequestTenant1 returns the union data inside the PatchedWritableRecordRequest_Tenant as a PatchedWritableRecordRequestTenant1
func (t PatchedWritableRecordRequest_Tenant) AsPatchedWritableRecordRequestTenant1() (PatchedWritableRecordRequestTenant1, error) {
	var body PatchedWritableRecordRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableRecordRequestTenant1 overwrites any union data inside the PatchedWritableRecordRequest_Tenant as the provided PatchedWritableRecordRequestTenant1
func (t *PatchedWritableRecordRequest_Tenant) FromPatchedWritableRecordRequestTenant1(v PatchedWritableRecordRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableRecordRequestTenant1 performs a merge with any union data inside the PatchedWritableRecordRequest_Tenant, using the provided PatchedWritableRecordRequestTenant1
func (t *PatchedWritableRecordRequest_Tenant) MergePatchedWritableRecordRequestTenant1(v PatchedWritableRecordRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableRecordRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableRecordRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestAdminC0 returns the union data inside the PatchedWritableZoneRequest_AdminC as a PatchedWritableZoneRequestAdminC0
func (t PatchedWritableZoneRequest_AdminC) AsPatchedWritableZoneRequestAdminC0() (PatchedWritableZoneRequestAdminC0, error) {
	var body PatchedWritableZoneRequestAdminC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestAdminC0 overwrites any union data inside the PatchedWritableZoneRequest_AdminC as the provided PatchedWritableZoneRequestAdminC0
func (t *PatchedWritableZoneRequest_AdminC) FromPatchedWritableZoneRequestAdminC0(v PatchedWritableZoneRequestAdminC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestAdminC0 performs a merge with any union data inside the PatchedWritableZoneRequest_AdminC, using the provided PatchedWritableZoneRequestAdminC0
func (t *PatchedWritableZoneRequest_AdminC) MergePatchedWritableZoneRequestAdminC0(v PatchedWritableZoneRequestAdminC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestAdminC1 returns the union data inside the PatchedWritableZoneRequest_AdminC as a PatchedWritableZoneRequestAdminC1
func (t PatchedWritableZoneRequest_AdminC) AsPatchedWritableZoneRequestAdminC1() (PatchedWritableZoneRequestAdminC1, error) {
	var body PatchedWritableZoneRequestAdminC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestAdminC1 overwrites any union data inside the PatchedWritableZoneRequest_AdminC as the provided PatchedWritableZoneRequestAdminC1
func (t *PatchedWritableZoneRequest_AdminC) FromPatchedWritableZoneRequestAdminC1(v PatchedWritableZoneRequestAdminC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestAdminC1 performs a merge with any union data inside the PatchedWritableZoneRequest_AdminC, using the provided PatchedWritableZoneRequestAdminC1
func (t *PatchedWritableZoneRequest_AdminC) MergePatchedWritableZoneRequestAdminC1(v PatchedWritableZoneRequestAdminC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_AdminC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_AdminC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestBillingC0 returns the union data inside the PatchedWritableZoneRequest_BillingC as a PatchedWritableZoneRequestBillingC0
func (t PatchedWritableZoneRequest_BillingC) AsPatchedWritableZoneRequestBillingC0() (PatchedWritableZoneRequestBillingC0, error) {
	var body PatchedWritableZoneRequestBillingC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestBillingC0 overwrites any union data inside the PatchedWritableZoneRequest_BillingC as the provided PatchedWritableZoneRequestBillingC0
func (t *PatchedWritableZoneRequest_BillingC) FromPatchedWritableZoneRequestBillingC0(v PatchedWritableZoneRequestBillingC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestBillingC0 performs a merge with any union data inside the PatchedWritableZoneRequest_BillingC, using the provided PatchedWritableZoneRequestBillingC0
func (t *PatchedWritableZoneRequest_BillingC) MergePatchedWritableZoneRequestBillingC0(v PatchedWritableZoneRequestBillingC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestBillingC1 returns the union data inside the PatchedWritableZoneRequest_BillingC as a PatchedWritableZoneRequestBillingC1
func (t PatchedWritableZoneRequest_BillingC) AsPatchedWritableZoneRequestBillingC1() (PatchedWritableZoneRequestBillingC1, error) {
	var body PatchedWritableZoneRequestBillingC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestBillingC1 overwrites any union data inside the PatchedWritableZoneRequest_BillingC as the provided PatchedWritableZoneRequestBillingC1
func (t *PatchedWritableZoneRequest_BillingC) FromPatchedWritableZoneRequestBillingC1(v PatchedWritableZoneRequestBillingC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestBillingC1 performs a merge with any union data inside the PatchedWritableZoneRequest_BillingC, using the provided PatchedWritableZoneRequestBillingC1
func (t *PatchedWritableZoneRequest_BillingC) MergePatchedWritableZoneRequestBillingC1(v PatchedWritableZoneRequestBillingC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_BillingC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_BillingC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestDnssecPolicy0 returns the union data inside the PatchedWritableZoneRequest_DnssecPolicy as a PatchedWritableZoneRequestDnssecPolicy0
func (t PatchedWritableZoneRequest_DnssecPolicy) AsPatchedWritableZoneRequestDnssecPolicy0() (PatchedWritableZoneRequestDnssecPolicy0, error) {
	var body PatchedWritableZoneRequestDnssecPolicy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestDnssecPolicy0 overwrites any union data inside the PatchedWritableZoneRequest_DnssecPolicy as the provided PatchedWritableZoneRequestDnssecPolicy0
func (t *PatchedWritableZoneRequest_DnssecPolicy) FromPatchedWritableZoneRequestDnssecPolicy0(v PatchedWritableZoneRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestDnssecPolicy0 performs a merge with any union data inside the PatchedWritableZoneRequest_DnssecPolicy, using the provided PatchedWritableZoneRequestDnssecPolicy0
func (t *PatchedWritableZoneRequest_DnssecPolicy) MergePatchedWritableZoneRequestDnssecPolicy0(v PatchedWritableZoneRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestDnssecPolicy1 returns the union data inside the PatchedWritableZoneRequest_DnssecPolicy as a PatchedWritableZoneRequestDnssecPolicy1
func (t PatchedWritableZoneRequest_DnssecPolicy) AsPatchedWritableZoneRequestDnssecPolicy1() (PatchedWritableZoneRequestDnssecPolicy1, error) {
	var body PatchedWritableZoneRequestDnssecPolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestDnssecPolicy1 overwrites any union data inside the PatchedWritableZoneRequest_DnssecPolicy as the provided PatchedWritableZoneRequestDnssecPolicy1
func (t *PatchedWritableZoneRequest_DnssecPolicy) FromPatchedWritableZoneRequestDnssecPolicy1(v PatchedWritableZoneRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestDnssecPolicy1 performs a merge with any union data inside the PatchedWritableZoneRequest_DnssecPolicy, using the provided PatchedWritableZoneRequestDnssecPolicy1
func (t *PatchedWritableZoneRequest_DnssecPolicy) MergePatchedWritableZoneRequestDnssecPolicy1(v PatchedWritableZoneRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_DnssecPolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_DnssecPolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestRegistrant0 returns the union data inside the PatchedWritableZoneRequest_Registrant as a PatchedWritableZoneRequestRegistrant0
func (t PatchedWritableZoneRequest_Registrant) AsPatchedWritableZoneRequestRegistrant0() (PatchedWritableZoneRequestRegistrant0, error) {
	var body PatchedWritableZoneRequestRegistrant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestRegistrant0 overwrites any union data inside the PatchedWritableZoneRequest_Registrant as the provided PatchedWritableZoneRequestRegistrant0
func (t *PatchedWritableZoneRequest_Registrant) FromPatchedWritableZoneRequestRegistrant0(v PatchedWritableZoneRequestRegistrant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestRegistrant0 performs a merge with any union data inside the PatchedWritableZoneRequest_Registrant, using the provided PatchedWritableZoneRequestRegistrant0
func (t *PatchedWritableZoneRequest_Registrant) MergePatchedWritableZoneRequestRegistrant0(v PatchedWritableZoneRequestRegistrant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestRegistrant1 returns the union data inside the PatchedWritableZoneRequest_Registrant as a PatchedWritableZoneRequestRegistrant1
func (t PatchedWritableZoneRequest_Registrant) AsPatchedWritableZoneRequestRegistrant1() (PatchedWritableZoneRequestRegistrant1, error) {
	var body PatchedWritableZoneRequestRegistrant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestRegistrant1 overwrites any union data inside the PatchedWritableZoneRequest_Registrant as the provided PatchedWritableZoneRequestRegistrant1
func (t *PatchedWritableZoneRequest_Registrant) FromPatchedWritableZoneRequestRegistrant1(v PatchedWritableZoneRequestRegistrant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestRegistrant1 performs a merge with any union data inside the PatchedWritableZoneRequest_Registrant, using the provided PatchedWritableZoneRequestRegistrant1
func (t *PatchedWritableZoneRequest_Registrant) MergePatchedWritableZoneRequestRegistrant1(v PatchedWritableZoneRequestRegistrant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_Registrant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_Registrant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestRegistrar0 returns the union data inside the PatchedWritableZoneRequest_Registrar as a PatchedWritableZoneRequestRegistrar0
func (t PatchedWritableZoneRequest_Registrar) AsPatchedWritableZoneRequestRegistrar0() (PatchedWritableZoneRequestRegistrar0, error) {
	var body PatchedWritableZoneRequestRegistrar0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestRegistrar0 overwrites any union data inside the PatchedWritableZoneRequest_Registrar as the provided PatchedWritableZoneRequestRegistrar0
func (t *PatchedWritableZoneRequest_Registrar) FromPatchedWritableZoneRequestRegistrar0(v PatchedWritableZoneRequestRegistrar0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestRegistrar0 performs a merge with any union data inside the PatchedWritableZoneRequest_Registrar, using the provided PatchedWritableZoneRequestRegistrar0
func (t *PatchedWritableZoneRequest_Registrar) MergePatchedWritableZoneRequestRegistrar0(v PatchedWritableZoneRequestRegistrar0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestRegistrar1 returns the union data inside the PatchedWritableZoneRequest_Registrar as a PatchedWritableZoneRequestRegistrar1
func (t PatchedWritableZoneRequest_Registrar) AsPatchedWritableZoneRequestRegistrar1() (PatchedWritableZoneRequestRegistrar1, error) {
	var body PatchedWritableZoneRequestRegistrar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestRegistrar1 overwrites any union data inside the PatchedWritableZoneRequest_Registrar as the provided PatchedWritableZoneRequestRegistrar1
func (t *PatchedWritableZoneRequest_Registrar) FromPatchedWritableZoneRequestRegistrar1(v PatchedWritableZoneRequestRegistrar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestRegistrar1 performs a merge with any union data inside the PatchedWritableZoneRequest_Registrar, using the provided PatchedWritableZoneRequestRegistrar1
func (t *PatchedWritableZoneRequest_Registrar) MergePatchedWritableZoneRequestRegistrar1(v PatchedWritableZoneRequestRegistrar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_Registrar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_Registrar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestSoaMname0 returns the union data inside the PatchedWritableZoneRequest_SoaMname as a PatchedWritableZoneRequestSoaMname0
func (t PatchedWritableZoneRequest_SoaMname) AsPatchedWritableZoneRequestSoaMname0() (PatchedWritableZoneRequestSoaMname0, error) {
	var body PatchedWritableZoneRequestSoaMname0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestSoaMname0 overwrites any union data inside the PatchedWritableZoneRequest_SoaMname as the provided PatchedWritableZoneRequestSoaMname0
func (t *PatchedWritableZoneRequest_SoaMname) FromPatchedWritableZoneRequestSoaMname0(v PatchedWritableZoneRequestSoaMname0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestSoaMname0 performs a merge with any union data inside the PatchedWritableZoneRequest_SoaMname, using the provided PatchedWritableZoneRequestSoaMname0
func (t *PatchedWritableZoneRequest_SoaMname) MergePatchedWritableZoneRequestSoaMname0(v PatchedWritableZoneRequestSoaMname0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestSoaMname1 returns the union data inside the PatchedWritableZoneRequest_SoaMname as a PatchedWritableZoneRequestSoaMname1
func (t PatchedWritableZoneRequest_SoaMname) AsPatchedWritableZoneRequestSoaMname1() (PatchedWritableZoneRequestSoaMname1, error) {
	var body PatchedWritableZoneRequestSoaMname1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestSoaMname1 overwrites any union data inside the PatchedWritableZoneRequest_SoaMname as the provided PatchedWritableZoneRequestSoaMname1
func (t *PatchedWritableZoneRequest_SoaMname) FromPatchedWritableZoneRequestSoaMname1(v PatchedWritableZoneRequestSoaMname1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestSoaMname1 performs a merge with any union data inside the PatchedWritableZoneRequest_SoaMname, using the provided PatchedWritableZoneRequestSoaMname1
func (t *PatchedWritableZoneRequest_SoaMname) MergePatchedWritableZoneRequestSoaMname1(v PatchedWritableZoneRequestSoaMname1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_SoaMname) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_SoaMname) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestTechC0 returns the union data inside the PatchedWritableZoneRequest_TechC as a PatchedWritableZoneRequestTechC0
func (t PatchedWritableZoneRequest_TechC) AsPatchedWritableZoneRequestTechC0() (PatchedWritableZoneRequestTechC0, error) {
	var body PatchedWritableZoneRequestTechC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestTechC0 overwrites any union data inside the PatchedWritableZoneRequest_TechC as the provided PatchedWritableZoneRequestTechC0
func (t *PatchedWritableZoneRequest_TechC) FromPatchedWritableZoneRequestTechC0(v PatchedWritableZoneRequestTechC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestTechC0 performs a merge with any union data inside the PatchedWritableZoneRequest_TechC, using the provided PatchedWritableZoneRequestTechC0
func (t *PatchedWritableZoneRequest_TechC) MergePatchedWritableZoneRequestTechC0(v PatchedWritableZoneRequestTechC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestTechC1 returns the union data inside the PatchedWritableZoneRequest_TechC as a PatchedWritableZoneRequestTechC1
func (t PatchedWritableZoneRequest_TechC) AsPatchedWritableZoneRequestTechC1() (PatchedWritableZoneRequestTechC1, error) {
	var body PatchedWritableZoneRequestTechC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestTechC1 overwrites any union data inside the PatchedWritableZoneRequest_TechC as the provided PatchedWritableZoneRequestTechC1
func (t *PatchedWritableZoneRequest_TechC) FromPatchedWritableZoneRequestTechC1(v PatchedWritableZoneRequestTechC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestTechC1 performs a merge with any union data inside the PatchedWritableZoneRequest_TechC, using the provided PatchedWritableZoneRequestTechC1
func (t *PatchedWritableZoneRequest_TechC) MergePatchedWritableZoneRequestTechC1(v PatchedWritableZoneRequestTechC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_TechC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_TechC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestTemplate0 returns the union data inside the PatchedWritableZoneRequest_Template as a PatchedWritableZoneRequestTemplate0
func (t PatchedWritableZoneRequest_Template) AsPatchedWritableZoneRequestTemplate0() (PatchedWritableZoneRequestTemplate0, error) {
	var body PatchedWritableZoneRequestTemplate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestTemplate0 overwrites any union data inside the PatchedWritableZoneRequest_Template as the provided PatchedWritableZoneRequestTemplate0
func (t *PatchedWritableZoneRequest_Template) FromPatchedWritableZoneRequestTemplate0(v PatchedWritableZoneRequestTemplate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestTemplate0 performs a merge with any union data inside the PatchedWritableZoneRequest_Template, using the provided PatchedWritableZoneRequestTemplate0
func (t *PatchedWritableZoneRequest_Template) MergePatchedWritableZoneRequestTemplate0(v PatchedWritableZoneRequestTemplate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestTemplate1 returns the union data inside the PatchedWritableZoneRequest_Template as a PatchedWritableZoneRequestTemplate1
func (t PatchedWritableZoneRequest_Template) AsPatchedWritableZoneRequestTemplate1() (PatchedWritableZoneRequestTemplate1, error) {
	var body PatchedWritableZoneRequestTemplate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestTemplate1 overwrites any union data inside the PatchedWritableZoneRequest_Template as the provided PatchedWritableZoneRequestTemplate1
func (t *PatchedWritableZoneRequest_Template) FromPatchedWritableZoneRequestTemplate1(v PatchedWritableZoneRequestTemplate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestTemplate1 performs a merge with any union data inside the PatchedWritableZoneRequest_Template, using the provided PatchedWritableZoneRequestTemplate1
func (t *PatchedWritableZoneRequest_Template) MergePatchedWritableZoneRequestTemplate1(v PatchedWritableZoneRequestTemplate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_Template) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_Template) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestTenant0 returns the union data inside the PatchedWritableZoneRequest_Tenant as a PatchedWritableZoneRequestTenant0
func (t PatchedWritableZoneRequest_Tenant) AsPatchedWritableZoneRequestTenant0() (PatchedWritableZoneRequestTenant0, error) {
	var body PatchedWritableZoneRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestTenant0 overwrites any union data inside the PatchedWritableZoneRequest_Tenant as the provided PatchedWritableZoneRequestTenant0
func (t *PatchedWritableZoneRequest_Tenant) FromPatchedWritableZoneRequestTenant0(v PatchedWritableZoneRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestTenant0 performs a merge with any union data inside the PatchedWritableZoneRequest_Tenant, using the provided PatchedWritableZoneRequestTenant0
func (t *PatchedWritableZoneRequest_Tenant) MergePatchedWritableZoneRequestTenant0(v PatchedWritableZoneRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestTenant1 returns the union data inside the PatchedWritableZoneRequest_Tenant as a PatchedWritableZoneRequestTenant1
func (t PatchedWritableZoneRequest_Tenant) AsPatchedWritableZoneRequestTenant1() (PatchedWritableZoneRequestTenant1, error) {
	var body PatchedWritableZoneRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestTenant1 overwrites any union data inside the PatchedWritableZoneRequest_Tenant as the provided PatchedWritableZoneRequestTenant1
func (t *PatchedWritableZoneRequest_Tenant) FromPatchedWritableZoneRequestTenant1(v PatchedWritableZoneRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestTenant1 performs a merge with any union data inside the PatchedWritableZoneRequest_Tenant, using the provided PatchedWritableZoneRequestTenant1
func (t *PatchedWritableZoneRequest_Tenant) MergePatchedWritableZoneRequestTenant1(v PatchedWritableZoneRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedWritableZoneRequestView0 returns the union data inside the PatchedWritableZoneRequest_View as a PatchedWritableZoneRequestView0
func (t PatchedWritableZoneRequest_View) AsPatchedWritableZoneRequestView0() (PatchedWritableZoneRequestView0, error) {
	var body PatchedWritableZoneRequestView0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestView0 overwrites any union data inside the PatchedWritableZoneRequest_View as the provided PatchedWritableZoneRequestView0
func (t *PatchedWritableZoneRequest_View) FromPatchedWritableZoneRequestView0(v PatchedWritableZoneRequestView0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestView0 performs a merge with any union data inside the PatchedWritableZoneRequest_View, using the provided PatchedWritableZoneRequestView0
func (t *PatchedWritableZoneRequest_View) MergePatchedWritableZoneRequestView0(v PatchedWritableZoneRequestView0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedWritableZoneRequestView1 returns the union data inside the PatchedWritableZoneRequest_View as a PatchedWritableZoneRequestView1
func (t PatchedWritableZoneRequest_View) AsPatchedWritableZoneRequestView1() (PatchedWritableZoneRequestView1, error) {
	var body PatchedWritableZoneRequestView1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedWritableZoneRequestView1 overwrites any union data inside the PatchedWritableZoneRequest_View as the provided PatchedWritableZoneRequestView1
func (t *PatchedWritableZoneRequest_View) FromPatchedWritableZoneRequestView1(v PatchedWritableZoneRequestView1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedWritableZoneRequestView1 performs a merge with any union data inside the PatchedWritableZoneRequest_View, using the provided PatchedWritableZoneRequestView1
func (t *PatchedWritableZoneRequest_View) MergePatchedWritableZoneRequestView1(v PatchedWritableZoneRequestView1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedWritableZoneRequest_View) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedWritableZoneRequest_View) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestAdminC0 returns the union data inside the PatchedZoneTemplateRequest_AdminC as a PatchedZoneTemplateRequestAdminC0
func (t PatchedZoneTemplateRequest_AdminC) AsPatchedZoneTemplateRequestAdminC0() (PatchedZoneTemplateRequestAdminC0, error) {
	var body PatchedZoneTemplateRequestAdminC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestAdminC0 overwrites any union data inside the PatchedZoneTemplateRequest_AdminC as the provided PatchedZoneTemplateRequestAdminC0
func (t *PatchedZoneTemplateRequest_AdminC) FromPatchedZoneTemplateRequestAdminC0(v PatchedZoneTemplateRequestAdminC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestAdminC0 performs a merge with any union data inside the PatchedZoneTemplateRequest_AdminC, using the provided PatchedZoneTemplateRequestAdminC0
func (t *PatchedZoneTemplateRequest_AdminC) MergePatchedZoneTemplateRequestAdminC0(v PatchedZoneTemplateRequestAdminC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestAdminC1 returns the union data inside the PatchedZoneTemplateRequest_AdminC as a PatchedZoneTemplateRequestAdminC1
func (t PatchedZoneTemplateRequest_AdminC) AsPatchedZoneTemplateRequestAdminC1() (PatchedZoneTemplateRequestAdminC1, error) {
	var body PatchedZoneTemplateRequestAdminC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestAdminC1 overwrites any union data inside the PatchedZoneTemplateRequest_AdminC as the provided PatchedZoneTemplateRequestAdminC1
func (t *PatchedZoneTemplateRequest_AdminC) FromPatchedZoneTemplateRequestAdminC1(v PatchedZoneTemplateRequestAdminC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestAdminC1 performs a merge with any union data inside the PatchedZoneTemplateRequest_AdminC, using the provided PatchedZoneTemplateRequestAdminC1
func (t *PatchedZoneTemplateRequest_AdminC) MergePatchedZoneTemplateRequestAdminC1(v PatchedZoneTemplateRequestAdminC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_AdminC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_AdminC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestBillingC0 returns the union data inside the PatchedZoneTemplateRequest_BillingC as a PatchedZoneTemplateRequestBillingC0
func (t PatchedZoneTemplateRequest_BillingC) AsPatchedZoneTemplateRequestBillingC0() (PatchedZoneTemplateRequestBillingC0, error) {
	var body PatchedZoneTemplateRequestBillingC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestBillingC0 overwrites any union data inside the PatchedZoneTemplateRequest_BillingC as the provided PatchedZoneTemplateRequestBillingC0
func (t *PatchedZoneTemplateRequest_BillingC) FromPatchedZoneTemplateRequestBillingC0(v PatchedZoneTemplateRequestBillingC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestBillingC0 performs a merge with any union data inside the PatchedZoneTemplateRequest_BillingC, using the provided PatchedZoneTemplateRequestBillingC0
func (t *PatchedZoneTemplateRequest_BillingC) MergePatchedZoneTemplateRequestBillingC0(v PatchedZoneTemplateRequestBillingC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestBillingC1 returns the union data inside the PatchedZoneTemplateRequest_BillingC as a PatchedZoneTemplateRequestBillingC1
func (t PatchedZoneTemplateRequest_BillingC) AsPatchedZoneTemplateRequestBillingC1() (PatchedZoneTemplateRequestBillingC1, error) {
	var body PatchedZoneTemplateRequestBillingC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestBillingC1 overwrites any union data inside the PatchedZoneTemplateRequest_BillingC as the provided PatchedZoneTemplateRequestBillingC1
func (t *PatchedZoneTemplateRequest_BillingC) FromPatchedZoneTemplateRequestBillingC1(v PatchedZoneTemplateRequestBillingC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestBillingC1 performs a merge with any union data inside the PatchedZoneTemplateRequest_BillingC, using the provided PatchedZoneTemplateRequestBillingC1
func (t *PatchedZoneTemplateRequest_BillingC) MergePatchedZoneTemplateRequestBillingC1(v PatchedZoneTemplateRequestBillingC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_BillingC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_BillingC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestDnssecPolicy0 returns the union data inside the PatchedZoneTemplateRequest_DnssecPolicy as a PatchedZoneTemplateRequestDnssecPolicy0
func (t PatchedZoneTemplateRequest_DnssecPolicy) AsPatchedZoneTemplateRequestDnssecPolicy0() (PatchedZoneTemplateRequestDnssecPolicy0, error) {
	var body PatchedZoneTemplateRequestDnssecPolicy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestDnssecPolicy0 overwrites any union data inside the PatchedZoneTemplateRequest_DnssecPolicy as the provided PatchedZoneTemplateRequestDnssecPolicy0
func (t *PatchedZoneTemplateRequest_DnssecPolicy) FromPatchedZoneTemplateRequestDnssecPolicy0(v PatchedZoneTemplateRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestDnssecPolicy0 performs a merge with any union data inside the PatchedZoneTemplateRequest_DnssecPolicy, using the provided PatchedZoneTemplateRequestDnssecPolicy0
func (t *PatchedZoneTemplateRequest_DnssecPolicy) MergePatchedZoneTemplateRequestDnssecPolicy0(v PatchedZoneTemplateRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestDnssecPolicy1 returns the union data inside the PatchedZoneTemplateRequest_DnssecPolicy as a PatchedZoneTemplateRequestDnssecPolicy1
func (t PatchedZoneTemplateRequest_DnssecPolicy) AsPatchedZoneTemplateRequestDnssecPolicy1() (PatchedZoneTemplateRequestDnssecPolicy1, error) {
	var body PatchedZoneTemplateRequestDnssecPolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestDnssecPolicy1 overwrites any union data inside the PatchedZoneTemplateRequest_DnssecPolicy as the provided PatchedZoneTemplateRequestDnssecPolicy1
func (t *PatchedZoneTemplateRequest_DnssecPolicy) FromPatchedZoneTemplateRequestDnssecPolicy1(v PatchedZoneTemplateRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestDnssecPolicy1 performs a merge with any union data inside the PatchedZoneTemplateRequest_DnssecPolicy, using the provided PatchedZoneTemplateRequestDnssecPolicy1
func (t *PatchedZoneTemplateRequest_DnssecPolicy) MergePatchedZoneTemplateRequestDnssecPolicy1(v PatchedZoneTemplateRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_DnssecPolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_DnssecPolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestRegistrant0 returns the union data inside the PatchedZoneTemplateRequest_Registrant as a PatchedZoneTemplateRequestRegistrant0
func (t PatchedZoneTemplateRequest_Registrant) AsPatchedZoneTemplateRequestRegistrant0() (PatchedZoneTemplateRequestRegistrant0, error) {
	var body PatchedZoneTemplateRequestRegistrant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestRegistrant0 overwrites any union data inside the PatchedZoneTemplateRequest_Registrant as the provided PatchedZoneTemplateRequestRegistrant0
func (t *PatchedZoneTemplateRequest_Registrant) FromPatchedZoneTemplateRequestRegistrant0(v PatchedZoneTemplateRequestRegistrant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestRegistrant0 performs a merge with any union data inside the PatchedZoneTemplateRequest_Registrant, using the provided PatchedZoneTemplateRequestRegistrant0
func (t *PatchedZoneTemplateRequest_Registrant) MergePatchedZoneTemplateRequestRegistrant0(v PatchedZoneTemplateRequestRegistrant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestRegistrant1 returns the union data inside the PatchedZoneTemplateRequest_Registrant as a PatchedZoneTemplateRequestRegistrant1
func (t PatchedZoneTemplateRequest_Registrant) AsPatchedZoneTemplateRequestRegistrant1() (PatchedZoneTemplateRequestRegistrant1, error) {
	var body PatchedZoneTemplateRequestRegistrant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestRegistrant1 overwrites any union data inside the PatchedZoneTemplateRequest_Registrant as the provided PatchedZoneTemplateRequestRegistrant1
func (t *PatchedZoneTemplateRequest_Registrant) FromPatchedZoneTemplateRequestRegistrant1(v PatchedZoneTemplateRequestRegistrant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestRegistrant1 performs a merge with any union data inside the PatchedZoneTemplateRequest_Registrant, using the provided PatchedZoneTemplateRequestRegistrant1
func (t *PatchedZoneTemplateRequest_Registrant) MergePatchedZoneTemplateRequestRegistrant1(v PatchedZoneTemplateRequestRegistrant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_Registrant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_Registrant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestRegistrar0 returns the union data inside the PatchedZoneTemplateRequest_Registrar as a PatchedZoneTemplateRequestRegistrar0
func (t PatchedZoneTemplateRequest_Registrar) AsPatchedZoneTemplateRequestRegistrar0() (PatchedZoneTemplateRequestRegistrar0, error) {
	var body PatchedZoneTemplateRequestRegistrar0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestRegistrar0 overwrites any union data inside the PatchedZoneTemplateRequest_Registrar as the provided PatchedZoneTemplateRequestRegistrar0
func (t *PatchedZoneTemplateRequest_Registrar) FromPatchedZoneTemplateRequestRegistrar0(v PatchedZoneTemplateRequestRegistrar0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestRegistrar0 performs a merge with any union data inside the PatchedZoneTemplateRequest_Registrar, using the provided PatchedZoneTemplateRequestRegistrar0
func (t *PatchedZoneTemplateRequest_Registrar) MergePatchedZoneTemplateRequestRegistrar0(v PatchedZoneTemplateRequestRegistrar0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestRegistrar1 returns the union data inside the PatchedZoneTemplateRequest_Registrar as a PatchedZoneTemplateRequestRegistrar1
func (t PatchedZoneTemplateRequest_Registrar) AsPatchedZoneTemplateRequestRegistrar1() (PatchedZoneTemplateRequestRegistrar1, error) {
	var body PatchedZoneTemplateRequestRegistrar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestRegistrar1 overwrites any union data inside the PatchedZoneTemplateRequest_Registrar as the provided PatchedZoneTemplateRequestRegistrar1
func (t *PatchedZoneTemplateRequest_Registrar) FromPatchedZoneTemplateRequestRegistrar1(v PatchedZoneTemplateRequestRegistrar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestRegistrar1 performs a merge with any union data inside the PatchedZoneTemplateRequest_Registrar, using the provided PatchedZoneTemplateRequestRegistrar1
func (t *PatchedZoneTemplateRequest_Registrar) MergePatchedZoneTemplateRequestRegistrar1(v PatchedZoneTemplateRequestRegistrar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_Registrar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_Registrar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestSoaMname0 returns the union data inside the PatchedZoneTemplateRequest_SoaMname as a PatchedZoneTemplateRequestSoaMname0
func (t PatchedZoneTemplateRequest_SoaMname) AsPatchedZoneTemplateRequestSoaMname0() (PatchedZoneTemplateRequestSoaMname0, error) {
	var body PatchedZoneTemplateRequestSoaMname0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestSoaMname0 overwrites any union data inside the PatchedZoneTemplateRequest_SoaMname as the provided PatchedZoneTemplateRequestSoaMname0
func (t *PatchedZoneTemplateRequest_SoaMname) FromPatchedZoneTemplateRequestSoaMname0(v PatchedZoneTemplateRequestSoaMname0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestSoaMname0 performs a merge with any union data inside the PatchedZoneTemplateRequest_SoaMname, using the provided PatchedZoneTemplateRequestSoaMname0
func (t *PatchedZoneTemplateRequest_SoaMname) MergePatchedZoneTemplateRequestSoaMname0(v PatchedZoneTemplateRequestSoaMname0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestSoaMname1 returns the union data inside the PatchedZoneTemplateRequest_SoaMname as a PatchedZoneTemplateRequestSoaMname1
func (t PatchedZoneTemplateRequest_SoaMname) AsPatchedZoneTemplateRequestSoaMname1() (PatchedZoneTemplateRequestSoaMname1, error) {
	var body PatchedZoneTemplateRequestSoaMname1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestSoaMname1 overwrites any union data inside the PatchedZoneTemplateRequest_SoaMname as the provided PatchedZoneTemplateRequestSoaMname1
func (t *PatchedZoneTemplateRequest_SoaMname) FromPatchedZoneTemplateRequestSoaMname1(v PatchedZoneTemplateRequestSoaMname1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestSoaMname1 performs a merge with any union data inside the PatchedZoneTemplateRequest_SoaMname, using the provided PatchedZoneTemplateRequestSoaMname1
func (t *PatchedZoneTemplateRequest_SoaMname) MergePatchedZoneTemplateRequestSoaMname1(v PatchedZoneTemplateRequestSoaMname1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_SoaMname) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_SoaMname) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestTechC0 returns the union data inside the PatchedZoneTemplateRequest_TechC as a PatchedZoneTemplateRequestTechC0
func (t PatchedZoneTemplateRequest_TechC) AsPatchedZoneTemplateRequestTechC0() (PatchedZoneTemplateRequestTechC0, error) {
	var body PatchedZoneTemplateRequestTechC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestTechC0 overwrites any union data inside the PatchedZoneTemplateRequest_TechC as the provided PatchedZoneTemplateRequestTechC0
func (t *PatchedZoneTemplateRequest_TechC) FromPatchedZoneTemplateRequestTechC0(v PatchedZoneTemplateRequestTechC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestTechC0 performs a merge with any union data inside the PatchedZoneTemplateRequest_TechC, using the provided PatchedZoneTemplateRequestTechC0
func (t *PatchedZoneTemplateRequest_TechC) MergePatchedZoneTemplateRequestTechC0(v PatchedZoneTemplateRequestTechC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestTechC1 returns the union data inside the PatchedZoneTemplateRequest_TechC as a PatchedZoneTemplateRequestTechC1
func (t PatchedZoneTemplateRequest_TechC) AsPatchedZoneTemplateRequestTechC1() (PatchedZoneTemplateRequestTechC1, error) {
	var body PatchedZoneTemplateRequestTechC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestTechC1 overwrites any union data inside the PatchedZoneTemplateRequest_TechC as the provided PatchedZoneTemplateRequestTechC1
func (t *PatchedZoneTemplateRequest_TechC) FromPatchedZoneTemplateRequestTechC1(v PatchedZoneTemplateRequestTechC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestTechC1 performs a merge with any union data inside the PatchedZoneTemplateRequest_TechC, using the provided PatchedZoneTemplateRequestTechC1
func (t *PatchedZoneTemplateRequest_TechC) MergePatchedZoneTemplateRequestTechC1(v PatchedZoneTemplateRequestTechC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_TechC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_TechC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPatchedZoneTemplateRequestTenant0 returns the union data inside the PatchedZoneTemplateRequest_Tenant as a PatchedZoneTemplateRequestTenant0
func (t PatchedZoneTemplateRequest_Tenant) AsPatchedZoneTemplateRequestTenant0() (PatchedZoneTemplateRequestTenant0, error) {
	var body PatchedZoneTemplateRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestTenant0 overwrites any union data inside the PatchedZoneTemplateRequest_Tenant as the provided PatchedZoneTemplateRequestTenant0
func (t *PatchedZoneTemplateRequest_Tenant) FromPatchedZoneTemplateRequestTenant0(v PatchedZoneTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestTenant0 performs a merge with any union data inside the PatchedZoneTemplateRequest_Tenant, using the provided PatchedZoneTemplateRequestTenant0
func (t *PatchedZoneTemplateRequest_Tenant) MergePatchedZoneTemplateRequestTenant0(v PatchedZoneTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPatchedZoneTemplateRequestTenant1 returns the union data inside the PatchedZoneTemplateRequest_Tenant as a PatchedZoneTemplateRequestTenant1
func (t PatchedZoneTemplateRequest_Tenant) AsPatchedZoneTemplateRequestTenant1() (PatchedZoneTemplateRequestTenant1, error) {
	var body PatchedZoneTemplateRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPatchedZoneTemplateRequestTenant1 overwrites any union data inside the PatchedZoneTemplateRequest_Tenant as the provided PatchedZoneTemplateRequestTenant1
func (t *PatchedZoneTemplateRequest_Tenant) FromPatchedZoneTemplateRequestTenant1(v PatchedZoneTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePatchedZoneTemplateRequestTenant1 performs a merge with any union data inside the PatchedZoneTemplateRequest_Tenant, using the provided PatchedZoneTemplateRequestTenant1
func (t *PatchedZoneTemplateRequest_Tenant) MergePatchedZoneTemplateRequestTenant1(v PatchedZoneTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PatchedZoneTemplateRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PatchedZoneTemplateRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrefixRequestRole0 returns the union data inside the PrefixRequest_Role as a PrefixRequestRole0
func (t PrefixRequest_Role) AsPrefixRequestRole0() (PrefixRequestRole0, error) {
	var body PrefixRequestRole0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestRole0 overwrites any union data inside the PrefixRequest_Role as the provided PrefixRequestRole0
func (t *PrefixRequest_Role) FromPrefixRequestRole0(v PrefixRequestRole0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestRole0 performs a merge with any union data inside the PrefixRequest_Role, using the provided PrefixRequestRole0
func (t *PrefixRequest_Role) MergePrefixRequestRole0(v PrefixRequestRole0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrefixRequestRole1 returns the union data inside the PrefixRequest_Role as a PrefixRequestRole1
func (t PrefixRequest_Role) AsPrefixRequestRole1() (PrefixRequestRole1, error) {
	var body PrefixRequestRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestRole1 overwrites any union data inside the PrefixRequest_Role as the provided PrefixRequestRole1
func (t *PrefixRequest_Role) FromPrefixRequestRole1(v PrefixRequestRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestRole1 performs a merge with any union data inside the PrefixRequest_Role, using the provided PrefixRequestRole1
func (t *PrefixRequest_Role) MergePrefixRequestRole1(v PrefixRequestRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PrefixRequest_Role) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrefixRequest_Role) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrefixRequestTenant0 returns the union data inside the PrefixRequest_Tenant as a PrefixRequestTenant0
func (t PrefixRequest_Tenant) AsPrefixRequestTenant0() (PrefixRequestTenant0, error) {
	var body PrefixRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestTenant0 overwrites any union data inside the PrefixRequest_Tenant as the provided PrefixRequestTenant0
func (t *PrefixRequest_Tenant) FromPrefixRequestTenant0(v PrefixRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestTenant0 performs a merge with any union data inside the PrefixRequest_Tenant, using the provided PrefixRequestTenant0
func (t *PrefixRequest_Tenant) MergePrefixRequestTenant0(v PrefixRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrefixRequestTenant1 returns the union data inside the PrefixRequest_Tenant as a PrefixRequestTenant1
func (t PrefixRequest_Tenant) AsPrefixRequestTenant1() (PrefixRequestTenant1, error) {
	var body PrefixRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestTenant1 overwrites any union data inside the PrefixRequest_Tenant as the provided PrefixRequestTenant1
func (t *PrefixRequest_Tenant) FromPrefixRequestTenant1(v PrefixRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestTenant1 performs a merge with any union data inside the PrefixRequest_Tenant, using the provided PrefixRequestTenant1
func (t *PrefixRequest_Tenant) MergePrefixRequestTenant1(v PrefixRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PrefixRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrefixRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrefixRequestVlan0 returns the union data inside the PrefixRequest_Vlan as a PrefixRequestVlan0
func (t PrefixRequest_Vlan) AsPrefixRequestVlan0() (PrefixRequestVlan0, error) {
	var body PrefixRequestVlan0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestVlan0 overwrites any union data inside the PrefixRequest_Vlan as the provided PrefixRequestVlan0
func (t *PrefixRequest_Vlan) FromPrefixRequestVlan0(v PrefixRequestVlan0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestVlan0 performs a merge with any union data inside the PrefixRequest_Vlan, using the provided PrefixRequestVlan0
func (t *PrefixRequest_Vlan) MergePrefixRequestVlan0(v PrefixRequestVlan0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrefixRequestVlan1 returns the union data inside the PrefixRequest_Vlan as a PrefixRequestVlan1
func (t PrefixRequest_Vlan) AsPrefixRequestVlan1() (PrefixRequestVlan1, error) {
	var body PrefixRequestVlan1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestVlan1 overwrites any union data inside the PrefixRequest_Vlan as the provided PrefixRequestVlan1
func (t *PrefixRequest_Vlan) FromPrefixRequestVlan1(v PrefixRequestVlan1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestVlan1 performs a merge with any union data inside the PrefixRequest_Vlan, using the provided PrefixRequestVlan1
func (t *PrefixRequest_Vlan) MergePrefixRequestVlan1(v PrefixRequestVlan1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PrefixRequest_Vlan) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrefixRequest_Vlan) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrefixRequestVrf0 returns the union data inside the PrefixRequest_Vrf as a PrefixRequestVrf0
func (t PrefixRequest_Vrf) AsPrefixRequestVrf0() (PrefixRequestVrf0, error) {
	var body PrefixRequestVrf0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestVrf0 overwrites any union data inside the PrefixRequest_Vrf as the provided PrefixRequestVrf0
func (t *PrefixRequest_Vrf) FromPrefixRequestVrf0(v PrefixRequestVrf0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestVrf0 performs a merge with any union data inside the PrefixRequest_Vrf, using the provided PrefixRequestVrf0
func (t *PrefixRequest_Vrf) MergePrefixRequestVrf0(v PrefixRequestVrf0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrefixRequestVrf1 returns the union data inside the PrefixRequest_Vrf as a PrefixRequestVrf1
func (t PrefixRequest_Vrf) AsPrefixRequestVrf1() (PrefixRequestVrf1, error) {
	var body PrefixRequestVrf1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrefixRequestVrf1 overwrites any union data inside the PrefixRequest_Vrf as the provided PrefixRequestVrf1
func (t *PrefixRequest_Vrf) FromPrefixRequestVrf1(v PrefixRequestVrf1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrefixRequestVrf1 performs a merge with any union data inside the PrefixRequest_Vrf, using the provided PrefixRequestVrf1
func (t *PrefixRequest_Vrf) MergePrefixRequestVrf1(v PrefixRequestVrf1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PrefixRequest_Vrf) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrefixRequest_Vrf) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRecordRequestTenant0 returns the union data inside the RecordRequest_Tenant as a RecordRequestTenant0
func (t RecordRequest_Tenant) AsRecordRequestTenant0() (RecordRequestTenant0, error) {
	var body RecordRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecordRequestTenant0 overwrites any union data inside the RecordRequest_Tenant as the provided RecordRequestTenant0
func (t *RecordRequest_Tenant) FromRecordRequestTenant0(v RecordRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecordRequestTenant0 performs a merge with any union data inside the RecordRequest_Tenant, using the provided RecordRequestTenant0
func (t *RecordRequest_Tenant) MergeRecordRequestTenant0(v RecordRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRecordRequestTenant1 returns the union data inside the RecordRequest_Tenant as a RecordRequestTenant1
func (t RecordRequest_Tenant) AsRecordRequestTenant1() (RecordRequestTenant1, error) {
	var body RecordRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecordRequestTenant1 overwrites any union data inside the RecordRequest_Tenant as the provided RecordRequestTenant1
func (t *RecordRequest_Tenant) FromRecordRequestTenant1(v RecordRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecordRequestTenant1 performs a merge with any union data inside the RecordRequest_Tenant, using the provided RecordRequestTenant1
func (t *RecordRequest_Tenant) MergeRecordRequestTenant1(v RecordRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RecordRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RecordRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRecordTemplateRequestTenant0 returns the union data inside the RecordTemplateRequest_Tenant as a RecordTemplateRequestTenant0
func (t RecordTemplateRequest_Tenant) AsRecordTemplateRequestTenant0() (RecordTemplateRequestTenant0, error) {
	var body RecordTemplateRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecordTemplateRequestTenant0 overwrites any union data inside the RecordTemplateRequest_Tenant as the provided RecordTemplateRequestTenant0
func (t *RecordTemplateRequest_Tenant) FromRecordTemplateRequestTenant0(v RecordTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecordTemplateRequestTenant0 performs a merge with any union data inside the RecordTemplateRequest_Tenant, using the provided RecordTemplateRequestTenant0
func (t *RecordTemplateRequest_Tenant) MergeRecordTemplateRequestTenant0(v RecordTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRecordTemplateRequestTenant1 returns the union data inside the RecordTemplateRequest_Tenant as a RecordTemplateRequestTenant1
func (t RecordTemplateRequest_Tenant) AsRecordTemplateRequestTenant1() (RecordTemplateRequestTenant1, error) {
	var body RecordTemplateRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecordTemplateRequestTenant1 overwrites any union data inside the RecordTemplateRequest_Tenant as the provided RecordTemplateRequestTenant1
func (t *RecordTemplateRequest_Tenant) FromRecordTemplateRequestTenant1(v RecordTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecordTemplateRequestTenant1 performs a merge with any union data inside the RecordTemplateRequest_Tenant, using the provided RecordTemplateRequestTenant1
func (t *RecordTemplateRequest_Tenant) MergeRecordTemplateRequestTenant1(v RecordTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RecordTemplateRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RecordTemplateRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTenantRequestGroup0 returns the union data inside the TenantRequest_Group as a TenantRequestGroup0
func (t TenantRequest_Group) AsTenantRequestGroup0() (TenantRequestGroup0, error) {
	var body TenantRequestGroup0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTenantRequestGroup0 overwrites any union data inside the TenantRequest_Group as the provided TenantRequestGroup0
func (t *TenantRequest_Group) FromTenantRequestGroup0(v TenantRequestGroup0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTenantRequestGroup0 performs a merge with any union data inside the TenantRequest_Group, using the provided TenantRequestGroup0
func (t *TenantRequest_Group) MergeTenantRequestGroup0(v TenantRequestGroup0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTenantRequestGroup1 returns the union data inside the TenantRequest_Group as a TenantRequestGroup1
func (t TenantRequest_Group) AsTenantRequestGroup1() (TenantRequestGroup1, error) {
	var body TenantRequestGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTenantRequestGroup1 overwrites any union data inside the TenantRequest_Group as the provided TenantRequestGroup1
func (t *TenantRequest_Group) FromTenantRequestGroup1(v TenantRequestGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTenantRequestGroup1 performs a merge with any union data inside the TenantRequest_Group, using the provided TenantRequestGroup1
func (t *TenantRequest_Group) MergeTenantRequestGroup1(v TenantRequestGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TenantRequest_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TenantRequest_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsViewRequestTenant0 returns the union data inside the ViewRequest_Tenant as a ViewRequestTenant0
func (t ViewRequest_Tenant) AsViewRequestTenant0() (ViewRequestTenant0, error) {
	var body ViewRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromViewRequestTenant0 overwrites any union data inside the ViewRequest_Tenant as the provided ViewRequestTenant0
func (t *ViewRequest_Tenant) FromViewRequestTenant0(v ViewRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeViewRequestTenant0 performs a merge with any union data inside the ViewRequest_Tenant, using the provided ViewRequestTenant0
func (t *ViewRequest_Tenant) MergeViewRequestTenant0(v ViewRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsViewRequestTenant1 returns the union data inside the ViewRequest_Tenant as a ViewRequestTenant1
func (t ViewRequest_Tenant) AsViewRequestTenant1() (ViewRequestTenant1, error) {
	var body ViewRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromViewRequestTenant1 overwrites any union data inside the ViewRequest_Tenant as the provided ViewRequestTenant1
func (t *ViewRequest_Tenant) FromViewRequestTenant1(v ViewRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeViewRequestTenant1 performs a merge with any union data inside the ViewRequest_Tenant, using the provided ViewRequestTenant1
func (t *ViewRequest_Tenant) MergeViewRequestTenant1(v ViewRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ViewRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ViewRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritablePrefixRequestRole0 returns the union data inside the WritablePrefixRequest_Role as a WritablePrefixRequestRole0
func (t WritablePrefixRequest_Role) AsWritablePrefixRequestRole0() (WritablePrefixRequestRole0, error) {
	var body WritablePrefixRequestRole0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestRole0 overwrites any union data inside the WritablePrefixRequest_Role as the provided WritablePrefixRequestRole0
func (t *WritablePrefixRequest_Role) FromWritablePrefixRequestRole0(v WritablePrefixRequestRole0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestRole0 performs a merge with any union data inside the WritablePrefixRequest_Role, using the provided WritablePrefixRequestRole0
func (t *WritablePrefixRequest_Role) MergeWritablePrefixRequestRole0(v WritablePrefixRequestRole0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritablePrefixRequestRole1 returns the union data inside the WritablePrefixRequest_Role as a WritablePrefixRequestRole1
func (t WritablePrefixRequest_Role) AsWritablePrefixRequestRole1() (WritablePrefixRequestRole1, error) {
	var body WritablePrefixRequestRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestRole1 overwrites any union data inside the WritablePrefixRequest_Role as the provided WritablePrefixRequestRole1
func (t *WritablePrefixRequest_Role) FromWritablePrefixRequestRole1(v WritablePrefixRequestRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestRole1 performs a merge with any union data inside the WritablePrefixRequest_Role, using the provided WritablePrefixRequestRole1
func (t *WritablePrefixRequest_Role) MergeWritablePrefixRequestRole1(v WritablePrefixRequestRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritablePrefixRequest_Role) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritablePrefixRequest_Role) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritablePrefixRequestTenant0 returns the union data inside the WritablePrefixRequest_Tenant as a WritablePrefixRequestTenant0
func (t WritablePrefixRequest_Tenant) AsWritablePrefixRequestTenant0() (WritablePrefixRequestTenant0, error) {
	var body WritablePrefixRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestTenant0 overwrites any union data inside the WritablePrefixRequest_Tenant as the provided WritablePrefixRequestTenant0
func (t *WritablePrefixRequest_Tenant) FromWritablePrefixRequestTenant0(v WritablePrefixRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestTenant0 performs a merge with any union data inside the WritablePrefixRequest_Tenant, using the provided WritablePrefixRequestTenant0
func (t *WritablePrefixRequest_Tenant) MergeWritablePrefixRequestTenant0(v WritablePrefixRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritablePrefixRequestTenant1 returns the union data inside the WritablePrefixRequest_Tenant as a WritablePrefixRequestTenant1
func (t WritablePrefixRequest_Tenant) AsWritablePrefixRequestTenant1() (WritablePrefixRequestTenant1, error) {
	var body WritablePrefixRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestTenant1 overwrites any union data inside the WritablePrefixRequest_Tenant as the provided WritablePrefixRequestTenant1
func (t *WritablePrefixRequest_Tenant) FromWritablePrefixRequestTenant1(v WritablePrefixRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestTenant1 performs a merge with any union data inside the WritablePrefixRequest_Tenant, using the provided WritablePrefixRequestTenant1
func (t *WritablePrefixRequest_Tenant) MergeWritablePrefixRequestTenant1(v WritablePrefixRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritablePrefixRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritablePrefixRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritablePrefixRequestVlan0 returns the union data inside the WritablePrefixRequest_Vlan as a WritablePrefixRequestVlan0
func (t WritablePrefixRequest_Vlan) AsWritablePrefixRequestVlan0() (WritablePrefixRequestVlan0, error) {
	var body WritablePrefixRequestVlan0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestVlan0 overwrites any union data inside the WritablePrefixRequest_Vlan as the provided WritablePrefixRequestVlan0
func (t *WritablePrefixRequest_Vlan) FromWritablePrefixRequestVlan0(v WritablePrefixRequestVlan0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestVlan0 performs a merge with any union data inside the WritablePrefixRequest_Vlan, using the provided WritablePrefixRequestVlan0
func (t *WritablePrefixRequest_Vlan) MergeWritablePrefixRequestVlan0(v WritablePrefixRequestVlan0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritablePrefixRequestVlan1 returns the union data inside the WritablePrefixRequest_Vlan as a WritablePrefixRequestVlan1
func (t WritablePrefixRequest_Vlan) AsWritablePrefixRequestVlan1() (WritablePrefixRequestVlan1, error) {
	var body WritablePrefixRequestVlan1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestVlan1 overwrites any union data inside the WritablePrefixRequest_Vlan as the provided WritablePrefixRequestVlan1
func (t *WritablePrefixRequest_Vlan) FromWritablePrefixRequestVlan1(v WritablePrefixRequestVlan1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestVlan1 performs a merge with any union data inside the WritablePrefixRequest_Vlan, using the provided WritablePrefixRequestVlan1
func (t *WritablePrefixRequest_Vlan) MergeWritablePrefixRequestVlan1(v WritablePrefixRequestVlan1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritablePrefixRequest_Vlan) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritablePrefixRequest_Vlan) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritablePrefixRequestVrf0 returns the union data inside the WritablePrefixRequest_Vrf as a WritablePrefixRequestVrf0
func (t WritablePrefixRequest_Vrf) AsWritablePrefixRequestVrf0() (WritablePrefixRequestVrf0, error) {
	var body WritablePrefixRequestVrf0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestVrf0 overwrites any union data inside the WritablePrefixRequest_Vrf as the provided WritablePrefixRequestVrf0
func (t *WritablePrefixRequest_Vrf) FromWritablePrefixRequestVrf0(v WritablePrefixRequestVrf0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestVrf0 performs a merge with any union data inside the WritablePrefixRequest_Vrf, using the provided WritablePrefixRequestVrf0
func (t *WritablePrefixRequest_Vrf) MergeWritablePrefixRequestVrf0(v WritablePrefixRequestVrf0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritablePrefixRequestVrf1 returns the union data inside the WritablePrefixRequest_Vrf as a WritablePrefixRequestVrf1
func (t WritablePrefixRequest_Vrf) AsWritablePrefixRequestVrf1() (WritablePrefixRequestVrf1, error) {
	var body WritablePrefixRequestVrf1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritablePrefixRequestVrf1 overwrites any union data inside the WritablePrefixRequest_Vrf as the provided WritablePrefixRequestVrf1
func (t *WritablePrefixRequest_Vrf) FromWritablePrefixRequestVrf1(v WritablePrefixRequestVrf1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritablePrefixRequestVrf1 performs a merge with any union data inside the WritablePrefixRequest_Vrf, using the provided WritablePrefixRequestVrf1
func (t *WritablePrefixRequest_Vrf) MergeWritablePrefixRequestVrf1(v WritablePrefixRequestVrf1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritablePrefixRequest_Vrf) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritablePrefixRequest_Vrf) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableRecordRequestTenant0 returns the union data inside the WritableRecordRequest_Tenant as a WritableRecordRequestTenant0
func (t WritableRecordRequest_Tenant) AsWritableRecordRequestTenant0() (WritableRecordRequestTenant0, error) {
	var body WritableRecordRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableRecordRequestTenant0 overwrites any union data inside the WritableRecordRequest_Tenant as the provided WritableRecordRequestTenant0
func (t *WritableRecordRequest_Tenant) FromWritableRecordRequestTenant0(v WritableRecordRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableRecordRequestTenant0 performs a merge with any union data inside the WritableRecordRequest_Tenant, using the provided WritableRecordRequestTenant0
func (t *WritableRecordRequest_Tenant) MergeWritableRecordRequestTenant0(v WritableRecordRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableRecordRequestTenant1 returns the union data inside the WritableRecordRequest_Tenant as a WritableRecordRequestTenant1
func (t WritableRecordRequest_Tenant) AsWritableRecordRequestTenant1() (WritableRecordRequestTenant1, error) {
	var body WritableRecordRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableRecordRequestTenant1 overwrites any union data inside the WritableRecordRequest_Tenant as the provided WritableRecordRequestTenant1
func (t *WritableRecordRequest_Tenant) FromWritableRecordRequestTenant1(v WritableRecordRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableRecordRequestTenant1 performs a merge with any union data inside the WritableRecordRequest_Tenant, using the provided WritableRecordRequestTenant1
func (t *WritableRecordRequest_Tenant) MergeWritableRecordRequestTenant1(v WritableRecordRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableRecordRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableRecordRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestAdminC0 returns the union data inside the WritableZoneRequest_AdminC as a WritableZoneRequestAdminC0
func (t WritableZoneRequest_AdminC) AsWritableZoneRequestAdminC0() (WritableZoneRequestAdminC0, error) {
	var body WritableZoneRequestAdminC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestAdminC0 overwrites any union data inside the WritableZoneRequest_AdminC as the provided WritableZoneRequestAdminC0
func (t *WritableZoneRequest_AdminC) FromWritableZoneRequestAdminC0(v WritableZoneRequestAdminC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestAdminC0 performs a merge with any union data inside the WritableZoneRequest_AdminC, using the provided WritableZoneRequestAdminC0
func (t *WritableZoneRequest_AdminC) MergeWritableZoneRequestAdminC0(v WritableZoneRequestAdminC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestAdminC1 returns the union data inside the WritableZoneRequest_AdminC as a WritableZoneRequestAdminC1
func (t WritableZoneRequest_AdminC) AsWritableZoneRequestAdminC1() (WritableZoneRequestAdminC1, error) {
	var body WritableZoneRequestAdminC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestAdminC1 overwrites any union data inside the WritableZoneRequest_AdminC as the provided WritableZoneRequestAdminC1
func (t *WritableZoneRequest_AdminC) FromWritableZoneRequestAdminC1(v WritableZoneRequestAdminC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestAdminC1 performs a merge with any union data inside the WritableZoneRequest_AdminC, using the provided WritableZoneRequestAdminC1
func (t *WritableZoneRequest_AdminC) MergeWritableZoneRequestAdminC1(v WritableZoneRequestAdminC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_AdminC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_AdminC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestBillingC0 returns the union data inside the WritableZoneRequest_BillingC as a WritableZoneRequestBillingC0
func (t WritableZoneRequest_BillingC) AsWritableZoneRequestBillingC0() (WritableZoneRequestBillingC0, error) {
	var body WritableZoneRequestBillingC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestBillingC0 overwrites any union data inside the WritableZoneRequest_BillingC as the provided WritableZoneRequestBillingC0
func (t *WritableZoneRequest_BillingC) FromWritableZoneRequestBillingC0(v WritableZoneRequestBillingC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestBillingC0 performs a merge with any union data inside the WritableZoneRequest_BillingC, using the provided WritableZoneRequestBillingC0
func (t *WritableZoneRequest_BillingC) MergeWritableZoneRequestBillingC0(v WritableZoneRequestBillingC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestBillingC1 returns the union data inside the WritableZoneRequest_BillingC as a WritableZoneRequestBillingC1
func (t WritableZoneRequest_BillingC) AsWritableZoneRequestBillingC1() (WritableZoneRequestBillingC1, error) {
	var body WritableZoneRequestBillingC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestBillingC1 overwrites any union data inside the WritableZoneRequest_BillingC as the provided WritableZoneRequestBillingC1
func (t *WritableZoneRequest_BillingC) FromWritableZoneRequestBillingC1(v WritableZoneRequestBillingC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestBillingC1 performs a merge with any union data inside the WritableZoneRequest_BillingC, using the provided WritableZoneRequestBillingC1
func (t *WritableZoneRequest_BillingC) MergeWritableZoneRequestBillingC1(v WritableZoneRequestBillingC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_BillingC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_BillingC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestDnssecPolicy0 returns the union data inside the WritableZoneRequest_DnssecPolicy as a WritableZoneRequestDnssecPolicy0
func (t WritableZoneRequest_DnssecPolicy) AsWritableZoneRequestDnssecPolicy0() (WritableZoneRequestDnssecPolicy0, error) {
	var body WritableZoneRequestDnssecPolicy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestDnssecPolicy0 overwrites any union data inside the WritableZoneRequest_DnssecPolicy as the provided WritableZoneRequestDnssecPolicy0
func (t *WritableZoneRequest_DnssecPolicy) FromWritableZoneRequestDnssecPolicy0(v WritableZoneRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestDnssecPolicy0 performs a merge with any union data inside the WritableZoneRequest_DnssecPolicy, using the provided WritableZoneRequestDnssecPolicy0
func (t *WritableZoneRequest_DnssecPolicy) MergeWritableZoneRequestDnssecPolicy0(v WritableZoneRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestDnssecPolicy1 returns the union data inside the WritableZoneRequest_DnssecPolicy as a WritableZoneRequestDnssecPolicy1
func (t WritableZoneRequest_DnssecPolicy) AsWritableZoneRequestDnssecPolicy1() (WritableZoneRequestDnssecPolicy1, error) {
	var body WritableZoneRequestDnssecPolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestDnssecPolicy1 overwrites any union data inside the WritableZoneRequest_DnssecPolicy as the provided WritableZoneRequestDnssecPolicy1
func (t *WritableZoneRequest_DnssecPolicy) FromWritableZoneRequestDnssecPolicy1(v WritableZoneRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestDnssecPolicy1 performs a merge with any union data inside the WritableZoneRequest_DnssecPolicy, using the provided WritableZoneRequestDnssecPolicy1
func (t *WritableZoneRequest_DnssecPolicy) MergeWritableZoneRequestDnssecPolicy1(v WritableZoneRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_DnssecPolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_DnssecPolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestRegistrant0 returns the union data inside the WritableZoneRequest_Registrant as a WritableZoneRequestRegistrant0
func (t WritableZoneRequest_Registrant) AsWritableZoneRequestRegistrant0() (WritableZoneRequestRegistrant0, error) {
	var body WritableZoneRequestRegistrant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestRegistrant0 overwrites any union data inside the WritableZoneRequest_Registrant as the provided WritableZoneRequestRegistrant0
func (t *WritableZoneRequest_Registrant) FromWritableZoneRequestRegistrant0(v WritableZoneRequestRegistrant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestRegistrant0 performs a merge with any union data inside the WritableZoneRequest_Registrant, using the provided WritableZoneRequestRegistrant0
func (t *WritableZoneRequest_Registrant) MergeWritableZoneRequestRegistrant0(v WritableZoneRequestRegistrant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestRegistrant1 returns the union data inside the WritableZoneRequest_Registrant as a WritableZoneRequestRegistrant1
func (t WritableZoneRequest_Registrant) AsWritableZoneRequestRegistrant1() (WritableZoneRequestRegistrant1, error) {
	var body WritableZoneRequestRegistrant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestRegistrant1 overwrites any union data inside the WritableZoneRequest_Registrant as the provided WritableZoneRequestRegistrant1
func (t *WritableZoneRequest_Registrant) FromWritableZoneRequestRegistrant1(v WritableZoneRequestRegistrant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestRegistrant1 performs a merge with any union data inside the WritableZoneRequest_Registrant, using the provided WritableZoneRequestRegistrant1
func (t *WritableZoneRequest_Registrant) MergeWritableZoneRequestRegistrant1(v WritableZoneRequestRegistrant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_Registrant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_Registrant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestRegistrar0 returns the union data inside the WritableZoneRequest_Registrar as a WritableZoneRequestRegistrar0
func (t WritableZoneRequest_Registrar) AsWritableZoneRequestRegistrar0() (WritableZoneRequestRegistrar0, error) {
	var body WritableZoneRequestRegistrar0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestRegistrar0 overwrites any union data inside the WritableZoneRequest_Registrar as the provided WritableZoneRequestRegistrar0
func (t *WritableZoneRequest_Registrar) FromWritableZoneRequestRegistrar0(v WritableZoneRequestRegistrar0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestRegistrar0 performs a merge with any union data inside the WritableZoneRequest_Registrar, using the provided WritableZoneRequestRegistrar0
func (t *WritableZoneRequest_Registrar) MergeWritableZoneRequestRegistrar0(v WritableZoneRequestRegistrar0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestRegistrar1 returns the union data inside the WritableZoneRequest_Registrar as a WritableZoneRequestRegistrar1
func (t WritableZoneRequest_Registrar) AsWritableZoneRequestRegistrar1() (WritableZoneRequestRegistrar1, error) {
	var body WritableZoneRequestRegistrar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestRegistrar1 overwrites any union data inside the WritableZoneRequest_Registrar as the provided WritableZoneRequestRegistrar1
func (t *WritableZoneRequest_Registrar) FromWritableZoneRequestRegistrar1(v WritableZoneRequestRegistrar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestRegistrar1 performs a merge with any union data inside the WritableZoneRequest_Registrar, using the provided WritableZoneRequestRegistrar1
func (t *WritableZoneRequest_Registrar) MergeWritableZoneRequestRegistrar1(v WritableZoneRequestRegistrar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_Registrar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_Registrar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestSoaMname0 returns the union data inside the WritableZoneRequest_SoaMname as a WritableZoneRequestSoaMname0
func (t WritableZoneRequest_SoaMname) AsWritableZoneRequestSoaMname0() (WritableZoneRequestSoaMname0, error) {
	var body WritableZoneRequestSoaMname0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestSoaMname0 overwrites any union data inside the WritableZoneRequest_SoaMname as the provided WritableZoneRequestSoaMname0
func (t *WritableZoneRequest_SoaMname) FromWritableZoneRequestSoaMname0(v WritableZoneRequestSoaMname0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestSoaMname0 performs a merge with any union data inside the WritableZoneRequest_SoaMname, using the provided WritableZoneRequestSoaMname0
func (t *WritableZoneRequest_SoaMname) MergeWritableZoneRequestSoaMname0(v WritableZoneRequestSoaMname0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestSoaMname1 returns the union data inside the WritableZoneRequest_SoaMname as a WritableZoneRequestSoaMname1
func (t WritableZoneRequest_SoaMname) AsWritableZoneRequestSoaMname1() (WritableZoneRequestSoaMname1, error) {
	var body WritableZoneRequestSoaMname1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestSoaMname1 overwrites any union data inside the WritableZoneRequest_SoaMname as the provided WritableZoneRequestSoaMname1
func (t *WritableZoneRequest_SoaMname) FromWritableZoneRequestSoaMname1(v WritableZoneRequestSoaMname1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestSoaMname1 performs a merge with any union data inside the WritableZoneRequest_SoaMname, using the provided WritableZoneRequestSoaMname1
func (t *WritableZoneRequest_SoaMname) MergeWritableZoneRequestSoaMname1(v WritableZoneRequestSoaMname1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_SoaMname) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_SoaMname) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestTechC0 returns the union data inside the WritableZoneRequest_TechC as a WritableZoneRequestTechC0
func (t WritableZoneRequest_TechC) AsWritableZoneRequestTechC0() (WritableZoneRequestTechC0, error) {
	var body WritableZoneRequestTechC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestTechC0 overwrites any union data inside the WritableZoneRequest_TechC as the provided WritableZoneRequestTechC0
func (t *WritableZoneRequest_TechC) FromWritableZoneRequestTechC0(v WritableZoneRequestTechC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestTechC0 performs a merge with any union data inside the WritableZoneRequest_TechC, using the provided WritableZoneRequestTechC0
func (t *WritableZoneRequest_TechC) MergeWritableZoneRequestTechC0(v WritableZoneRequestTechC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestTechC1 returns the union data inside the WritableZoneRequest_TechC as a WritableZoneRequestTechC1
func (t WritableZoneRequest_TechC) AsWritableZoneRequestTechC1() (WritableZoneRequestTechC1, error) {
	var body WritableZoneRequestTechC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestTechC1 overwrites any union data inside the WritableZoneRequest_TechC as the provided WritableZoneRequestTechC1
func (t *WritableZoneRequest_TechC) FromWritableZoneRequestTechC1(v WritableZoneRequestTechC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestTechC1 performs a merge with any union data inside the WritableZoneRequest_TechC, using the provided WritableZoneRequestTechC1
func (t *WritableZoneRequest_TechC) MergeWritableZoneRequestTechC1(v WritableZoneRequestTechC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_TechC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_TechC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestTemplate0 returns the union data inside the WritableZoneRequest_Template as a WritableZoneRequestTemplate0
func (t WritableZoneRequest_Template) AsWritableZoneRequestTemplate0() (WritableZoneRequestTemplate0, error) {
	var body WritableZoneRequestTemplate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestTemplate0 overwrites any union data inside the WritableZoneRequest_Template as the provided WritableZoneRequestTemplate0
func (t *WritableZoneRequest_Template) FromWritableZoneRequestTemplate0(v WritableZoneRequestTemplate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestTemplate0 performs a merge with any union data inside the WritableZoneRequest_Template, using the provided WritableZoneRequestTemplate0
func (t *WritableZoneRequest_Template) MergeWritableZoneRequestTemplate0(v WritableZoneRequestTemplate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestTemplate1 returns the union data inside the WritableZoneRequest_Template as a WritableZoneRequestTemplate1
func (t WritableZoneRequest_Template) AsWritableZoneRequestTemplate1() (WritableZoneRequestTemplate1, error) {
	var body WritableZoneRequestTemplate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestTemplate1 overwrites any union data inside the WritableZoneRequest_Template as the provided WritableZoneRequestTemplate1
func (t *WritableZoneRequest_Template) FromWritableZoneRequestTemplate1(v WritableZoneRequestTemplate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestTemplate1 performs a merge with any union data inside the WritableZoneRequest_Template, using the provided WritableZoneRequestTemplate1
func (t *WritableZoneRequest_Template) MergeWritableZoneRequestTemplate1(v WritableZoneRequestTemplate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_Template) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_Template) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestTenant0 returns the union data inside the WritableZoneRequest_Tenant as a WritableZoneRequestTenant0
func (t WritableZoneRequest_Tenant) AsWritableZoneRequestTenant0() (WritableZoneRequestTenant0, error) {
	var body WritableZoneRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestTenant0 overwrites any union data inside the WritableZoneRequest_Tenant as the provided WritableZoneRequestTenant0
func (t *WritableZoneRequest_Tenant) FromWritableZoneRequestTenant0(v WritableZoneRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestTenant0 performs a merge with any union data inside the WritableZoneRequest_Tenant, using the provided WritableZoneRequestTenant0
func (t *WritableZoneRequest_Tenant) MergeWritableZoneRequestTenant0(v WritableZoneRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestTenant1 returns the union data inside the WritableZoneRequest_Tenant as a WritableZoneRequestTenant1
func (t WritableZoneRequest_Tenant) AsWritableZoneRequestTenant1() (WritableZoneRequestTenant1, error) {
	var body WritableZoneRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestTenant1 overwrites any union data inside the WritableZoneRequest_Tenant as the provided WritableZoneRequestTenant1
func (t *WritableZoneRequest_Tenant) FromWritableZoneRequestTenant1(v WritableZoneRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestTenant1 performs a merge with any union data inside the WritableZoneRequest_Tenant, using the provided WritableZoneRequestTenant1
func (t *WritableZoneRequest_Tenant) MergeWritableZoneRequestTenant1(v WritableZoneRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWritableZoneRequestView0 returns the union data inside the WritableZoneRequest_View as a WritableZoneRequestView0
func (t WritableZoneRequest_View) AsWritableZoneRequestView0() (WritableZoneRequestView0, error) {
	var body WritableZoneRequestView0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestView0 overwrites any union data inside the WritableZoneRequest_View as the provided WritableZoneRequestView0
func (t *WritableZoneRequest_View) FromWritableZoneRequestView0(v WritableZoneRequestView0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestView0 performs a merge with any union data inside the WritableZoneRequest_View, using the provided WritableZoneRequestView0
func (t *WritableZoneRequest_View) MergeWritableZoneRequestView0(v WritableZoneRequestView0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWritableZoneRequestView1 returns the union data inside the WritableZoneRequest_View as a WritableZoneRequestView1
func (t WritableZoneRequest_View) AsWritableZoneRequestView1() (WritableZoneRequestView1, error) {
	var body WritableZoneRequestView1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWritableZoneRequestView1 overwrites any union data inside the WritableZoneRequest_View as the provided WritableZoneRequestView1
func (t *WritableZoneRequest_View) FromWritableZoneRequestView1(v WritableZoneRequestView1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWritableZoneRequestView1 performs a merge with any union data inside the WritableZoneRequest_View, using the provided WritableZoneRequestView1
func (t *WritableZoneRequest_View) MergeWritableZoneRequestView1(v WritableZoneRequestView1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WritableZoneRequest_View) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WritableZoneRequest_View) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestAdminC0 returns the union data inside the ZoneRequest_AdminC as a ZoneRequestAdminC0
func (t ZoneRequest_AdminC) AsZoneRequestAdminC0() (ZoneRequestAdminC0, error) {
	var body ZoneRequestAdminC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestAdminC0 overwrites any union data inside the ZoneRequest_AdminC as the provided ZoneRequestAdminC0
func (t *ZoneRequest_AdminC) FromZoneRequestAdminC0(v ZoneRequestAdminC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestAdminC0 performs a merge with any union data inside the ZoneRequest_AdminC, using the provided ZoneRequestAdminC0
func (t *ZoneRequest_AdminC) MergeZoneRequestAdminC0(v ZoneRequestAdminC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestAdminC1 returns the union data inside the ZoneRequest_AdminC as a ZoneRequestAdminC1
func (t ZoneRequest_AdminC) AsZoneRequestAdminC1() (ZoneRequestAdminC1, error) {
	var body ZoneRequestAdminC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestAdminC1 overwrites any union data inside the ZoneRequest_AdminC as the provided ZoneRequestAdminC1
func (t *ZoneRequest_AdminC) FromZoneRequestAdminC1(v ZoneRequestAdminC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestAdminC1 performs a merge with any union data inside the ZoneRequest_AdminC, using the provided ZoneRequestAdminC1
func (t *ZoneRequest_AdminC) MergeZoneRequestAdminC1(v ZoneRequestAdminC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_AdminC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_AdminC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestBillingC0 returns the union data inside the ZoneRequest_BillingC as a ZoneRequestBillingC0
func (t ZoneRequest_BillingC) AsZoneRequestBillingC0() (ZoneRequestBillingC0, error) {
	var body ZoneRequestBillingC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestBillingC0 overwrites any union data inside the ZoneRequest_BillingC as the provided ZoneRequestBillingC0
func (t *ZoneRequest_BillingC) FromZoneRequestBillingC0(v ZoneRequestBillingC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestBillingC0 performs a merge with any union data inside the ZoneRequest_BillingC, using the provided ZoneRequestBillingC0
func (t *ZoneRequest_BillingC) MergeZoneRequestBillingC0(v ZoneRequestBillingC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestBillingC1 returns the union data inside the ZoneRequest_BillingC as a ZoneRequestBillingC1
func (t ZoneRequest_BillingC) AsZoneRequestBillingC1() (ZoneRequestBillingC1, error) {
	var body ZoneRequestBillingC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestBillingC1 overwrites any union data inside the ZoneRequest_BillingC as the provided ZoneRequestBillingC1
func (t *ZoneRequest_BillingC) FromZoneRequestBillingC1(v ZoneRequestBillingC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestBillingC1 performs a merge with any union data inside the ZoneRequest_BillingC, using the provided ZoneRequestBillingC1
func (t *ZoneRequest_BillingC) MergeZoneRequestBillingC1(v ZoneRequestBillingC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_BillingC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_BillingC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestDnssecPolicy0 returns the union data inside the ZoneRequest_DnssecPolicy as a ZoneRequestDnssecPolicy0
func (t ZoneRequest_DnssecPolicy) AsZoneRequestDnssecPolicy0() (ZoneRequestDnssecPolicy0, error) {
	var body ZoneRequestDnssecPolicy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestDnssecPolicy0 overwrites any union data inside the ZoneRequest_DnssecPolicy as the provided ZoneRequestDnssecPolicy0
func (t *ZoneRequest_DnssecPolicy) FromZoneRequestDnssecPolicy0(v ZoneRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestDnssecPolicy0 performs a merge with any union data inside the ZoneRequest_DnssecPolicy, using the provided ZoneRequestDnssecPolicy0
func (t *ZoneRequest_DnssecPolicy) MergeZoneRequestDnssecPolicy0(v ZoneRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestDnssecPolicy1 returns the union data inside the ZoneRequest_DnssecPolicy as a ZoneRequestDnssecPolicy1
func (t ZoneRequest_DnssecPolicy) AsZoneRequestDnssecPolicy1() (ZoneRequestDnssecPolicy1, error) {
	var body ZoneRequestDnssecPolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestDnssecPolicy1 overwrites any union data inside the ZoneRequest_DnssecPolicy as the provided ZoneRequestDnssecPolicy1
func (t *ZoneRequest_DnssecPolicy) FromZoneRequestDnssecPolicy1(v ZoneRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestDnssecPolicy1 performs a merge with any union data inside the ZoneRequest_DnssecPolicy, using the provided ZoneRequestDnssecPolicy1
func (t *ZoneRequest_DnssecPolicy) MergeZoneRequestDnssecPolicy1(v ZoneRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_DnssecPolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_DnssecPolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestRegistrant0 returns the union data inside the ZoneRequest_Registrant as a ZoneRequestRegistrant0
func (t ZoneRequest_Registrant) AsZoneRequestRegistrant0() (ZoneRequestRegistrant0, error) {
	var body ZoneRequestRegistrant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestRegistrant0 overwrites any union data inside the ZoneRequest_Registrant as the provided ZoneRequestRegistrant0
func (t *ZoneRequest_Registrant) FromZoneRequestRegistrant0(v ZoneRequestRegistrant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestRegistrant0 performs a merge with any union data inside the ZoneRequest_Registrant, using the provided ZoneRequestRegistrant0
func (t *ZoneRequest_Registrant) MergeZoneRequestRegistrant0(v ZoneRequestRegistrant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestRegistrant1 returns the union data inside the ZoneRequest_Registrant as a ZoneRequestRegistrant1
func (t ZoneRequest_Registrant) AsZoneRequestRegistrant1() (ZoneRequestRegistrant1, error) {
	var body ZoneRequestRegistrant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestRegistrant1 overwrites any union data inside the ZoneRequest_Registrant as the provided ZoneRequestRegistrant1
func (t *ZoneRequest_Registrant) FromZoneRequestRegistrant1(v ZoneRequestRegistrant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestRegistrant1 performs a merge with any union data inside the ZoneRequest_Registrant, using the provided ZoneRequestRegistrant1
func (t *ZoneRequest_Registrant) MergeZoneRequestRegistrant1(v ZoneRequestRegistrant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_Registrant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_Registrant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestRegistrar0 returns the union data inside the ZoneRequest_Registrar as a ZoneRequestRegistrar0
func (t ZoneRequest_Registrar) AsZoneRequestRegistrar0() (ZoneRequestRegistrar0, error) {
	var body ZoneRequestRegistrar0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestRegistrar0 overwrites any union data inside the ZoneRequest_Registrar as the provided ZoneRequestRegistrar0
func (t *ZoneRequest_Registrar) FromZoneRequestRegistrar0(v ZoneRequestRegistrar0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestRegistrar0 performs a merge with any union data inside the ZoneRequest_Registrar, using the provided ZoneRequestRegistrar0
func (t *ZoneRequest_Registrar) MergeZoneRequestRegistrar0(v ZoneRequestRegistrar0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestRegistrar1 returns the union data inside the ZoneRequest_Registrar as a ZoneRequestRegistrar1
func (t ZoneRequest_Registrar) AsZoneRequestRegistrar1() (ZoneRequestRegistrar1, error) {
	var body ZoneRequestRegistrar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestRegistrar1 overwrites any union data inside the ZoneRequest_Registrar as the provided ZoneRequestRegistrar1
func (t *ZoneRequest_Registrar) FromZoneRequestRegistrar1(v ZoneRequestRegistrar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestRegistrar1 performs a merge with any union data inside the ZoneRequest_Registrar, using the provided ZoneRequestRegistrar1
func (t *ZoneRequest_Registrar) MergeZoneRequestRegistrar1(v ZoneRequestRegistrar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_Registrar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_Registrar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestSoaMname0 returns the union data inside the ZoneRequest_SoaMname as a ZoneRequestSoaMname0
func (t ZoneRequest_SoaMname) AsZoneRequestSoaMname0() (ZoneRequestSoaMname0, error) {
	var body ZoneRequestSoaMname0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestSoaMname0 overwrites any union data inside the ZoneRequest_SoaMname as the provided ZoneRequestSoaMname0
func (t *ZoneRequest_SoaMname) FromZoneRequestSoaMname0(v ZoneRequestSoaMname0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestSoaMname0 performs a merge with any union data inside the ZoneRequest_SoaMname, using the provided ZoneRequestSoaMname0
func (t *ZoneRequest_SoaMname) MergeZoneRequestSoaMname0(v ZoneRequestSoaMname0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestSoaMname1 returns the union data inside the ZoneRequest_SoaMname as a ZoneRequestSoaMname1
func (t ZoneRequest_SoaMname) AsZoneRequestSoaMname1() (ZoneRequestSoaMname1, error) {
	var body ZoneRequestSoaMname1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestSoaMname1 overwrites any union data inside the ZoneRequest_SoaMname as the provided ZoneRequestSoaMname1
func (t *ZoneRequest_SoaMname) FromZoneRequestSoaMname1(v ZoneRequestSoaMname1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestSoaMname1 performs a merge with any union data inside the ZoneRequest_SoaMname, using the provided ZoneRequestSoaMname1
func (t *ZoneRequest_SoaMname) MergeZoneRequestSoaMname1(v ZoneRequestSoaMname1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_SoaMname) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_SoaMname) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestTechC0 returns the union data inside the ZoneRequest_TechC as a ZoneRequestTechC0
func (t ZoneRequest_TechC) AsZoneRequestTechC0() (ZoneRequestTechC0, error) {
	var body ZoneRequestTechC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestTechC0 overwrites any union data inside the ZoneRequest_TechC as the provided ZoneRequestTechC0
func (t *ZoneRequest_TechC) FromZoneRequestTechC0(v ZoneRequestTechC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestTechC0 performs a merge with any union data inside the ZoneRequest_TechC, using the provided ZoneRequestTechC0
func (t *ZoneRequest_TechC) MergeZoneRequestTechC0(v ZoneRequestTechC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestTechC1 returns the union data inside the ZoneRequest_TechC as a ZoneRequestTechC1
func (t ZoneRequest_TechC) AsZoneRequestTechC1() (ZoneRequestTechC1, error) {
	var body ZoneRequestTechC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestTechC1 overwrites any union data inside the ZoneRequest_TechC as the provided ZoneRequestTechC1
func (t *ZoneRequest_TechC) FromZoneRequestTechC1(v ZoneRequestTechC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestTechC1 performs a merge with any union data inside the ZoneRequest_TechC, using the provided ZoneRequestTechC1
func (t *ZoneRequest_TechC) MergeZoneRequestTechC1(v ZoneRequestTechC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_TechC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_TechC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestTemplate0 returns the union data inside the ZoneRequest_Template as a ZoneRequestTemplate0
func (t ZoneRequest_Template) AsZoneRequestTemplate0() (ZoneRequestTemplate0, error) {
	var body ZoneRequestTemplate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestTemplate0 overwrites any union data inside the ZoneRequest_Template as the provided ZoneRequestTemplate0
func (t *ZoneRequest_Template) FromZoneRequestTemplate0(v ZoneRequestTemplate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestTemplate0 performs a merge with any union data inside the ZoneRequest_Template, using the provided ZoneRequestTemplate0
func (t *ZoneRequest_Template) MergeZoneRequestTemplate0(v ZoneRequestTemplate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestTemplate1 returns the union data inside the ZoneRequest_Template as a ZoneRequestTemplate1
func (t ZoneRequest_Template) AsZoneRequestTemplate1() (ZoneRequestTemplate1, error) {
	var body ZoneRequestTemplate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestTemplate1 overwrites any union data inside the ZoneRequest_Template as the provided ZoneRequestTemplate1
func (t *ZoneRequest_Template) FromZoneRequestTemplate1(v ZoneRequestTemplate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestTemplate1 performs a merge with any union data inside the ZoneRequest_Template, using the provided ZoneRequestTemplate1
func (t *ZoneRequest_Template) MergeZoneRequestTemplate1(v ZoneRequestTemplate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_Template) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_Template) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestTenant0 returns the union data inside the ZoneRequest_Tenant as a ZoneRequestTenant0
func (t ZoneRequest_Tenant) AsZoneRequestTenant0() (ZoneRequestTenant0, error) {
	var body ZoneRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestTenant0 overwrites any union data inside the ZoneRequest_Tenant as the provided ZoneRequestTenant0
func (t *ZoneRequest_Tenant) FromZoneRequestTenant0(v ZoneRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestTenant0 performs a merge with any union data inside the ZoneRequest_Tenant, using the provided ZoneRequestTenant0
func (t *ZoneRequest_Tenant) MergeZoneRequestTenant0(v ZoneRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestTenant1 returns the union data inside the ZoneRequest_Tenant as a ZoneRequestTenant1
func (t ZoneRequest_Tenant) AsZoneRequestTenant1() (ZoneRequestTenant1, error) {
	var body ZoneRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestTenant1 overwrites any union data inside the ZoneRequest_Tenant as the provided ZoneRequestTenant1
func (t *ZoneRequest_Tenant) FromZoneRequestTenant1(v ZoneRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestTenant1 performs a merge with any union data inside the ZoneRequest_Tenant, using the provided ZoneRequestTenant1
func (t *ZoneRequest_Tenant) MergeZoneRequestTenant1(v ZoneRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneRequestView0 returns the union data inside the ZoneRequest_View as a ZoneRequestView0
func (t ZoneRequest_View) AsZoneRequestView0() (ZoneRequestView0, error) {
	var body ZoneRequestView0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestView0 overwrites any union data inside the ZoneRequest_View as the provided ZoneRequestView0
func (t *ZoneRequest_View) FromZoneRequestView0(v ZoneRequestView0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestView0 performs a merge with any union data inside the ZoneRequest_View, using the provided ZoneRequestView0
func (t *ZoneRequest_View) MergeZoneRequestView0(v ZoneRequestView0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneRequestView1 returns the union data inside the ZoneRequest_View as a ZoneRequestView1
func (t ZoneRequest_View) AsZoneRequestView1() (ZoneRequestView1, error) {
	var body ZoneRequestView1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneRequestView1 overwrites any union data inside the ZoneRequest_View as the provided ZoneRequestView1
func (t *ZoneRequest_View) FromZoneRequestView1(v ZoneRequestView1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneRequestView1 performs a merge with any union data inside the ZoneRequest_View, using the provided ZoneRequestView1
func (t *ZoneRequest_View) MergeZoneRequestView1(v ZoneRequestView1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneRequest_View) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneRequest_View) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestAdminC0 returns the union data inside the ZoneTemplateRequest_AdminC as a ZoneTemplateRequestAdminC0
func (t ZoneTemplateRequest_AdminC) AsZoneTemplateRequestAdminC0() (ZoneTemplateRequestAdminC0, error) {
	var body ZoneTemplateRequestAdminC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestAdminC0 overwrites any union data inside the ZoneTemplateRequest_AdminC as the provided ZoneTemplateRequestAdminC0
func (t *ZoneTemplateRequest_AdminC) FromZoneTemplateRequestAdminC0(v ZoneTemplateRequestAdminC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestAdminC0 performs a merge with any union data inside the ZoneTemplateRequest_AdminC, using the provided ZoneTemplateRequestAdminC0
func (t *ZoneTemplateRequest_AdminC) MergeZoneTemplateRequestAdminC0(v ZoneTemplateRequestAdminC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestAdminC1 returns the union data inside the ZoneTemplateRequest_AdminC as a ZoneTemplateRequestAdminC1
func (t ZoneTemplateRequest_AdminC) AsZoneTemplateRequestAdminC1() (ZoneTemplateRequestAdminC1, error) {
	var body ZoneTemplateRequestAdminC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestAdminC1 overwrites any union data inside the ZoneTemplateRequest_AdminC as the provided ZoneTemplateRequestAdminC1
func (t *ZoneTemplateRequest_AdminC) FromZoneTemplateRequestAdminC1(v ZoneTemplateRequestAdminC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestAdminC1 performs a merge with any union data inside the ZoneTemplateRequest_AdminC, using the provided ZoneTemplateRequestAdminC1
func (t *ZoneTemplateRequest_AdminC) MergeZoneTemplateRequestAdminC1(v ZoneTemplateRequestAdminC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_AdminC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_AdminC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestBillingC0 returns the union data inside the ZoneTemplateRequest_BillingC as a ZoneTemplateRequestBillingC0
func (t ZoneTemplateRequest_BillingC) AsZoneTemplateRequestBillingC0() (ZoneTemplateRequestBillingC0, error) {
	var body ZoneTemplateRequestBillingC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestBillingC0 overwrites any union data inside the ZoneTemplateRequest_BillingC as the provided ZoneTemplateRequestBillingC0
func (t *ZoneTemplateRequest_BillingC) FromZoneTemplateRequestBillingC0(v ZoneTemplateRequestBillingC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestBillingC0 performs a merge with any union data inside the ZoneTemplateRequest_BillingC, using the provided ZoneTemplateRequestBillingC0
func (t *ZoneTemplateRequest_BillingC) MergeZoneTemplateRequestBillingC0(v ZoneTemplateRequestBillingC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestBillingC1 returns the union data inside the ZoneTemplateRequest_BillingC as a ZoneTemplateRequestBillingC1
func (t ZoneTemplateRequest_BillingC) AsZoneTemplateRequestBillingC1() (ZoneTemplateRequestBillingC1, error) {
	var body ZoneTemplateRequestBillingC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestBillingC1 overwrites any union data inside the ZoneTemplateRequest_BillingC as the provided ZoneTemplateRequestBillingC1
func (t *ZoneTemplateRequest_BillingC) FromZoneTemplateRequestBillingC1(v ZoneTemplateRequestBillingC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestBillingC1 performs a merge with any union data inside the ZoneTemplateRequest_BillingC, using the provided ZoneTemplateRequestBillingC1
func (t *ZoneTemplateRequest_BillingC) MergeZoneTemplateRequestBillingC1(v ZoneTemplateRequestBillingC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_BillingC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_BillingC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestDnssecPolicy0 returns the union data inside the ZoneTemplateRequest_DnssecPolicy as a ZoneTemplateRequestDnssecPolicy0
func (t ZoneTemplateRequest_DnssecPolicy) AsZoneTemplateRequestDnssecPolicy0() (ZoneTemplateRequestDnssecPolicy0, error) {
	var body ZoneTemplateRequestDnssecPolicy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestDnssecPolicy0 overwrites any union data inside the ZoneTemplateRequest_DnssecPolicy as the provided ZoneTemplateRequestDnssecPolicy0
func (t *ZoneTemplateRequest_DnssecPolicy) FromZoneTemplateRequestDnssecPolicy0(v ZoneTemplateRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestDnssecPolicy0 performs a merge with any union data inside the ZoneTemplateRequest_DnssecPolicy, using the provided ZoneTemplateRequestDnssecPolicy0
func (t *ZoneTemplateRequest_DnssecPolicy) MergeZoneTemplateRequestDnssecPolicy0(v ZoneTemplateRequestDnssecPolicy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestDnssecPolicy1 returns the union data inside the ZoneTemplateRequest_DnssecPolicy as a ZoneTemplateRequestDnssecPolicy1
func (t ZoneTemplateRequest_DnssecPolicy) AsZoneTemplateRequestDnssecPolicy1() (ZoneTemplateRequestDnssecPolicy1, error) {
	var body ZoneTemplateRequestDnssecPolicy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestDnssecPolicy1 overwrites any union data inside the ZoneTemplateRequest_DnssecPolicy as the provided ZoneTemplateRequestDnssecPolicy1
func (t *ZoneTemplateRequest_DnssecPolicy) FromZoneTemplateRequestDnssecPolicy1(v ZoneTemplateRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestDnssecPolicy1 performs a merge with any union data inside the ZoneTemplateRequest_DnssecPolicy, using the provided ZoneTemplateRequestDnssecPolicy1
func (t *ZoneTemplateRequest_DnssecPolicy) MergeZoneTemplateRequestDnssecPolicy1(v ZoneTemplateRequestDnssecPolicy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_DnssecPolicy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_DnssecPolicy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestRegistrant0 returns the union data inside the ZoneTemplateRequest_Registrant as a ZoneTemplateRequestRegistrant0
func (t ZoneTemplateRequest_Registrant) AsZoneTemplateRequestRegistrant0() (ZoneTemplateRequestRegistrant0, error) {
	var body ZoneTemplateRequestRegistrant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestRegistrant0 overwrites any union data inside the ZoneTemplateRequest_Registrant as the provided ZoneTemplateRequestRegistrant0
func (t *ZoneTemplateRequest_Registrant) FromZoneTemplateRequestRegistrant0(v ZoneTemplateRequestRegistrant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestRegistrant0 performs a merge with any union data inside the ZoneTemplateRequest_Registrant, using the provided ZoneTemplateRequestRegistrant0
func (t *ZoneTemplateRequest_Registrant) MergeZoneTemplateRequestRegistrant0(v ZoneTemplateRequestRegistrant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestRegistrant1 returns the union data inside the ZoneTemplateRequest_Registrant as a ZoneTemplateRequestRegistrant1
func (t ZoneTemplateRequest_Registrant) AsZoneTemplateRequestRegistrant1() (ZoneTemplateRequestRegistrant1, error) {
	var body ZoneTemplateRequestRegistrant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestRegistrant1 overwrites any union data inside the ZoneTemplateRequest_Registrant as the provided ZoneTemplateRequestRegistrant1
func (t *ZoneTemplateRequest_Registrant) FromZoneTemplateRequestRegistrant1(v ZoneTemplateRequestRegistrant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestRegistrant1 performs a merge with any union data inside the ZoneTemplateRequest_Registrant, using the provided ZoneTemplateRequestRegistrant1
func (t *ZoneTemplateRequest_Registrant) MergeZoneTemplateRequestRegistrant1(v ZoneTemplateRequestRegistrant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_Registrant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_Registrant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestRegistrar0 returns the union data inside the ZoneTemplateRequest_Registrar as a ZoneTemplateRequestRegistrar0
func (t ZoneTemplateRequest_Registrar) AsZoneTemplateRequestRegistrar0() (ZoneTemplateRequestRegistrar0, error) {
	var body ZoneTemplateRequestRegistrar0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestRegistrar0 overwrites any union data inside the ZoneTemplateRequest_Registrar as the provided ZoneTemplateRequestRegistrar0
func (t *ZoneTemplateRequest_Registrar) FromZoneTemplateRequestRegistrar0(v ZoneTemplateRequestRegistrar0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestRegistrar0 performs a merge with any union data inside the ZoneTemplateRequest_Registrar, using the provided ZoneTemplateRequestRegistrar0
func (t *ZoneTemplateRequest_Registrar) MergeZoneTemplateRequestRegistrar0(v ZoneTemplateRequestRegistrar0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestRegistrar1 returns the union data inside the ZoneTemplateRequest_Registrar as a ZoneTemplateRequestRegistrar1
func (t ZoneTemplateRequest_Registrar) AsZoneTemplateRequestRegistrar1() (ZoneTemplateRequestRegistrar1, error) {
	var body ZoneTemplateRequestRegistrar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestRegistrar1 overwrites any union data inside the ZoneTemplateRequest_Registrar as the provided ZoneTemplateRequestRegistrar1
func (t *ZoneTemplateRequest_Registrar) FromZoneTemplateRequestRegistrar1(v ZoneTemplateRequestRegistrar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestRegistrar1 performs a merge with any union data inside the ZoneTemplateRequest_Registrar, using the provided ZoneTemplateRequestRegistrar1
func (t *ZoneTemplateRequest_Registrar) MergeZoneTemplateRequestRegistrar1(v ZoneTemplateRequestRegistrar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_Registrar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_Registrar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestSoaMname0 returns the union data inside the ZoneTemplateRequest_SoaMname as a ZoneTemplateRequestSoaMname0
func (t ZoneTemplateRequest_SoaMname) AsZoneTemplateRequestSoaMname0() (ZoneTemplateRequestSoaMname0, error) {
	var body ZoneTemplateRequestSoaMname0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestSoaMname0 overwrites any union data inside the ZoneTemplateRequest_SoaMname as the provided ZoneTemplateRequestSoaMname0
func (t *ZoneTemplateRequest_SoaMname) FromZoneTemplateRequestSoaMname0(v ZoneTemplateRequestSoaMname0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestSoaMname0 performs a merge with any union data inside the ZoneTemplateRequest_SoaMname, using the provided ZoneTemplateRequestSoaMname0
func (t *ZoneTemplateRequest_SoaMname) MergeZoneTemplateRequestSoaMname0(v ZoneTemplateRequestSoaMname0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestSoaMname1 returns the union data inside the ZoneTemplateRequest_SoaMname as a ZoneTemplateRequestSoaMname1
func (t ZoneTemplateRequest_SoaMname) AsZoneTemplateRequestSoaMname1() (ZoneTemplateRequestSoaMname1, error) {
	var body ZoneTemplateRequestSoaMname1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestSoaMname1 overwrites any union data inside the ZoneTemplateRequest_SoaMname as the provided ZoneTemplateRequestSoaMname1
func (t *ZoneTemplateRequest_SoaMname) FromZoneTemplateRequestSoaMname1(v ZoneTemplateRequestSoaMname1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestSoaMname1 performs a merge with any union data inside the ZoneTemplateRequest_SoaMname, using the provided ZoneTemplateRequestSoaMname1
func (t *ZoneTemplateRequest_SoaMname) MergeZoneTemplateRequestSoaMname1(v ZoneTemplateRequestSoaMname1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_SoaMname) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_SoaMname) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestTechC0 returns the union data inside the ZoneTemplateRequest_TechC as a ZoneTemplateRequestTechC0
func (t ZoneTemplateRequest_TechC) AsZoneTemplateRequestTechC0() (ZoneTemplateRequestTechC0, error) {
	var body ZoneTemplateRequestTechC0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestTechC0 overwrites any union data inside the ZoneTemplateRequest_TechC as the provided ZoneTemplateRequestTechC0
func (t *ZoneTemplateRequest_TechC) FromZoneTemplateRequestTechC0(v ZoneTemplateRequestTechC0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestTechC0 performs a merge with any union data inside the ZoneTemplateRequest_TechC, using the provided ZoneTemplateRequestTechC0
func (t *ZoneTemplateRequest_TechC) MergeZoneTemplateRequestTechC0(v ZoneTemplateRequestTechC0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestTechC1 returns the union data inside the ZoneTemplateRequest_TechC as a ZoneTemplateRequestTechC1
func (t ZoneTemplateRequest_TechC) AsZoneTemplateRequestTechC1() (ZoneTemplateRequestTechC1, error) {
	var body ZoneTemplateRequestTechC1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestTechC1 overwrites any union data inside the ZoneTemplateRequest_TechC as the provided ZoneTemplateRequestTechC1
func (t *ZoneTemplateRequest_TechC) FromZoneTemplateRequestTechC1(v ZoneTemplateRequestTechC1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestTechC1 performs a merge with any union data inside the ZoneTemplateRequest_TechC, using the provided ZoneTemplateRequestTechC1
func (t *ZoneTemplateRequest_TechC) MergeZoneTemplateRequestTechC1(v ZoneTemplateRequestTechC1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_TechC) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_TechC) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsZoneTemplateRequestTenant0 returns the union data inside the ZoneTemplateRequest_Tenant as a ZoneTemplateRequestTenant0
func (t ZoneTemplateRequest_Tenant) AsZoneTemplateRequestTenant0() (ZoneTemplateRequestTenant0, error) {
	var body ZoneTemplateRequestTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestTenant0 overwrites any union data inside the ZoneTemplateRequest_Tenant as the provided ZoneTemplateRequestTenant0
func (t *ZoneTemplateRequest_Tenant) FromZoneTemplateRequestTenant0(v ZoneTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestTenant0 performs a merge with any union data inside the ZoneTemplateRequest_Tenant, using the provided ZoneTemplateRequestTenant0
func (t *ZoneTemplateRequest_Tenant) MergeZoneTemplateRequestTenant0(v ZoneTemplateRequestTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsZoneTemplateRequestTenant1 returns the union data inside the ZoneTemplateRequest_Tenant as a ZoneTemplateRequestTenant1
func (t ZoneTemplateRequest_Tenant) AsZoneTemplateRequestTenant1() (ZoneTemplateRequestTenant1, error) {
	var body ZoneTemplateRequestTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromZoneTemplateRequestTenant1 overwrites any union data inside the ZoneTemplateRequest_Tenant as the provided ZoneTemplateRequestTenant1
func (t *ZoneTemplateRequest_Tenant) FromZoneTemplateRequestTenant1(v ZoneTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeZoneTemplateRequestTenant1 performs a merge with any union data inside the ZoneTemplateRequest_Tenant, using the provided ZoneTemplateRequestTenant1
func (t *ZoneTemplateRequest_Tenant) MergeZoneTemplateRequestTenant1(v ZoneTemplateRequestTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ZoneTemplateRequest_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ZoneTemplateRequest_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PluginsNetboxDnsContactsBulkDestroyWithBody request with any body
	PluginsNetboxDnsContactsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsContactsBulkDestroy(ctx context.Context, body PluginsNetboxDnsContactsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsList request
	PluginsNetboxDnsContactsList(ctx context.Context, params *PluginsNetboxDnsContactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsContactsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsContactsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsContactsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsCreateWithBody request with any body
	PluginsNetboxDnsContactsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsContactsCreate(ctx context.Context, body PluginsNetboxDnsContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsBulkUpdateWithBody request with any body
	PluginsNetboxDnsContactsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsContactsBulkUpdate(ctx context.Context, body PluginsNetboxDnsContactsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsDestroy request
	PluginsNetboxDnsContactsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsRetrieve request
	PluginsNetboxDnsContactsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsPartialUpdateWithBody request with any body
	PluginsNetboxDnsContactsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsContactsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsContactsUpdateWithBody request with any body
	PluginsNetboxDnsContactsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsContactsUpdate(ctx context.Context, id int, body PluginsNetboxDnsContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBody request with any body
	PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnsseckeytemplatesBulkDestroy(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesList request
	PluginsNetboxDnsDnsseckeytemplatesList(ctx context.Context, params *PluginsNetboxDnsDnsseckeytemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesCreateWithBody request with any body
	PluginsNetboxDnsDnsseckeytemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnsseckeytemplatesCreate(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBody request with any body
	PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnsseckeytemplatesBulkUpdate(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesDestroy request
	PluginsNetboxDnsDnsseckeytemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesRetrieve request
	PluginsNetboxDnsDnsseckeytemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBody request with any body
	PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnsseckeytemplatesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnsseckeytemplatesUpdateWithBody request with any body
	PluginsNetboxDnsDnsseckeytemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnsseckeytemplatesUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBody request with any body
	PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnssecpoliciesBulkDestroy(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesList request
	PluginsNetboxDnsDnssecpoliciesList(ctx context.Context, params *PluginsNetboxDnsDnssecpoliciesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesCreateWithBody request with any body
	PluginsNetboxDnsDnssecpoliciesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnssecpoliciesCreate(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBody request with any body
	PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnssecpoliciesBulkUpdate(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesDestroy request
	PluginsNetboxDnsDnssecpoliciesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesRetrieve request
	PluginsNetboxDnsDnssecpoliciesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBody request with any body
	PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnssecpoliciesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsDnssecpoliciesUpdateWithBody request with any body
	PluginsNetboxDnsDnssecpoliciesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsDnssecpoliciesUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversBulkDestroyWithBody request with any body
	PluginsNetboxDnsNameserversBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsNameserversBulkDestroy(ctx context.Context, body PluginsNetboxDnsNameserversBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversList request
	PluginsNetboxDnsNameserversList(ctx context.Context, params *PluginsNetboxDnsNameserversListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsNameserversBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsNameserversBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsNameserversBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversCreateWithBody request with any body
	PluginsNetboxDnsNameserversCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsNameserversCreate(ctx context.Context, body PluginsNetboxDnsNameserversCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversBulkUpdateWithBody request with any body
	PluginsNetboxDnsNameserversBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsNameserversBulkUpdate(ctx context.Context, body PluginsNetboxDnsNameserversBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversDestroy request
	PluginsNetboxDnsNameserversDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversRetrieve request
	PluginsNetboxDnsNameserversRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversPartialUpdateWithBody request with any body
	PluginsNetboxDnsNameserversPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsNameserversPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsNameserversPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsNameserversUpdateWithBody request with any body
	PluginsNetboxDnsNameserversUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsNameserversUpdate(ctx context.Context, id int, body PluginsNetboxDnsNameserversUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesBulkDestroyWithBody request with any body
	PluginsNetboxDnsPrefixesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsPrefixesBulkDestroy(ctx context.Context, body PluginsNetboxDnsPrefixesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesList request
	PluginsNetboxDnsPrefixesList(ctx context.Context, params *PluginsNetboxDnsPrefixesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsPrefixesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsPrefixesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsPrefixesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesCreateWithBody request with any body
	PluginsNetboxDnsPrefixesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsPrefixesCreate(ctx context.Context, body PluginsNetboxDnsPrefixesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesBulkUpdateWithBody request with any body
	PluginsNetboxDnsPrefixesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsPrefixesBulkUpdate(ctx context.Context, body PluginsNetboxDnsPrefixesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesDestroy request
	PluginsNetboxDnsPrefixesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesRetrieve request
	PluginsNetboxDnsPrefixesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesPartialUpdateWithBody request with any body
	PluginsNetboxDnsPrefixesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsPrefixesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsPrefixesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsPrefixesUpdateWithBody request with any body
	PluginsNetboxDnsPrefixesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsPrefixesUpdate(ctx context.Context, id int, body PluginsNetboxDnsPrefixesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsBulkDestroyWithBody request with any body
	PluginsNetboxDnsRecordsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordsBulkDestroy(ctx context.Context, body PluginsNetboxDnsRecordsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsList request
	PluginsNetboxDnsRecordsList(ctx context.Context, params *PluginsNetboxDnsRecordsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsRecordsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsRecordsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsCreateWithBody request with any body
	PluginsNetboxDnsRecordsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordsCreate(ctx context.Context, body PluginsNetboxDnsRecordsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsBulkUpdateWithBody request with any body
	PluginsNetboxDnsRecordsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordsBulkUpdate(ctx context.Context, body PluginsNetboxDnsRecordsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsDestroy request
	PluginsNetboxDnsRecordsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsRetrieve request
	PluginsNetboxDnsRecordsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsPartialUpdateWithBody request with any body
	PluginsNetboxDnsRecordsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordsUpdateWithBody request with any body
	PluginsNetboxDnsRecordsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordsUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesBulkDestroyWithBody request with any body
	PluginsNetboxDnsRecordtemplatesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordtemplatesBulkDestroy(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesList request
	PluginsNetboxDnsRecordtemplatesList(ctx context.Context, params *PluginsNetboxDnsRecordtemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordtemplatesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesCreateWithBody request with any body
	PluginsNetboxDnsRecordtemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordtemplatesCreate(ctx context.Context, body PluginsNetboxDnsRecordtemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesBulkUpdateWithBody request with any body
	PluginsNetboxDnsRecordtemplatesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordtemplatesBulkUpdate(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesDestroy request
	PluginsNetboxDnsRecordtemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesRetrieve request
	PluginsNetboxDnsRecordtemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesPartialUpdateWithBody request with any body
	PluginsNetboxDnsRecordtemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordtemplatesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRecordtemplatesUpdateWithBody request with any body
	PluginsNetboxDnsRecordtemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRecordtemplatesUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsBulkDestroyWithBody request with any body
	PluginsNetboxDnsRegistrarsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRegistrarsBulkDestroy(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsList request
	PluginsNetboxDnsRegistrarsList(ctx context.Context, params *PluginsNetboxDnsRegistrarsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRegistrarsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsCreateWithBody request with any body
	PluginsNetboxDnsRegistrarsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRegistrarsCreate(ctx context.Context, body PluginsNetboxDnsRegistrarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsBulkUpdateWithBody request with any body
	PluginsNetboxDnsRegistrarsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRegistrarsBulkUpdate(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsDestroy request
	PluginsNetboxDnsRegistrarsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsRetrieve request
	PluginsNetboxDnsRegistrarsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsPartialUpdateWithBody request with any body
	PluginsNetboxDnsRegistrarsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRegistrarsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsRegistrarsUpdateWithBody request with any body
	PluginsNetboxDnsRegistrarsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsRegistrarsUpdate(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsBulkDestroyWithBody request with any body
	PluginsNetboxDnsViewsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsViewsBulkDestroy(ctx context.Context, body PluginsNetboxDnsViewsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsList request
	PluginsNetboxDnsViewsList(ctx context.Context, params *PluginsNetboxDnsViewsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsViewsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsViewsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsViewsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsCreateWithBody request with any body
	PluginsNetboxDnsViewsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsViewsCreate(ctx context.Context, body PluginsNetboxDnsViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsBulkUpdateWithBody request with any body
	PluginsNetboxDnsViewsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsViewsBulkUpdate(ctx context.Context, body PluginsNetboxDnsViewsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsDestroy request
	PluginsNetboxDnsViewsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsRetrieve request
	PluginsNetboxDnsViewsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsPartialUpdateWithBody request with any body
	PluginsNetboxDnsViewsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsViewsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsViewsUpdateWithBody request with any body
	PluginsNetboxDnsViewsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsViewsUpdate(ctx context.Context, id int, body PluginsNetboxDnsViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesBulkDestroyWithBody request with any body
	PluginsNetboxDnsZonesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonesBulkDestroy(ctx context.Context, body PluginsNetboxDnsZonesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesList request
	PluginsNetboxDnsZonesList(ctx context.Context, params *PluginsNetboxDnsZonesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsZonesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsZonesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesCreateWithBody request with any body
	PluginsNetboxDnsZonesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonesCreate(ctx context.Context, body PluginsNetboxDnsZonesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesBulkUpdateWithBody request with any body
	PluginsNetboxDnsZonesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonesBulkUpdate(ctx context.Context, body PluginsNetboxDnsZonesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesDestroy request
	PluginsNetboxDnsZonesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesRetrieve request
	PluginsNetboxDnsZonesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesPartialUpdateWithBody request with any body
	PluginsNetboxDnsZonesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonesUpdateWithBody request with any body
	PluginsNetboxDnsZonesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonesUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesBulkDestroyWithBody request with any body
	PluginsNetboxDnsZonetemplatesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonetemplatesBulkDestroy(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesList request
	PluginsNetboxDnsZonetemplatesList(ctx context.Context, params *PluginsNetboxDnsZonetemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBody request with any body
	PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonetemplatesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesCreateWithBody request with any body
	PluginsNetboxDnsZonetemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonetemplatesCreate(ctx context.Context, body PluginsNetboxDnsZonetemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesBulkUpdateWithBody request with any body
	PluginsNetboxDnsZonetemplatesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonetemplatesBulkUpdate(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesDestroy request
	PluginsNetboxDnsZonetemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesRetrieve request
	PluginsNetboxDnsZonetemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesPartialUpdateWithBody request with any body
	PluginsNetboxDnsZonetemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonetemplatesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxDnsZonetemplatesUpdateWithBody request with any body
	PluginsNetboxDnsZonetemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxDnsZonetemplatesUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileBulkDestroyWithBody request with any body
	PluginsNetboxdhcpProfileBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxdhcpProfileBulkDestroy(ctx context.Context, body PluginsNetboxdhcpProfileBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileList request
	PluginsNetboxdhcpProfileList(ctx context.Context, params *PluginsNetboxdhcpProfileListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileBulkPartialUpdateWithBody request with any body
	PluginsNetboxdhcpProfileBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxdhcpProfileBulkPartialUpdate(ctx context.Context, body PluginsNetboxdhcpProfileBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileCreateWithBody request with any body
	PluginsNetboxdhcpProfileCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxdhcpProfileCreate(ctx context.Context, body PluginsNetboxdhcpProfileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileBulkUpdateWithBody request with any body
	PluginsNetboxdhcpProfileBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxdhcpProfileBulkUpdate(ctx context.Context, body PluginsNetboxdhcpProfileBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileDestroy request
	PluginsNetboxdhcpProfileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileRetrieve request
	PluginsNetboxdhcpProfileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfilePartialUpdateWithBody request with any body
	PluginsNetboxdhcpProfilePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxdhcpProfilePartialUpdate(ctx context.Context, id int, body PluginsNetboxdhcpProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsNetboxdhcpProfileUpdateWithBody request with any body
	PluginsNetboxdhcpProfileUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsNetboxdhcpProfileUpdate(ctx context.Context, id int, body PluginsNetboxdhcpProfileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PluginsNetboxDnsContactsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsBulkDestroy(ctx context.Context, body PluginsNetboxDnsContactsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsList(ctx context.Context, params *PluginsNetboxDnsContactsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsContactsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsCreate(ctx context.Context, body PluginsNetboxDnsContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsBulkUpdate(ctx context.Context, body PluginsNetboxDnsContactsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsContactsUpdate(ctx context.Context, id int, body PluginsNetboxDnsContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsContactsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesBulkDestroy(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesList(ctx context.Context, params *PluginsNetboxDnsDnsseckeytemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesCreate(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesBulkUpdate(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnsseckeytemplatesUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnsseckeytemplatesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesBulkDestroy(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesList(ctx context.Context, params *PluginsNetboxDnsDnssecpoliciesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesCreate(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesBulkUpdate(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsDnssecpoliciesUpdate(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsDnssecpoliciesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversBulkDestroy(ctx context.Context, body PluginsNetboxDnsNameserversBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversList(ctx context.Context, params *PluginsNetboxDnsNameserversListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsNameserversBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversCreate(ctx context.Context, body PluginsNetboxDnsNameserversCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversBulkUpdate(ctx context.Context, body PluginsNetboxDnsNameserversBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsNameserversPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsNameserversUpdate(ctx context.Context, id int, body PluginsNetboxDnsNameserversUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsNameserversUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesBulkDestroy(ctx context.Context, body PluginsNetboxDnsPrefixesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesList(ctx context.Context, params *PluginsNetboxDnsPrefixesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsPrefixesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesCreate(ctx context.Context, body PluginsNetboxDnsPrefixesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesBulkUpdate(ctx context.Context, body PluginsNetboxDnsPrefixesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsPrefixesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsPrefixesUpdate(ctx context.Context, id int, body PluginsNetboxDnsPrefixesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsPrefixesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsBulkDestroy(ctx context.Context, body PluginsNetboxDnsRecordsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsList(ctx context.Context, params *PluginsNetboxDnsRecordsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsRecordsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsCreate(ctx context.Context, body PluginsNetboxDnsRecordsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsBulkUpdate(ctx context.Context, body PluginsNetboxDnsRecordsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordsUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesBulkDestroy(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesList(ctx context.Context, params *PluginsNetboxDnsRecordtemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesCreate(ctx context.Context, body PluginsNetboxDnsRecordtemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesBulkUpdate(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRecordtemplatesUpdate(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRecordtemplatesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsBulkDestroy(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsList(ctx context.Context, params *PluginsNetboxDnsRegistrarsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsCreate(ctx context.Context, body PluginsNetboxDnsRegistrarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsBulkUpdate(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsRegistrarsUpdate(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsRegistrarsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsBulkDestroy(ctx context.Context, body PluginsNetboxDnsViewsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsList(ctx context.Context, params *PluginsNetboxDnsViewsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsViewsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsCreate(ctx context.Context, body PluginsNetboxDnsViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsBulkUpdate(ctx context.Context, body PluginsNetboxDnsViewsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsViewsUpdate(ctx context.Context, id int, body PluginsNetboxDnsViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsViewsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesBulkDestroy(ctx context.Context, body PluginsNetboxDnsZonesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesList(ctx context.Context, params *PluginsNetboxDnsZonesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsZonesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesCreate(ctx context.Context, body PluginsNetboxDnsZonesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesBulkUpdate(ctx context.Context, body PluginsNetboxDnsZonesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonesUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesBulkDestroy(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesList(ctx context.Context, params *PluginsNetboxDnsZonetemplatesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesBulkPartialUpdate(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesCreate(ctx context.Context, body PluginsNetboxDnsZonetemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesBulkUpdate(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesPartialUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxDnsZonetemplatesUpdate(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxDnsZonetemplatesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileBulkDestroy(ctx context.Context, body PluginsNetboxdhcpProfileBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileList(ctx context.Context, params *PluginsNetboxdhcpProfileListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileBulkPartialUpdate(ctx context.Context, body PluginsNetboxdhcpProfileBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileCreate(ctx context.Context, body PluginsNetboxdhcpProfileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileBulkUpdate(ctx context.Context, body PluginsNetboxdhcpProfileBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfilePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfilePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfilePartialUpdate(ctx context.Context, id int, body PluginsNetboxdhcpProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfilePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsNetboxdhcpProfileUpdate(ctx context.Context, id int, body PluginsNetboxdhcpProfileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsNetboxdhcpProfileUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPluginsNetboxDnsContactsBulkDestroyRequest calls the generic PluginsNetboxDnsContactsBulkDestroy builder with application/json body
func NewPluginsNetboxDnsContactsBulkDestroyRequest(server string, body PluginsNetboxDnsContactsBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsContactsBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsContactsBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsContactsBulkDestroy with any type of body
func NewPluginsNetboxDnsContactsBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsContactsListRequest generates requests for PluginsNetboxDnsContactsList
func NewPluginsNetboxDnsContactsListRequest(server string, params *PluginsNetboxDnsContactsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.City != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city", runtime.ParamLocationQuery, *params.City); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__empty", runtime.ParamLocationQuery, *params.CityEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__ic", runtime.ParamLocationQuery, *params.CityIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__ie", runtime.ParamLocationQuery, *params.CityIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__iew", runtime.ParamLocationQuery, *params.CityIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__isw", runtime.ParamLocationQuery, *params.CityIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__n", runtime.ParamLocationQuery, *params.CityN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__nic", runtime.ParamLocationQuery, *params.CityNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__nie", runtime.ParamLocationQuery, *params.CityNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__niew", runtime.ParamLocationQuery, *params.CityNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CityNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "city__nisw", runtime.ParamLocationQuery, *params.CityNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id", runtime.ParamLocationQuery, *params.ContactId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__empty", runtime.ParamLocationQuery, *params.ContactIdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__ic", runtime.ParamLocationQuery, *params.ContactIdIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__ie", runtime.ParamLocationQuery, *params.ContactIdIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__iew", runtime.ParamLocationQuery, *params.ContactIdIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__isw", runtime.ParamLocationQuery, *params.ContactIdIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__n", runtime.ParamLocationQuery, *params.ContactIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__nic", runtime.ParamLocationQuery, *params.ContactIdNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__nie", runtime.ParamLocationQuery, *params.ContactIdNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__niew", runtime.ParamLocationQuery, *params.ContactIdNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactIdNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_id__nisw", runtime.ParamLocationQuery, *params.ContactIdNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Country != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__empty", runtime.ParamLocationQuery, *params.CountryEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__ic", runtime.ParamLocationQuery, *params.CountryIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__ie", runtime.ParamLocationQuery, *params.CountryIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__iew", runtime.ParamLocationQuery, *params.CountryIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__isw", runtime.ParamLocationQuery, *params.CountryIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__n", runtime.ParamLocationQuery, *params.CountryN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__nic", runtime.ParamLocationQuery, *params.CountryNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__nie", runtime.ParamLocationQuery, *params.CountryNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__niew", runtime.ParamLocationQuery, *params.CountryNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CountryNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country__nisw", runtime.ParamLocationQuery, *params.CountryNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__empty", runtime.ParamLocationQuery, *params.EmailEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__ic", runtime.ParamLocationQuery, *params.EmailIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__ie", runtime.ParamLocationQuery, *params.EmailIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__iew", runtime.ParamLocationQuery, *params.EmailIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__isw", runtime.ParamLocationQuery, *params.EmailIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__n", runtime.ParamLocationQuery, *params.EmailN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__nic", runtime.ParamLocationQuery, *params.EmailNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__nie", runtime.ParamLocationQuery, *params.EmailNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__niew", runtime.ParamLocationQuery, *params.EmailNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__nisw", runtime.ParamLocationQuery, *params.EmailNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fax != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax", runtime.ParamLocationQuery, *params.Fax); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__empty", runtime.ParamLocationQuery, *params.FaxEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__ic", runtime.ParamLocationQuery, *params.FaxIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__ie", runtime.ParamLocationQuery, *params.FaxIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__iew", runtime.ParamLocationQuery, *params.FaxIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__isw", runtime.ParamLocationQuery, *params.FaxIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__n", runtime.ParamLocationQuery, *params.FaxN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__nic", runtime.ParamLocationQuery, *params.FaxNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__nie", runtime.ParamLocationQuery, *params.FaxNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__niew", runtime.ParamLocationQuery, *params.FaxNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax__nisw", runtime.ParamLocationQuery, *params.FaxNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext", runtime.ParamLocationQuery, *params.FaxExt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__empty", runtime.ParamLocationQuery, *params.FaxExtEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__ic", runtime.ParamLocationQuery, *params.FaxExtIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__ie", runtime.ParamLocationQuery, *params.FaxExtIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__iew", runtime.ParamLocationQuery, *params.FaxExtIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__isw", runtime.ParamLocationQuery, *params.FaxExtIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__n", runtime.ParamLocationQuery, *params.FaxExtN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__nic", runtime.ParamLocationQuery, *params.FaxExtNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__nie", runtime.ParamLocationQuery, *params.FaxExtNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__niew", runtime.ParamLocationQuery, *params.FaxExtNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FaxExtNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fax_ext__nisw", runtime.ParamLocationQuery, *params.FaxExtNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Organization != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization", runtime.ParamLocationQuery, *params.Organization); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__empty", runtime.ParamLocationQuery, *params.OrganizationEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__ic", runtime.ParamLocationQuery, *params.OrganizationIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__ie", runtime.ParamLocationQuery, *params.OrganizationIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__iew", runtime.ParamLocationQuery, *params.OrganizationIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__isw", runtime.ParamLocationQuery, *params.OrganizationIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__n", runtime.ParamLocationQuery, *params.OrganizationN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__nic", runtime.ParamLocationQuery, *params.OrganizationNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__nie", runtime.ParamLocationQuery, *params.OrganizationNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__niew", runtime.ParamLocationQuery, *params.OrganizationNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organization__nisw", runtime.ParamLocationQuery, *params.OrganizationNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Phone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone", runtime.ParamLocationQuery, *params.Phone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__empty", runtime.ParamLocationQuery, *params.PhoneEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__ic", runtime.ParamLocationQuery, *params.PhoneIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__ie", runtime.ParamLocationQuery, *params.PhoneIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__iew", runtime.ParamLocationQuery, *params.PhoneIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__isw", runtime.ParamLocationQuery, *params.PhoneIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__n", runtime.ParamLocationQuery, *params.PhoneN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__nic", runtime.ParamLocationQuery, *params.PhoneNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__nie", runtime.ParamLocationQuery, *params.PhoneNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__niew", runtime.ParamLocationQuery, *params.PhoneNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone__nisw", runtime.ParamLocationQuery, *params.PhoneNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext", runtime.ParamLocationQuery, *params.PhoneExt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__empty", runtime.ParamLocationQuery, *params.PhoneExtEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__ic", runtime.ParamLocationQuery, *params.PhoneExtIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__ie", runtime.ParamLocationQuery, *params.PhoneExtIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__iew", runtime.ParamLocationQuery, *params.PhoneExtIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__isw", runtime.ParamLocationQuery, *params.PhoneExtIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__n", runtime.ParamLocationQuery, *params.PhoneExtN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__nic", runtime.ParamLocationQuery, *params.PhoneExtNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__nie", runtime.ParamLocationQuery, *params.PhoneExtNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__niew", runtime.ParamLocationQuery, *params.PhoneExtNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PhoneExtNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone_ext__nisw", runtime.ParamLocationQuery, *params.PhoneExtNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code", runtime.ParamLocationQuery, *params.PostalCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__empty", runtime.ParamLocationQuery, *params.PostalCodeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__ic", runtime.ParamLocationQuery, *params.PostalCodeIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__ie", runtime.ParamLocationQuery, *params.PostalCodeIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__iew", runtime.ParamLocationQuery, *params.PostalCodeIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__isw", runtime.ParamLocationQuery, *params.PostalCodeIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__n", runtime.ParamLocationQuery, *params.PostalCodeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__nic", runtime.ParamLocationQuery, *params.PostalCodeNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__nie", runtime.ParamLocationQuery, *params.PostalCodeNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__niew", runtime.ParamLocationQuery, *params.PostalCodeNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostalCodeNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code__nisw", runtime.ParamLocationQuery, *params.PostalCodeNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province", runtime.ParamLocationQuery, *params.StateProvince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__empty", runtime.ParamLocationQuery, *params.StateProvinceEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__ic", runtime.ParamLocationQuery, *params.StateProvinceIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__ie", runtime.ParamLocationQuery, *params.StateProvinceIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__iew", runtime.ParamLocationQuery, *params.StateProvinceIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__isw", runtime.ParamLocationQuery, *params.StateProvinceIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__n", runtime.ParamLocationQuery, *params.StateProvinceN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__nic", runtime.ParamLocationQuery, *params.StateProvinceNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__nie", runtime.ParamLocationQuery, *params.StateProvinceNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__niew", runtime.ParamLocationQuery, *params.StateProvinceNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StateProvinceNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_province__nisw", runtime.ParamLocationQuery, *params.StateProvinceNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Street != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street", runtime.ParamLocationQuery, *params.Street); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__empty", runtime.ParamLocationQuery, *params.StreetEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__ic", runtime.ParamLocationQuery, *params.StreetIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__ie", runtime.ParamLocationQuery, *params.StreetIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__iew", runtime.ParamLocationQuery, *params.StreetIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__isw", runtime.ParamLocationQuery, *params.StreetIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__n", runtime.ParamLocationQuery, *params.StreetN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__nic", runtime.ParamLocationQuery, *params.StreetNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__nie", runtime.ParamLocationQuery, *params.StreetNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__niew", runtime.ParamLocationQuery, *params.StreetNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StreetNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "street__nisw", runtime.ParamLocationQuery, *params.StreetNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsContactsBulkPartialUpdateRequest calls the generic PluginsNetboxDnsContactsBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsContactsBulkPartialUpdateRequest(server string, body PluginsNetboxDnsContactsBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsContactsBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsContactsBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsContactsBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsContactsBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsContactsCreateRequest calls the generic PluginsNetboxDnsContactsCreate builder with application/json body
func NewPluginsNetboxDnsContactsCreateRequest(server string, body PluginsNetboxDnsContactsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsContactsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsContactsCreateRequestWithBody generates requests for PluginsNetboxDnsContactsCreate with any type of body
func NewPluginsNetboxDnsContactsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsContactsBulkUpdateRequest calls the generic PluginsNetboxDnsContactsBulkUpdate builder with application/json body
func NewPluginsNetboxDnsContactsBulkUpdateRequest(server string, body PluginsNetboxDnsContactsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsContactsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsContactsBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsContactsBulkUpdate with any type of body
func NewPluginsNetboxDnsContactsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsContactsDestroyRequest generates requests for PluginsNetboxDnsContactsDestroy
func NewPluginsNetboxDnsContactsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsContactsRetrieveRequest generates requests for PluginsNetboxDnsContactsRetrieve
func NewPluginsNetboxDnsContactsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsContactsPartialUpdateRequest calls the generic PluginsNetboxDnsContactsPartialUpdate builder with application/json body
func NewPluginsNetboxDnsContactsPartialUpdateRequest(server string, id int, body PluginsNetboxDnsContactsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsContactsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsContactsPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsContactsPartialUpdate with any type of body
func NewPluginsNetboxDnsContactsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsContactsUpdateRequest calls the generic PluginsNetboxDnsContactsUpdate builder with application/json body
func NewPluginsNetboxDnsContactsUpdateRequest(server string, id int, body PluginsNetboxDnsContactsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsContactsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsContactsUpdateRequestWithBody generates requests for PluginsNetboxDnsContactsUpdate with any type of body
func NewPluginsNetboxDnsContactsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesBulkDestroyRequest calls the generic PluginsNetboxDnsDnsseckeytemplatesBulkDestroy builder with application/json body
func NewPluginsNetboxDnsDnsseckeytemplatesBulkDestroyRequest(server string, body PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnsseckeytemplatesBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnsseckeytemplatesBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsDnsseckeytemplatesBulkDestroy with any type of body
func NewPluginsNetboxDnsDnsseckeytemplatesBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesListRequest generates requests for PluginsNetboxDnsDnsseckeytemplatesList
func NewPluginsNetboxDnsDnsseckeytemplatesListRequest(server string, params *PluginsNetboxDnsDnsseckeytemplatesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Algorithm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm", runtime.ParamLocationQuery, *params.Algorithm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__empty", runtime.ParamLocationQuery, *params.AlgorithmEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__ic", runtime.ParamLocationQuery, *params.AlgorithmIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__ie", runtime.ParamLocationQuery, *params.AlgorithmIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__iew", runtime.ParamLocationQuery, *params.AlgorithmIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__isw", runtime.ParamLocationQuery, *params.AlgorithmIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__n", runtime.ParamLocationQuery, *params.AlgorithmN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__nic", runtime.ParamLocationQuery, *params.AlgorithmNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__nie", runtime.ParamLocationQuery, *params.AlgorithmNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__niew", runtime.ParamLocationQuery, *params.AlgorithmNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AlgorithmNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "algorithm__nisw", runtime.ParamLocationQuery, *params.AlgorithmNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size", runtime.ParamLocationQuery, *params.KeySize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__ic", runtime.ParamLocationQuery, *params.KeySizeIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__ie", runtime.ParamLocationQuery, *params.KeySizeIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__iew", runtime.ParamLocationQuery, *params.KeySizeIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__isw", runtime.ParamLocationQuery, *params.KeySizeIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__n", runtime.ParamLocationQuery, *params.KeySizeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__nic", runtime.ParamLocationQuery, *params.KeySizeNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__nie", runtime.ParamLocationQuery, *params.KeySizeNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__niew", runtime.ParamLocationQuery, *params.KeySizeNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeySizeNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_size__nisw", runtime.ParamLocationQuery, *params.KeySizeNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifetime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime", runtime.ParamLocationQuery, *params.Lifetime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LifetimeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime__empty", runtime.ParamLocationQuery, *params.LifetimeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LifetimeGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime__gt", runtime.ParamLocationQuery, *params.LifetimeGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LifetimeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime__gte", runtime.ParamLocationQuery, *params.LifetimeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LifetimeLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime__lt", runtime.ParamLocationQuery, *params.LifetimeLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LifetimeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime__lte", runtime.ParamLocationQuery, *params.LifetimeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LifetimeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifetime__n", runtime.ParamLocationQuery, *params.LifetimeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Policy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy", runtime.ParamLocationQuery, *params.Policy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PolicyN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy__n", runtime.ParamLocationQuery, *params.PolicyN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy_id", runtime.ParamLocationQuery, *params.PolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PolicyIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policy_id__n", runtime.ParamLocationQuery, *params.PolicyIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__empty", runtime.ParamLocationQuery, *params.TypeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ic", runtime.ParamLocationQuery, *params.TypeIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ie", runtime.ParamLocationQuery, *params.TypeIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__iew", runtime.ParamLocationQuery, *params.TypeIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__isw", runtime.ParamLocationQuery, *params.TypeIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__n", runtime.ParamLocationQuery, *params.TypeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nic", runtime.ParamLocationQuery, *params.TypeNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nie", runtime.ParamLocationQuery, *params.TypeNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__niew", runtime.ParamLocationQuery, *params.TypeNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nisw", runtime.ParamLocationQuery, *params.TypeNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateRequest calls the generic PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateRequest(server string, body PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesCreateRequest calls the generic PluginsNetboxDnsDnsseckeytemplatesCreate builder with application/json body
func NewPluginsNetboxDnsDnsseckeytemplatesCreateRequest(server string, body PluginsNetboxDnsDnsseckeytemplatesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnsseckeytemplatesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnsseckeytemplatesCreateRequestWithBody generates requests for PluginsNetboxDnsDnsseckeytemplatesCreate with any type of body
func NewPluginsNetboxDnsDnsseckeytemplatesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesBulkUpdateRequest calls the generic PluginsNetboxDnsDnsseckeytemplatesBulkUpdate builder with application/json body
func NewPluginsNetboxDnsDnsseckeytemplatesBulkUpdateRequest(server string, body PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnsseckeytemplatesBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnsseckeytemplatesBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsDnsseckeytemplatesBulkUpdate with any type of body
func NewPluginsNetboxDnsDnsseckeytemplatesBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesDestroyRequest generates requests for PluginsNetboxDnsDnsseckeytemplatesDestroy
func NewPluginsNetboxDnsDnsseckeytemplatesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesRetrieveRequest generates requests for PluginsNetboxDnsDnsseckeytemplatesRetrieve
func NewPluginsNetboxDnsDnsseckeytemplatesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesPartialUpdateRequest calls the generic PluginsNetboxDnsDnsseckeytemplatesPartialUpdate builder with application/json body
func NewPluginsNetboxDnsDnsseckeytemplatesPartialUpdateRequest(server string, id int, body PluginsNetboxDnsDnsseckeytemplatesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnsseckeytemplatesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnsseckeytemplatesPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsDnsseckeytemplatesPartialUpdate with any type of body
func NewPluginsNetboxDnsDnsseckeytemplatesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnsseckeytemplatesUpdateRequest calls the generic PluginsNetboxDnsDnsseckeytemplatesUpdate builder with application/json body
func NewPluginsNetboxDnsDnsseckeytemplatesUpdateRequest(server string, id int, body PluginsNetboxDnsDnsseckeytemplatesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnsseckeytemplatesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnsseckeytemplatesUpdateRequestWithBody generates requests for PluginsNetboxDnsDnsseckeytemplatesUpdate with any type of body
func NewPluginsNetboxDnsDnsseckeytemplatesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnsseckeytemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesBulkDestroyRequest calls the generic PluginsNetboxDnsDnssecpoliciesBulkDestroy builder with application/json body
func NewPluginsNetboxDnsDnssecpoliciesBulkDestroyRequest(server string, body PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnssecpoliciesBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnssecpoliciesBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsDnssecpoliciesBulkDestroy with any type of body
func NewPluginsNetboxDnsDnssecpoliciesBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesListRequest generates requests for PluginsNetboxDnsDnssecpoliciesList
func NewPluginsNetboxDnsDnssecpoliciesListRequest(server string, params *PluginsNetboxDnsDnssecpoliciesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CdsDigestTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cds_digest_types", runtime.ParamLocationQuery, *params.CdsDigestTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreateCdnskey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "create_cdnskey", runtime.ParamLocationQuery, *params.CreateCdnskey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnskeyTtl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnskey_ttl", runtime.ParamLocationQuery, *params.DnskeyTtl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnskeyTtlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnskey_ttl__empty", runtime.ParamLocationQuery, *params.DnskeyTtlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnskeyTtlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnskey_ttl__gt", runtime.ParamLocationQuery, *params.DnskeyTtlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnskeyTtlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnskey_ttl__gte", runtime.ParamLocationQuery, *params.DnskeyTtlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnskeyTtlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnskey_ttl__lt", runtime.ParamLocationQuery, *params.DnskeyTtlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnskeyTtlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnskey_ttl__lte", runtime.ParamLocationQuery, *params.DnskeyTtlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnskeyTtlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnskey_ttl__n", runtime.ParamLocationQuery, *params.DnskeyTtlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeyTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_template", runtime.ParamLocationQuery, *params.KeyTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeyTemplateN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_template__n", runtime.ParamLocationQuery, *params.KeyTemplateN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeyTemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_template_id", runtime.ParamLocationQuery, *params.KeyTemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeyTemplateIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key_template_id__n", runtime.ParamLocationQuery, *params.KeyTemplateIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxZoneTtl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_zone_ttl", runtime.ParamLocationQuery, *params.MaxZoneTtl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxZoneTtlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_zone_ttl__empty", runtime.ParamLocationQuery, *params.MaxZoneTtlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxZoneTtlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_zone_ttl__gt", runtime.ParamLocationQuery, *params.MaxZoneTtlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxZoneTtlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_zone_ttl__gte", runtime.ParamLocationQuery, *params.MaxZoneTtlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxZoneTtlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_zone_ttl__lt", runtime.ParamLocationQuery, *params.MaxZoneTtlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxZoneTtlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_zone_ttl__lte", runtime.ParamLocationQuery, *params.MaxZoneTtlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxZoneTtlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_zone_ttl__n", runtime.ParamLocationQuery, *params.MaxZoneTtlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3Iterations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_iterations", runtime.ParamLocationQuery, *params.Nsec3Iterations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3IterationsEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_iterations__empty", runtime.ParamLocationQuery, *params.Nsec3IterationsEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3IterationsGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_iterations__gt", runtime.ParamLocationQuery, *params.Nsec3IterationsGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3IterationsGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_iterations__gte", runtime.ParamLocationQuery, *params.Nsec3IterationsGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3IterationsLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_iterations__lt", runtime.ParamLocationQuery, *params.Nsec3IterationsLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3IterationsLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_iterations__lte", runtime.ParamLocationQuery, *params.Nsec3IterationsLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3IterationsN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_iterations__n", runtime.ParamLocationQuery, *params.Nsec3IterationsN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3OptOut != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_opt_out", runtime.ParamLocationQuery, *params.Nsec3OptOut); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3SaltSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_salt_size", runtime.ParamLocationQuery, *params.Nsec3SaltSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3SaltSizeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_salt_size__empty", runtime.ParamLocationQuery, *params.Nsec3SaltSizeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3SaltSizeGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_salt_size__gt", runtime.ParamLocationQuery, *params.Nsec3SaltSizeGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3SaltSizeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_salt_size__gte", runtime.ParamLocationQuery, *params.Nsec3SaltSizeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3SaltSizeLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_salt_size__lt", runtime.ParamLocationQuery, *params.Nsec3SaltSizeLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3SaltSizeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_salt_size__lte", runtime.ParamLocationQuery, *params.Nsec3SaltSizeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nsec3SaltSizeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nsec3_salt_size__n", runtime.ParamLocationQuery, *params.Nsec3SaltSizeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDsTtl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_ds_ttl", runtime.ParamLocationQuery, *params.ParentDsTtl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDsTtlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_ds_ttl__empty", runtime.ParamLocationQuery, *params.ParentDsTtlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDsTtlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_ds_ttl__gt", runtime.ParamLocationQuery, *params.ParentDsTtlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDsTtlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_ds_ttl__gte", runtime.ParamLocationQuery, *params.ParentDsTtlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDsTtlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_ds_ttl__lt", runtime.ParamLocationQuery, *params.ParentDsTtlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDsTtlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_ds_ttl__lte", runtime.ParamLocationQuery, *params.ParentDsTtlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDsTtlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_ds_ttl__n", runtime.ParamLocationQuery, *params.ParentDsTtlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPropagationDelay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_propagation_delay", runtime.ParamLocationQuery, *params.ParentPropagationDelay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPropagationDelayEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_propagation_delay__empty", runtime.ParamLocationQuery, *params.ParentPropagationDelayEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPropagationDelayGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_propagation_delay__gt", runtime.ParamLocationQuery, *params.ParentPropagationDelayGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPropagationDelayGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_propagation_delay__gte", runtime.ParamLocationQuery, *params.ParentPropagationDelayGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPropagationDelayLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_propagation_delay__lt", runtime.ParamLocationQuery, *params.ParentPropagationDelayLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPropagationDelayLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_propagation_delay__lte", runtime.ParamLocationQuery, *params.ParentPropagationDelayLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPropagationDelayN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_propagation_delay__n", runtime.ParamLocationQuery, *params.ParentPropagationDelayN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishSafety != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_safety", runtime.ParamLocationQuery, *params.PublishSafety); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishSafetyEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_safety__empty", runtime.ParamLocationQuery, *params.PublishSafetyEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishSafetyGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_safety__gt", runtime.ParamLocationQuery, *params.PublishSafetyGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishSafetyGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_safety__gte", runtime.ParamLocationQuery, *params.PublishSafetyGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishSafetyLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_safety__lt", runtime.ParamLocationQuery, *params.PublishSafetyLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishSafetyLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_safety__lte", runtime.ParamLocationQuery, *params.PublishSafetyLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublishSafetyN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publish_safety__n", runtime.ParamLocationQuery, *params.PublishSafetyN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurgeKeys != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys", runtime.ParamLocationQuery, *params.PurgeKeys); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurgeKeysEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys__empty", runtime.ParamLocationQuery, *params.PurgeKeysEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurgeKeysGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys__gt", runtime.ParamLocationQuery, *params.PurgeKeysGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurgeKeysGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys__gte", runtime.ParamLocationQuery, *params.PurgeKeysGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurgeKeysLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys__lt", runtime.ParamLocationQuery, *params.PurgeKeysLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurgeKeysLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys__lte", runtime.ParamLocationQuery, *params.PurgeKeysLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PurgeKeysN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge_keys__n", runtime.ParamLocationQuery, *params.PurgeKeysN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetireSafety != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retire_safety", runtime.ParamLocationQuery, *params.RetireSafety); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetireSafetyEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retire_safety__empty", runtime.ParamLocationQuery, *params.RetireSafetyEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetireSafetyGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retire_safety__gt", runtime.ParamLocationQuery, *params.RetireSafetyGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetireSafetyGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retire_safety__gte", runtime.ParamLocationQuery, *params.RetireSafetyGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetireSafetyLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retire_safety__lt", runtime.ParamLocationQuery, *params.RetireSafetyLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetireSafetyLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retire_safety__lte", runtime.ParamLocationQuery, *params.RetireSafetyLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RetireSafetyN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "retire_safety__n", runtime.ParamLocationQuery, *params.RetireSafetyN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesJitter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_jitter", runtime.ParamLocationQuery, *params.SignaturesJitter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesJitterEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_jitter__empty", runtime.ParamLocationQuery, *params.SignaturesJitterEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesJitterGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_jitter__gt", runtime.ParamLocationQuery, *params.SignaturesJitterGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesJitterGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_jitter__gte", runtime.ParamLocationQuery, *params.SignaturesJitterGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesJitterLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_jitter__lt", runtime.ParamLocationQuery, *params.SignaturesJitterLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesJitterLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_jitter__lte", runtime.ParamLocationQuery, *params.SignaturesJitterLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesJitterN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_jitter__n", runtime.ParamLocationQuery, *params.SignaturesJitterN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesRefresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_refresh", runtime.ParamLocationQuery, *params.SignaturesRefresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesRefreshEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_refresh__empty", runtime.ParamLocationQuery, *params.SignaturesRefreshEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesRefreshGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_refresh__gt", runtime.ParamLocationQuery, *params.SignaturesRefreshGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesRefreshGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_refresh__gte", runtime.ParamLocationQuery, *params.SignaturesRefreshGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesRefreshLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_refresh__lt", runtime.ParamLocationQuery, *params.SignaturesRefreshLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesRefreshLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_refresh__lte", runtime.ParamLocationQuery, *params.SignaturesRefreshLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesRefreshN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_refresh__n", runtime.ParamLocationQuery, *params.SignaturesRefreshN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity", runtime.ParamLocationQuery, *params.SignaturesValidity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity__empty", runtime.ParamLocationQuery, *params.SignaturesValidityEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity__gt", runtime.ParamLocationQuery, *params.SignaturesValidityGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity__gte", runtime.ParamLocationQuery, *params.SignaturesValidityGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity__lt", runtime.ParamLocationQuery, *params.SignaturesValidityLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity__lte", runtime.ParamLocationQuery, *params.SignaturesValidityLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity__n", runtime.ParamLocationQuery, *params.SignaturesValidityN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityDnskey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity_dnskey", runtime.ParamLocationQuery, *params.SignaturesValidityDnskey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityDnskeyEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity_dnskey__empty", runtime.ParamLocationQuery, *params.SignaturesValidityDnskeyEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityDnskeyGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity_dnskey__gt", runtime.ParamLocationQuery, *params.SignaturesValidityDnskeyGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityDnskeyGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity_dnskey__gte", runtime.ParamLocationQuery, *params.SignaturesValidityDnskeyGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityDnskeyLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity_dnskey__lt", runtime.ParamLocationQuery, *params.SignaturesValidityDnskeyLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityDnskeyLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity_dnskey__lte", runtime.ParamLocationQuery, *params.SignaturesValidityDnskeyLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SignaturesValidityDnskeyN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signatures_validity_dnskey__n", runtime.ParamLocationQuery, *params.SignaturesValidityDnskeyN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__empty", runtime.ParamLocationQuery, *params.StatusEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ic", runtime.ParamLocationQuery, *params.StatusIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ie", runtime.ParamLocationQuery, *params.StatusIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__iew", runtime.ParamLocationQuery, *params.StatusIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__isw", runtime.ParamLocationQuery, *params.StatusIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nic", runtime.ParamLocationQuery, *params.StatusNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nie", runtime.ParamLocationQuery, *params.StatusNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__niew", runtime.ParamLocationQuery, *params.StatusNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nisw", runtime.ParamLocationQuery, *params.StatusNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UseNsec3 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use_nsec3", runtime.ParamLocationQuery, *params.UseNsec3); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Zone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone__n", runtime.ParamLocationQuery, *params.ZoneN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id__n", runtime.ParamLocationQuery, *params.ZoneIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZonePropagationDelay != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_propagation_delay", runtime.ParamLocationQuery, *params.ZonePropagationDelay); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZonePropagationDelayEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_propagation_delay__empty", runtime.ParamLocationQuery, *params.ZonePropagationDelayEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZonePropagationDelayGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_propagation_delay__gt", runtime.ParamLocationQuery, *params.ZonePropagationDelayGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZonePropagationDelayGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_propagation_delay__gte", runtime.ParamLocationQuery, *params.ZonePropagationDelayGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZonePropagationDelayLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_propagation_delay__lt", runtime.ParamLocationQuery, *params.ZonePropagationDelayLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZonePropagationDelayLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_propagation_delay__lte", runtime.ParamLocationQuery, *params.ZonePropagationDelayLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZonePropagationDelayN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_propagation_delay__n", runtime.ParamLocationQuery, *params.ZonePropagationDelayN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template", runtime.ParamLocationQuery, *params.ZoneTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplateN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template__n", runtime.ParamLocationQuery, *params.ZoneTemplateN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template_id", runtime.ParamLocationQuery, *params.ZoneTemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplateIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template_id__n", runtime.ParamLocationQuery, *params.ZoneTemplateIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesBulkPartialUpdateRequest calls the generic PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsDnssecpoliciesBulkPartialUpdateRequest(server string, body PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnssecpoliciesBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnssecpoliciesBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsDnssecpoliciesBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesCreateRequest calls the generic PluginsNetboxDnsDnssecpoliciesCreate builder with application/json body
func NewPluginsNetboxDnsDnssecpoliciesCreateRequest(server string, body PluginsNetboxDnsDnssecpoliciesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnssecpoliciesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnssecpoliciesCreateRequestWithBody generates requests for PluginsNetboxDnsDnssecpoliciesCreate with any type of body
func NewPluginsNetboxDnsDnssecpoliciesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesBulkUpdateRequest calls the generic PluginsNetboxDnsDnssecpoliciesBulkUpdate builder with application/json body
func NewPluginsNetboxDnsDnssecpoliciesBulkUpdateRequest(server string, body PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnssecpoliciesBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnssecpoliciesBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsDnssecpoliciesBulkUpdate with any type of body
func NewPluginsNetboxDnsDnssecpoliciesBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesDestroyRequest generates requests for PluginsNetboxDnsDnssecpoliciesDestroy
func NewPluginsNetboxDnsDnssecpoliciesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesRetrieveRequest generates requests for PluginsNetboxDnsDnssecpoliciesRetrieve
func NewPluginsNetboxDnsDnssecpoliciesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesPartialUpdateRequest calls the generic PluginsNetboxDnsDnssecpoliciesPartialUpdate builder with application/json body
func NewPluginsNetboxDnsDnssecpoliciesPartialUpdateRequest(server string, id int, body PluginsNetboxDnsDnssecpoliciesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnssecpoliciesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnssecpoliciesPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsDnssecpoliciesPartialUpdate with any type of body
func NewPluginsNetboxDnsDnssecpoliciesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsDnssecpoliciesUpdateRequest calls the generic PluginsNetboxDnsDnssecpoliciesUpdate builder with application/json body
func NewPluginsNetboxDnsDnssecpoliciesUpdateRequest(server string, id int, body PluginsNetboxDnsDnssecpoliciesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsDnssecpoliciesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsDnssecpoliciesUpdateRequestWithBody generates requests for PluginsNetboxDnsDnssecpoliciesUpdate with any type of body
func NewPluginsNetboxDnsDnssecpoliciesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/dnssecpolicies/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsNameserversBulkDestroyRequest calls the generic PluginsNetboxDnsNameserversBulkDestroy builder with application/json body
func NewPluginsNetboxDnsNameserversBulkDestroyRequest(server string, body PluginsNetboxDnsNameserversBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsNameserversBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsNameserversBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsNameserversBulkDestroy with any type of body
func NewPluginsNetboxDnsNameserversBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsNameserversListRequest generates requests for PluginsNetboxDnsNameserversList
func NewPluginsNetboxDnsNameserversListRequest(server string, params *PluginsNetboxDnsNameserversListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaZoneId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_zone_id", runtime.ParamLocationQuery, *params.SoaZoneId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id__n", runtime.ParamLocationQuery, *params.ZoneIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsNameserversBulkPartialUpdateRequest calls the generic PluginsNetboxDnsNameserversBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsNameserversBulkPartialUpdateRequest(server string, body PluginsNetboxDnsNameserversBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsNameserversBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsNameserversBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsNameserversBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsNameserversBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsNameserversCreateRequest calls the generic PluginsNetboxDnsNameserversCreate builder with application/json body
func NewPluginsNetboxDnsNameserversCreateRequest(server string, body PluginsNetboxDnsNameserversCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsNameserversCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsNameserversCreateRequestWithBody generates requests for PluginsNetboxDnsNameserversCreate with any type of body
func NewPluginsNetboxDnsNameserversCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsNameserversBulkUpdateRequest calls the generic PluginsNetboxDnsNameserversBulkUpdate builder with application/json body
func NewPluginsNetboxDnsNameserversBulkUpdateRequest(server string, body PluginsNetboxDnsNameserversBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsNameserversBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsNameserversBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsNameserversBulkUpdate with any type of body
func NewPluginsNetboxDnsNameserversBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsNameserversDestroyRequest generates requests for PluginsNetboxDnsNameserversDestroy
func NewPluginsNetboxDnsNameserversDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsNameserversRetrieveRequest generates requests for PluginsNetboxDnsNameserversRetrieve
func NewPluginsNetboxDnsNameserversRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsNameserversPartialUpdateRequest calls the generic PluginsNetboxDnsNameserversPartialUpdate builder with application/json body
func NewPluginsNetboxDnsNameserversPartialUpdateRequest(server string, id int, body PluginsNetboxDnsNameserversPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsNameserversPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsNameserversPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsNameserversPartialUpdate with any type of body
func NewPluginsNetboxDnsNameserversPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsNameserversUpdateRequest calls the generic PluginsNetboxDnsNameserversUpdate builder with application/json body
func NewPluginsNetboxDnsNameserversUpdateRequest(server string, id int, body PluginsNetboxDnsNameserversUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsNameserversUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsNameserversUpdateRequestWithBody generates requests for PluginsNetboxDnsNameserversUpdate with any type of body
func NewPluginsNetboxDnsNameserversUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/nameservers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsPrefixesBulkDestroyRequest calls the generic PluginsNetboxDnsPrefixesBulkDestroy builder with application/json body
func NewPluginsNetboxDnsPrefixesBulkDestroyRequest(server string, body PluginsNetboxDnsPrefixesBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsPrefixesBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsPrefixesBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsPrefixesBulkDestroy with any type of body
func NewPluginsNetboxDnsPrefixesBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsPrefixesListRequest generates requests for PluginsNetboxDnsPrefixesList
func NewPluginsNetboxDnsPrefixesListRequest(server string, params *PluginsNetboxDnsPrefixesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Children != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children", runtime.ParamLocationQuery, *params.Children); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildrenEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children__empty", runtime.ParamLocationQuery, *params.ChildrenEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildrenGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children__gt", runtime.ParamLocationQuery, *params.ChildrenGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildrenGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children__gte", runtime.ParamLocationQuery, *params.ChildrenGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildrenLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children__lt", runtime.ParamLocationQuery, *params.ChildrenLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildrenLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children__lte", runtime.ParamLocationQuery, *params.ChildrenLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ChildrenN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "children__n", runtime.ParamLocationQuery, *params.ChildrenN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Contact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact", runtime.ParamLocationQuery, *params.Contact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact__n", runtime.ParamLocationQuery, *params.ContactN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_group", runtime.ParamLocationQuery, *params.ContactGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_group__n", runtime.ParamLocationQuery, *params.ContactGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_role", runtime.ParamLocationQuery, *params.ContactRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContactRoleN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contact_role__n", runtime.ParamLocationQuery, *params.ContactRoleN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Contains != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Depth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepthEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth__empty", runtime.ParamLocationQuery, *params.DepthEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepthGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth__gt", runtime.ParamLocationQuery, *params.DepthGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepthGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth__gte", runtime.ParamLocationQuery, *params.DepthGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepthLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth__lt", runtime.ParamLocationQuery, *params.DepthLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepthLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth__lte", runtime.ParamLocationQuery, *params.DepthLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepthN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth__n", runtime.ParamLocationQuery, *params.DepthN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Family != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "family", runtime.ParamLocationQuery, *params.Family); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsPool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_pool", runtime.ParamLocationQuery, *params.IsPool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Location != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, *params.Location); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocationN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location__n", runtime.ParamLocationQuery, *params.LocationN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id", runtime.ParamLocationQuery, *params.LocationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocationIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location_id__n", runtime.ParamLocationQuery, *params.LocationIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarkUtilized != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mark_utilized", runtime.ParamLocationQuery, *params.MarkUtilized); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaskLength != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mask_length", runtime.ParamLocationQuery, *params.MaskLength); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaskLengthGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mask_length__gte", runtime.ParamLocationQuery, *params.MaskLengthGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaskLengthLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mask_length__lte", runtime.ParamLocationQuery, *params.MaskLengthLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PresentInVrf != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "present_in_vrf", runtime.ParamLocationQuery, *params.PresentInVrf); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PresentInVrfId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "present_in_vrf_id", runtime.ParamLocationQuery, *params.PresentInVrfId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region__n", runtime.ParamLocationQuery, *params.RegionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region_id__n", runtime.ParamLocationQuery, *params.RegionIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RoleN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role__n", runtime.ParamLocationQuery, *params.RoleN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RoleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role_id", runtime.ParamLocationQuery, *params.RoleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RoleIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role_id__n", runtime.ParamLocationQuery, *params.RoleIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id", runtime.ParamLocationQuery, *params.ScopeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeIdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id__empty", runtime.ParamLocationQuery, *params.ScopeIdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id__gt", runtime.ParamLocationQuery, *params.ScopeIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id__gte", runtime.ParamLocationQuery, *params.ScopeIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id__lt", runtime.ParamLocationQuery, *params.ScopeIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id__lte", runtime.ParamLocationQuery, *params.ScopeIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_id__n", runtime.ParamLocationQuery, *params.ScopeIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_type", runtime.ParamLocationQuery, *params.ScopeType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeTypeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope_type__n", runtime.ParamLocationQuery, *params.ScopeTypeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Site != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, *params.Site); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site__n", runtime.ParamLocationQuery, *params.SiteN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_group", runtime.ParamLocationQuery, *params.SiteGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_group__n", runtime.ParamLocationQuery, *params.SiteGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_group_id", runtime.ParamLocationQuery, *params.SiteGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_group_id__n", runtime.ParamLocationQuery, *params.SiteGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id__n", runtime.ParamLocationQuery, *params.SiteIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__empty", runtime.ParamLocationQuery, *params.StatusEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ic", runtime.ParamLocationQuery, *params.StatusIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ie", runtime.ParamLocationQuery, *params.StatusIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__iew", runtime.ParamLocationQuery, *params.StatusIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__isw", runtime.ParamLocationQuery, *params.StatusIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nic", runtime.ParamLocationQuery, *params.StatusNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nie", runtime.ParamLocationQuery, *params.StatusNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__niew", runtime.ParamLocationQuery, *params.StatusNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nisw", runtime.ParamLocationQuery, *params.StatusNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_id", runtime.ParamLocationQuery, *params.VlanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_id__n", runtime.ParamLocationQuery, *params.VlanIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanVid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_vid", runtime.ParamLocationQuery, *params.VlanVid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanVidEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_vid__empty", runtime.ParamLocationQuery, *params.VlanVidEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanVidGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_vid__gt", runtime.ParamLocationQuery, *params.VlanVidGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanVidGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_vid__gte", runtime.ParamLocationQuery, *params.VlanVidGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanVidLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_vid__lt", runtime.ParamLocationQuery, *params.VlanVidLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanVidLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_vid__lte", runtime.ParamLocationQuery, *params.VlanVidLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VlanVidN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vlan_vid__n", runtime.ParamLocationQuery, *params.VlanVidN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vrf != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vrf", runtime.ParamLocationQuery, *params.Vrf); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VrfN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vrf__n", runtime.ParamLocationQuery, *params.VrfN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VrfId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vrf_id", runtime.ParamLocationQuery, *params.VrfId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VrfIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vrf_id__n", runtime.ParamLocationQuery, *params.VrfIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Within != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "within", runtime.ParamLocationQuery, *params.Within); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithinInclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "within_include", runtime.ParamLocationQuery, *params.WithinInclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsPrefixesBulkPartialUpdateRequest calls the generic PluginsNetboxDnsPrefixesBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsPrefixesBulkPartialUpdateRequest(server string, body PluginsNetboxDnsPrefixesBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsPrefixesBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsPrefixesBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsPrefixesBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsPrefixesBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsPrefixesCreateRequest calls the generic PluginsNetboxDnsPrefixesCreate builder with application/json body
func NewPluginsNetboxDnsPrefixesCreateRequest(server string, body PluginsNetboxDnsPrefixesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsPrefixesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsPrefixesCreateRequestWithBody generates requests for PluginsNetboxDnsPrefixesCreate with any type of body
func NewPluginsNetboxDnsPrefixesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsPrefixesBulkUpdateRequest calls the generic PluginsNetboxDnsPrefixesBulkUpdate builder with application/json body
func NewPluginsNetboxDnsPrefixesBulkUpdateRequest(server string, body PluginsNetboxDnsPrefixesBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsPrefixesBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsPrefixesBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsPrefixesBulkUpdate with any type of body
func NewPluginsNetboxDnsPrefixesBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsPrefixesDestroyRequest generates requests for PluginsNetboxDnsPrefixesDestroy
func NewPluginsNetboxDnsPrefixesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsPrefixesRetrieveRequest generates requests for PluginsNetboxDnsPrefixesRetrieve
func NewPluginsNetboxDnsPrefixesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsPrefixesPartialUpdateRequest calls the generic PluginsNetboxDnsPrefixesPartialUpdate builder with application/json body
func NewPluginsNetboxDnsPrefixesPartialUpdateRequest(server string, id int, body PluginsNetboxDnsPrefixesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsPrefixesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsPrefixesPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsPrefixesPartialUpdate with any type of body
func NewPluginsNetboxDnsPrefixesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsPrefixesUpdateRequest calls the generic PluginsNetboxDnsPrefixesUpdate builder with application/json body
func NewPluginsNetboxDnsPrefixesUpdateRequest(server string, id int, body PluginsNetboxDnsPrefixesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsPrefixesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsPrefixesUpdateRequestWithBody generates requests for PluginsNetboxDnsPrefixesUpdate with any type of body
func NewPluginsNetboxDnsPrefixesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/prefixes/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordsBulkDestroyRequest calls the generic PluginsNetboxDnsRecordsBulkDestroy builder with application/json body
func NewPluginsNetboxDnsRecordsBulkDestroyRequest(server string, body PluginsNetboxDnsRecordsBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordsBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordsBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsRecordsBulkDestroy with any type of body
func NewPluginsNetboxDnsRecordsBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordsListRequest generates requests for PluginsNetboxDnsRecordsList
func NewPluginsNetboxDnsRecordsListRequest(server string, params *PluginsNetboxDnsRecordsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressRecordId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address_record_id", runtime.ParamLocationQuery, *params.AddressRecordId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressRecordIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address_record_id__n", runtime.ParamLocationQuery, *params.AddressRecordIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisablePtr != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disable_ptr", runtime.ParamLocationQuery, *params.DisablePtr); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fqdn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fqdn", runtime.ParamLocationQuery, *params.Fqdn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip_address", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpamIpAddressId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipam_ip_address_id", runtime.ParamLocationQuery, *params.IpamIpAddressId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpamIpAddressIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipam_ip_address_id__n", runtime.ParamLocationQuery, *params.IpamIpAddressIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Managed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "managed", runtime.ParamLocationQuery, *params.Managed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PtrRecordId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ptr_record_id", runtime.ParamLocationQuery, *params.PtrRecordId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PtrRecordIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ptr_record_id__n", runtime.ParamLocationQuery, *params.PtrRecordIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317CnameRecordId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_cname_record_id", runtime.ParamLocationQuery, *params.Rfc2317CnameRecordId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317CnameRecordIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_cname_record_id__n", runtime.ParamLocationQuery, *params.Rfc2317CnameRecordIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__empty", runtime.ParamLocationQuery, *params.StatusEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ic", runtime.ParamLocationQuery, *params.StatusIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ie", runtime.ParamLocationQuery, *params.StatusIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__iew", runtime.ParamLocationQuery, *params.StatusIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__isw", runtime.ParamLocationQuery, *params.StatusIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nic", runtime.ParamLocationQuery, *params.StatusNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nie", runtime.ParamLocationQuery, *params.StatusNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__niew", runtime.ParamLocationQuery, *params.StatusNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nisw", runtime.ParamLocationQuery, *params.StatusNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__empty", runtime.ParamLocationQuery, *params.TtlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__gt", runtime.ParamLocationQuery, *params.TtlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__gte", runtime.ParamLocationQuery, *params.TtlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__lt", runtime.ParamLocationQuery, *params.TtlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__lte", runtime.ParamLocationQuery, *params.TtlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__n", runtime.ParamLocationQuery, *params.TtlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__empty", runtime.ParamLocationQuery, *params.TypeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ic", runtime.ParamLocationQuery, *params.TypeIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ie", runtime.ParamLocationQuery, *params.TypeIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__iew", runtime.ParamLocationQuery, *params.TypeIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__isw", runtime.ParamLocationQuery, *params.TypeIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__n", runtime.ParamLocationQuery, *params.TypeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nic", runtime.ParamLocationQuery, *params.TypeNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nie", runtime.ParamLocationQuery, *params.TypeNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__niew", runtime.ParamLocationQuery, *params.TypeNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nisw", runtime.ParamLocationQuery, *params.TypeNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__empty", runtime.ParamLocationQuery, *params.ValueEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__ic", runtime.ParamLocationQuery, *params.ValueIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__ie", runtime.ParamLocationQuery, *params.ValueIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__iew", runtime.ParamLocationQuery, *params.ValueIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__isw", runtime.ParamLocationQuery, *params.ValueIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__n", runtime.ParamLocationQuery, *params.ValueN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nic", runtime.ParamLocationQuery, *params.ValueNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nie", runtime.ParamLocationQuery, *params.ValueNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__niew", runtime.ParamLocationQuery, *params.ValueNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nisw", runtime.ParamLocationQuery, *params.ValueNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.View != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, *params.View); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view__n", runtime.ParamLocationQuery, *params.ViewN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view_id", runtime.ParamLocationQuery, *params.ViewId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view_id__n", runtime.ParamLocationQuery, *params.ViewIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Zone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone__n", runtime.ParamLocationQuery, *params.ZoneN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id", runtime.ParamLocationQuery, *params.ZoneId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_id__n", runtime.ParamLocationQuery, *params.ZoneIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRecordsBulkPartialUpdateRequest calls the generic PluginsNetboxDnsRecordsBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsRecordsBulkPartialUpdateRequest(server string, body PluginsNetboxDnsRecordsBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordsBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordsBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordsBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsRecordsBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordsCreateRequest calls the generic PluginsNetboxDnsRecordsCreate builder with application/json body
func NewPluginsNetboxDnsRecordsCreateRequest(server string, body PluginsNetboxDnsRecordsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordsCreateRequestWithBody generates requests for PluginsNetboxDnsRecordsCreate with any type of body
func NewPluginsNetboxDnsRecordsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordsBulkUpdateRequest calls the generic PluginsNetboxDnsRecordsBulkUpdate builder with application/json body
func NewPluginsNetboxDnsRecordsBulkUpdateRequest(server string, body PluginsNetboxDnsRecordsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordsBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordsBulkUpdate with any type of body
func NewPluginsNetboxDnsRecordsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordsDestroyRequest generates requests for PluginsNetboxDnsRecordsDestroy
func NewPluginsNetboxDnsRecordsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRecordsRetrieveRequest generates requests for PluginsNetboxDnsRecordsRetrieve
func NewPluginsNetboxDnsRecordsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRecordsPartialUpdateRequest calls the generic PluginsNetboxDnsRecordsPartialUpdate builder with application/json body
func NewPluginsNetboxDnsRecordsPartialUpdateRequest(server string, id int, body PluginsNetboxDnsRecordsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordsPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordsPartialUpdate with any type of body
func NewPluginsNetboxDnsRecordsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordsUpdateRequest calls the generic PluginsNetboxDnsRecordsUpdate builder with application/json body
func NewPluginsNetboxDnsRecordsUpdateRequest(server string, id int, body PluginsNetboxDnsRecordsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordsUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordsUpdate with any type of body
func NewPluginsNetboxDnsRecordsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/records/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesBulkDestroyRequest calls the generic PluginsNetboxDnsRecordtemplatesBulkDestroy builder with application/json body
func NewPluginsNetboxDnsRecordtemplatesBulkDestroyRequest(server string, body PluginsNetboxDnsRecordtemplatesBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordtemplatesBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordtemplatesBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsRecordtemplatesBulkDestroy with any type of body
func NewPluginsNetboxDnsRecordtemplatesBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesListRequest generates requests for PluginsNetboxDnsRecordtemplatesList
func NewPluginsNetboxDnsRecordtemplatesListRequest(server string, params *PluginsNetboxDnsRecordtemplatesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DisablePtr != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "disable_ptr", runtime.ParamLocationQuery, *params.DisablePtr); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name", runtime.ParamLocationQuery, *params.RecordName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__empty", runtime.ParamLocationQuery, *params.RecordNameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__ic", runtime.ParamLocationQuery, *params.RecordNameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__ie", runtime.ParamLocationQuery, *params.RecordNameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__iew", runtime.ParamLocationQuery, *params.RecordNameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__isw", runtime.ParamLocationQuery, *params.RecordNameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__n", runtime.ParamLocationQuery, *params.RecordNameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__nic", runtime.ParamLocationQuery, *params.RecordNameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__nie", runtime.ParamLocationQuery, *params.RecordNameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__niew", runtime.ParamLocationQuery, *params.RecordNameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordNameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_name__nisw", runtime.ParamLocationQuery, *params.RecordNameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__empty", runtime.ParamLocationQuery, *params.StatusEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ic", runtime.ParamLocationQuery, *params.StatusIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ie", runtime.ParamLocationQuery, *params.StatusIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__iew", runtime.ParamLocationQuery, *params.StatusIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__isw", runtime.ParamLocationQuery, *params.StatusIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nic", runtime.ParamLocationQuery, *params.StatusNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nie", runtime.ParamLocationQuery, *params.StatusNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__niew", runtime.ParamLocationQuery, *params.StatusNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nisw", runtime.ParamLocationQuery, *params.StatusNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ttl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.Ttl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__empty", runtime.ParamLocationQuery, *params.TtlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__gt", runtime.ParamLocationQuery, *params.TtlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__gte", runtime.ParamLocationQuery, *params.TtlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__lt", runtime.ParamLocationQuery, *params.TtlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__lte", runtime.ParamLocationQuery, *params.TtlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TtlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl__n", runtime.ParamLocationQuery, *params.TtlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__empty", runtime.ParamLocationQuery, *params.TypeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ic", runtime.ParamLocationQuery, *params.TypeIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ie", runtime.ParamLocationQuery, *params.TypeIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__iew", runtime.ParamLocationQuery, *params.TypeIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__isw", runtime.ParamLocationQuery, *params.TypeIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__n", runtime.ParamLocationQuery, *params.TypeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nic", runtime.ParamLocationQuery, *params.TypeNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nie", runtime.ParamLocationQuery, *params.TypeNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__niew", runtime.ParamLocationQuery, *params.TypeNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nisw", runtime.ParamLocationQuery, *params.TypeNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__empty", runtime.ParamLocationQuery, *params.ValueEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__ic", runtime.ParamLocationQuery, *params.ValueIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__ie", runtime.ParamLocationQuery, *params.ValueIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__iew", runtime.ParamLocationQuery, *params.ValueIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__isw", runtime.ParamLocationQuery, *params.ValueIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__n", runtime.ParamLocationQuery, *params.ValueN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nic", runtime.ParamLocationQuery, *params.ValueNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nie", runtime.ParamLocationQuery, *params.ValueNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__niew", runtime.ParamLocationQuery, *params.ValueNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nisw", runtime.ParamLocationQuery, *params.ValueNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template", runtime.ParamLocationQuery, *params.ZoneTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplateN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template__n", runtime.ParamLocationQuery, *params.ZoneTemplateN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template_id", runtime.ParamLocationQuery, *params.ZoneTemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ZoneTemplateIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone_template_id__n", runtime.ParamLocationQuery, *params.ZoneTemplateIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesBulkPartialUpdateRequest calls the generic PluginsNetboxDnsRecordtemplatesBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsRecordtemplatesBulkPartialUpdateRequest(server string, body PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordtemplatesBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordtemplatesBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordtemplatesBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsRecordtemplatesBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesCreateRequest calls the generic PluginsNetboxDnsRecordtemplatesCreate builder with application/json body
func NewPluginsNetboxDnsRecordtemplatesCreateRequest(server string, body PluginsNetboxDnsRecordtemplatesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordtemplatesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordtemplatesCreateRequestWithBody generates requests for PluginsNetboxDnsRecordtemplatesCreate with any type of body
func NewPluginsNetboxDnsRecordtemplatesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesBulkUpdateRequest calls the generic PluginsNetboxDnsRecordtemplatesBulkUpdate builder with application/json body
func NewPluginsNetboxDnsRecordtemplatesBulkUpdateRequest(server string, body PluginsNetboxDnsRecordtemplatesBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordtemplatesBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordtemplatesBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordtemplatesBulkUpdate with any type of body
func NewPluginsNetboxDnsRecordtemplatesBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesDestroyRequest generates requests for PluginsNetboxDnsRecordtemplatesDestroy
func NewPluginsNetboxDnsRecordtemplatesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesRetrieveRequest generates requests for PluginsNetboxDnsRecordtemplatesRetrieve
func NewPluginsNetboxDnsRecordtemplatesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesPartialUpdateRequest calls the generic PluginsNetboxDnsRecordtemplatesPartialUpdate builder with application/json body
func NewPluginsNetboxDnsRecordtemplatesPartialUpdateRequest(server string, id int, body PluginsNetboxDnsRecordtemplatesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordtemplatesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordtemplatesPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordtemplatesPartialUpdate with any type of body
func NewPluginsNetboxDnsRecordtemplatesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRecordtemplatesUpdateRequest calls the generic PluginsNetboxDnsRecordtemplatesUpdate builder with application/json body
func NewPluginsNetboxDnsRecordtemplatesUpdateRequest(server string, id int, body PluginsNetboxDnsRecordtemplatesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRecordtemplatesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRecordtemplatesUpdateRequestWithBody generates requests for PluginsNetboxDnsRecordtemplatesUpdate with any type of body
func NewPluginsNetboxDnsRecordtemplatesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/recordtemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsBulkDestroyRequest calls the generic PluginsNetboxDnsRegistrarsBulkDestroy builder with application/json body
func NewPluginsNetboxDnsRegistrarsBulkDestroyRequest(server string, body PluginsNetboxDnsRegistrarsBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRegistrarsBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRegistrarsBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsRegistrarsBulkDestroy with any type of body
func NewPluginsNetboxDnsRegistrarsBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsListRequest generates requests for PluginsNetboxDnsRegistrarsList
func NewPluginsNetboxDnsRegistrarsListRequest(server string, params *PluginsNetboxDnsRegistrarsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AbuseEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email", runtime.ParamLocationQuery, *params.AbuseEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__empty", runtime.ParamLocationQuery, *params.AbuseEmailEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__ic", runtime.ParamLocationQuery, *params.AbuseEmailIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__ie", runtime.ParamLocationQuery, *params.AbuseEmailIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__iew", runtime.ParamLocationQuery, *params.AbuseEmailIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__isw", runtime.ParamLocationQuery, *params.AbuseEmailIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__n", runtime.ParamLocationQuery, *params.AbuseEmailN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__nic", runtime.ParamLocationQuery, *params.AbuseEmailNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__nie", runtime.ParamLocationQuery, *params.AbuseEmailNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__niew", runtime.ParamLocationQuery, *params.AbuseEmailNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbuseEmailNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_email__nisw", runtime.ParamLocationQuery, *params.AbuseEmailNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone", runtime.ParamLocationQuery, *params.AbusePhone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__empty", runtime.ParamLocationQuery, *params.AbusePhoneEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__ic", runtime.ParamLocationQuery, *params.AbusePhoneIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__ie", runtime.ParamLocationQuery, *params.AbusePhoneIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__iew", runtime.ParamLocationQuery, *params.AbusePhoneIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__isw", runtime.ParamLocationQuery, *params.AbusePhoneIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__n", runtime.ParamLocationQuery, *params.AbusePhoneN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__nic", runtime.ParamLocationQuery, *params.AbusePhoneNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__nie", runtime.ParamLocationQuery, *params.AbusePhoneNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__niew", runtime.ParamLocationQuery, *params.AbusePhoneNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AbusePhoneNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "abuse_phone__nisw", runtime.ParamLocationQuery, *params.AbusePhoneNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Address != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, *params.Address); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__empty", runtime.ParamLocationQuery, *params.AddressEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__ic", runtime.ParamLocationQuery, *params.AddressIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__ie", runtime.ParamLocationQuery, *params.AddressIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__iew", runtime.ParamLocationQuery, *params.AddressIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__isw", runtime.ParamLocationQuery, *params.AddressIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__n", runtime.ParamLocationQuery, *params.AddressN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__nic", runtime.ParamLocationQuery, *params.AddressNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__nie", runtime.ParamLocationQuery, *params.AddressNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__niew", runtime.ParamLocationQuery, *params.AddressNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AddressNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address__nisw", runtime.ParamLocationQuery, *params.AddressNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IanaId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iana_id", runtime.ParamLocationQuery, *params.IanaId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IanaIdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iana_id__empty", runtime.ParamLocationQuery, *params.IanaIdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IanaIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iana_id__gt", runtime.ParamLocationQuery, *params.IanaIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IanaIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iana_id__gte", runtime.ParamLocationQuery, *params.IanaIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IanaIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iana_id__lt", runtime.ParamLocationQuery, *params.IanaIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IanaIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iana_id__lte", runtime.ParamLocationQuery, *params.IanaIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IanaIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iana_id__n", runtime.ParamLocationQuery, *params.IanaIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url", runtime.ParamLocationQuery, *params.ReferralUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__empty", runtime.ParamLocationQuery, *params.ReferralUrlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__ic", runtime.ParamLocationQuery, *params.ReferralUrlIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__ie", runtime.ParamLocationQuery, *params.ReferralUrlIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__iew", runtime.ParamLocationQuery, *params.ReferralUrlIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__isw", runtime.ParamLocationQuery, *params.ReferralUrlIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__n", runtime.ParamLocationQuery, *params.ReferralUrlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__nic", runtime.ParamLocationQuery, *params.ReferralUrlNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__nie", runtime.ParamLocationQuery, *params.ReferralUrlNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__niew", runtime.ParamLocationQuery, *params.ReferralUrlNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferralUrlNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "referral_url__nisw", runtime.ParamLocationQuery, *params.ReferralUrlNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServer != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server", runtime.ParamLocationQuery, *params.WhoisServer); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__empty", runtime.ParamLocationQuery, *params.WhoisServerEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__ic", runtime.ParamLocationQuery, *params.WhoisServerIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__ie", runtime.ParamLocationQuery, *params.WhoisServerIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__iew", runtime.ParamLocationQuery, *params.WhoisServerIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__isw", runtime.ParamLocationQuery, *params.WhoisServerIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__n", runtime.ParamLocationQuery, *params.WhoisServerN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__nic", runtime.ParamLocationQuery, *params.WhoisServerNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__nie", runtime.ParamLocationQuery, *params.WhoisServerNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__niew", runtime.ParamLocationQuery, *params.WhoisServerNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WhoisServerNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "whois_server__nisw", runtime.ParamLocationQuery, *params.WhoisServerNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsBulkPartialUpdateRequest calls the generic PluginsNetboxDnsRegistrarsBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsRegistrarsBulkPartialUpdateRequest(server string, body PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRegistrarsBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRegistrarsBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsRegistrarsBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsRegistrarsBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsCreateRequest calls the generic PluginsNetboxDnsRegistrarsCreate builder with application/json body
func NewPluginsNetboxDnsRegistrarsCreateRequest(server string, body PluginsNetboxDnsRegistrarsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRegistrarsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRegistrarsCreateRequestWithBody generates requests for PluginsNetboxDnsRegistrarsCreate with any type of body
func NewPluginsNetboxDnsRegistrarsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsBulkUpdateRequest calls the generic PluginsNetboxDnsRegistrarsBulkUpdate builder with application/json body
func NewPluginsNetboxDnsRegistrarsBulkUpdateRequest(server string, body PluginsNetboxDnsRegistrarsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRegistrarsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRegistrarsBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsRegistrarsBulkUpdate with any type of body
func NewPluginsNetboxDnsRegistrarsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsDestroyRequest generates requests for PluginsNetboxDnsRegistrarsDestroy
func NewPluginsNetboxDnsRegistrarsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsRetrieveRequest generates requests for PluginsNetboxDnsRegistrarsRetrieve
func NewPluginsNetboxDnsRegistrarsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsPartialUpdateRequest calls the generic PluginsNetboxDnsRegistrarsPartialUpdate builder with application/json body
func NewPluginsNetboxDnsRegistrarsPartialUpdateRequest(server string, id int, body PluginsNetboxDnsRegistrarsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRegistrarsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRegistrarsPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsRegistrarsPartialUpdate with any type of body
func NewPluginsNetboxDnsRegistrarsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsRegistrarsUpdateRequest calls the generic PluginsNetboxDnsRegistrarsUpdate builder with application/json body
func NewPluginsNetboxDnsRegistrarsUpdateRequest(server string, id int, body PluginsNetboxDnsRegistrarsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsRegistrarsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsRegistrarsUpdateRequestWithBody generates requests for PluginsNetboxDnsRegistrarsUpdate with any type of body
func NewPluginsNetboxDnsRegistrarsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/registrars/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsViewsBulkDestroyRequest calls the generic PluginsNetboxDnsViewsBulkDestroy builder with application/json body
func NewPluginsNetboxDnsViewsBulkDestroyRequest(server string, body PluginsNetboxDnsViewsBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsViewsBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsViewsBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsViewsBulkDestroy with any type of body
func NewPluginsNetboxDnsViewsBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsViewsListRequest generates requests for PluginsNetboxDnsViewsList
func NewPluginsNetboxDnsViewsListRequest(server string, params *PluginsNetboxDnsViewsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultView != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_view", runtime.ParamLocationQuery, *params.DefaultView); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix", runtime.ParamLocationQuery, *params.Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrefixN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix__n", runtime.ParamLocationQuery, *params.PrefixN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrefixId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix_id", runtime.ParamLocationQuery, *params.PrefixId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrefixIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix_id__n", runtime.ParamLocationQuery, *params.PrefixIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsViewsBulkPartialUpdateRequest calls the generic PluginsNetboxDnsViewsBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsViewsBulkPartialUpdateRequest(server string, body PluginsNetboxDnsViewsBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsViewsBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsViewsBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsViewsBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsViewsBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsViewsCreateRequest calls the generic PluginsNetboxDnsViewsCreate builder with application/json body
func NewPluginsNetboxDnsViewsCreateRequest(server string, body PluginsNetboxDnsViewsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsViewsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsViewsCreateRequestWithBody generates requests for PluginsNetboxDnsViewsCreate with any type of body
func NewPluginsNetboxDnsViewsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsViewsBulkUpdateRequest calls the generic PluginsNetboxDnsViewsBulkUpdate builder with application/json body
func NewPluginsNetboxDnsViewsBulkUpdateRequest(server string, body PluginsNetboxDnsViewsBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsViewsBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsViewsBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsViewsBulkUpdate with any type of body
func NewPluginsNetboxDnsViewsBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsViewsDestroyRequest generates requests for PluginsNetboxDnsViewsDestroy
func NewPluginsNetboxDnsViewsDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsViewsRetrieveRequest generates requests for PluginsNetboxDnsViewsRetrieve
func NewPluginsNetboxDnsViewsRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsViewsPartialUpdateRequest calls the generic PluginsNetboxDnsViewsPartialUpdate builder with application/json body
func NewPluginsNetboxDnsViewsPartialUpdateRequest(server string, id int, body PluginsNetboxDnsViewsPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsViewsPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsViewsPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsViewsPartialUpdate with any type of body
func NewPluginsNetboxDnsViewsPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsViewsUpdateRequest calls the generic PluginsNetboxDnsViewsUpdate builder with application/json body
func NewPluginsNetboxDnsViewsUpdateRequest(server string, id int, body PluginsNetboxDnsViewsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsViewsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsViewsUpdateRequestWithBody generates requests for PluginsNetboxDnsViewsUpdate with any type of body
func NewPluginsNetboxDnsViewsUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/views/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonesBulkDestroyRequest calls the generic PluginsNetboxDnsZonesBulkDestroy builder with application/json body
func NewPluginsNetboxDnsZonesBulkDestroyRequest(server string, body PluginsNetboxDnsZonesBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonesBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonesBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsZonesBulkDestroy with any type of body
func NewPluginsNetboxDnsZonesBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonesListRequest generates requests for PluginsNetboxDnsZonesList
func NewPluginsNetboxDnsZonesListRequest(server string, params *PluginsNetboxDnsZonesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdminC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c", runtime.ParamLocationQuery, *params.AdminC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdminCN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c__n", runtime.ParamLocationQuery, *params.AdminCN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdminCId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c_id", runtime.ParamLocationQuery, *params.AdminCId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdminCIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c_id__n", runtime.ParamLocationQuery, *params.AdminCIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ArpaNetwork != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "arpa_network", runtime.ParamLocationQuery, *params.ArpaNetwork); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c", runtime.ParamLocationQuery, *params.BillingC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingCN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c__n", runtime.ParamLocationQuery, *params.BillingCN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingCId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c_id", runtime.ParamLocationQuery, *params.BillingCId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingCIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c_id__n", runtime.ParamLocationQuery, *params.BillingCIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultTtl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_ttl", runtime.ParamLocationQuery, *params.DefaultTtl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultTtlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_ttl__empty", runtime.ParamLocationQuery, *params.DefaultTtlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultTtlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_ttl__gt", runtime.ParamLocationQuery, *params.DefaultTtlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultTtlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_ttl__gte", runtime.ParamLocationQuery, *params.DefaultTtlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultTtlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_ttl__lt", runtime.ParamLocationQuery, *params.DefaultTtlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultTtlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_ttl__lte", runtime.ParamLocationQuery, *params.DefaultTtlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DefaultTtlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "default_ttl__n", runtime.ParamLocationQuery, *params.DefaultTtlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy", runtime.ParamLocationQuery, *params.DnssecPolicy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicyN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy__n", runtime.ParamLocationQuery, *params.DnssecPolicyN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy_id", runtime.ParamLocationQuery, *params.DnssecPolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicyIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy_id__n", runtime.ParamLocationQuery, *params.DnssecPolicyIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status", runtime.ParamLocationQuery, *params.DomainStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__empty", runtime.ParamLocationQuery, *params.DomainStatusEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__ic", runtime.ParamLocationQuery, *params.DomainStatusIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__ie", runtime.ParamLocationQuery, *params.DomainStatusIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__iew", runtime.ParamLocationQuery, *params.DomainStatusIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__isw", runtime.ParamLocationQuery, *params.DomainStatusIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__n", runtime.ParamLocationQuery, *params.DomainStatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__nic", runtime.ParamLocationQuery, *params.DomainStatusNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__nie", runtime.ParamLocationQuery, *params.DomainStatusNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__niew", runtime.ParamLocationQuery, *params.DomainStatusNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainStatusNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_status__nisw", runtime.ParamLocationQuery, *params.DomainStatusNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration_date_after", runtime.ParamLocationQuery, *params.ExpirationDateAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExpirationDateBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expiration_date_before", runtime.ParamLocationQuery, *params.ExpirationDateBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InlineSigning != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inline_signing", runtime.ParamLocationQuery, *params.InlineSigning); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nameserver != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver", runtime.ParamLocationQuery, *params.Nameserver); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameserverN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver__n", runtime.ParamLocationQuery, *params.NameserverN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameserverId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver_id", runtime.ParamLocationQuery, *params.NameserverId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameserverIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver_id__n", runtime.ParamLocationQuery, *params.NameserverIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Registrant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant", runtime.ParamLocationQuery, *params.Registrant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant__n", runtime.ParamLocationQuery, *params.RegistrantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant_id", runtime.ParamLocationQuery, *params.RegistrantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant_id__n", runtime.ParamLocationQuery, *params.RegistrantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Registrar != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar", runtime.ParamLocationQuery, *params.Registrar); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrarN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar__n", runtime.ParamLocationQuery, *params.RegistrarN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrarId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar_id", runtime.ParamLocationQuery, *params.RegistrarId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrarIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar_id__n", runtime.ParamLocationQuery, *params.RegistrarIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id", runtime.ParamLocationQuery, *params.RegistryDomainId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__empty", runtime.ParamLocationQuery, *params.RegistryDomainIdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__ic", runtime.ParamLocationQuery, *params.RegistryDomainIdIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__ie", runtime.ParamLocationQuery, *params.RegistryDomainIdIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__iew", runtime.ParamLocationQuery, *params.RegistryDomainIdIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__isw", runtime.ParamLocationQuery, *params.RegistryDomainIdIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__n", runtime.ParamLocationQuery, *params.RegistryDomainIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__nic", runtime.ParamLocationQuery, *params.RegistryDomainIdNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__nie", runtime.ParamLocationQuery, *params.RegistryDomainIdNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__niew", runtime.ParamLocationQuery, *params.RegistryDomainIdNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistryDomainIdNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registry_domain_id__nisw", runtime.ParamLocationQuery, *params.RegistryDomainIdNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317ParentManaged != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_parent_managed", runtime.ParamLocationQuery, *params.Rfc2317ParentManaged); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317ParentZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_parent_zone", runtime.ParamLocationQuery, *params.Rfc2317ParentZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317ParentZoneN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_parent_zone__n", runtime.ParamLocationQuery, *params.Rfc2317ParentZoneN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317ParentZoneId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_parent_zone_id", runtime.ParamLocationQuery, *params.Rfc2317ParentZoneId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317ParentZoneIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_parent_zone_id__n", runtime.ParamLocationQuery, *params.Rfc2317ParentZoneIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rfc2317Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rfc2317_prefix", runtime.ParamLocationQuery, *params.Rfc2317Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaExpire != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_expire", runtime.ParamLocationQuery, *params.SoaExpire); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaExpireEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_expire__empty", runtime.ParamLocationQuery, *params.SoaExpireEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaExpireGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_expire__gt", runtime.ParamLocationQuery, *params.SoaExpireGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaExpireGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_expire__gte", runtime.ParamLocationQuery, *params.SoaExpireGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaExpireLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_expire__lt", runtime.ParamLocationQuery, *params.SoaExpireLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaExpireLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_expire__lte", runtime.ParamLocationQuery, *params.SoaExpireLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaExpireN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_expire__n", runtime.ParamLocationQuery, *params.SoaExpireN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMinimum != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_minimum", runtime.ParamLocationQuery, *params.SoaMinimum); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMinimumEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_minimum__empty", runtime.ParamLocationQuery, *params.SoaMinimumEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMinimumGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_minimum__gt", runtime.ParamLocationQuery, *params.SoaMinimumGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMinimumGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_minimum__gte", runtime.ParamLocationQuery, *params.SoaMinimumGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMinimumLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_minimum__lt", runtime.ParamLocationQuery, *params.SoaMinimumLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMinimumLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_minimum__lte", runtime.ParamLocationQuery, *params.SoaMinimumLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMinimumN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_minimum__n", runtime.ParamLocationQuery, *params.SoaMinimumN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname", runtime.ParamLocationQuery, *params.SoaMname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMnameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname__n", runtime.ParamLocationQuery, *params.SoaMnameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMnameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname_id", runtime.ParamLocationQuery, *params.SoaMnameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMnameIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname_id__n", runtime.ParamLocationQuery, *params.SoaMnameIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRefresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_refresh", runtime.ParamLocationQuery, *params.SoaRefresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRefreshEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_refresh__empty", runtime.ParamLocationQuery, *params.SoaRefreshEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRefreshGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_refresh__gt", runtime.ParamLocationQuery, *params.SoaRefreshGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRefreshGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_refresh__gte", runtime.ParamLocationQuery, *params.SoaRefreshGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRefreshLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_refresh__lt", runtime.ParamLocationQuery, *params.SoaRefreshLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRefreshLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_refresh__lte", runtime.ParamLocationQuery, *params.SoaRefreshLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRefreshN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_refresh__n", runtime.ParamLocationQuery, *params.SoaRefreshN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRetry != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_retry", runtime.ParamLocationQuery, *params.SoaRetry); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRetryEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_retry__empty", runtime.ParamLocationQuery, *params.SoaRetryEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRetryGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_retry__gt", runtime.ParamLocationQuery, *params.SoaRetryGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRetryGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_retry__gte", runtime.ParamLocationQuery, *params.SoaRetryGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRetryLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_retry__lt", runtime.ParamLocationQuery, *params.SoaRetryLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRetryLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_retry__lte", runtime.ParamLocationQuery, *params.SoaRetryLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRetryN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_retry__n", runtime.ParamLocationQuery, *params.SoaRetryN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname", runtime.ParamLocationQuery, *params.SoaRname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__empty", runtime.ParamLocationQuery, *params.SoaRnameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__ic", runtime.ParamLocationQuery, *params.SoaRnameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__ie", runtime.ParamLocationQuery, *params.SoaRnameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__iew", runtime.ParamLocationQuery, *params.SoaRnameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__isw", runtime.ParamLocationQuery, *params.SoaRnameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__n", runtime.ParamLocationQuery, *params.SoaRnameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__nic", runtime.ParamLocationQuery, *params.SoaRnameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__nie", runtime.ParamLocationQuery, *params.SoaRnameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__niew", runtime.ParamLocationQuery, *params.SoaRnameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__nisw", runtime.ParamLocationQuery, *params.SoaRnameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial", runtime.ParamLocationQuery, *params.SoaSerial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerialEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial__empty", runtime.ParamLocationQuery, *params.SoaSerialEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerialGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial__gt", runtime.ParamLocationQuery, *params.SoaSerialGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerialGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial__gte", runtime.ParamLocationQuery, *params.SoaSerialGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerialLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial__lt", runtime.ParamLocationQuery, *params.SoaSerialLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerialLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial__lte", runtime.ParamLocationQuery, *params.SoaSerialLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerialN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial__n", runtime.ParamLocationQuery, *params.SoaSerialN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaSerialAuto != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_serial_auto", runtime.ParamLocationQuery, *params.SoaSerialAuto); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaTtl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_ttl", runtime.ParamLocationQuery, *params.SoaTtl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaTtlEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_ttl__empty", runtime.ParamLocationQuery, *params.SoaTtlEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaTtlGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_ttl__gt", runtime.ParamLocationQuery, *params.SoaTtlGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaTtlGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_ttl__gte", runtime.ParamLocationQuery, *params.SoaTtlGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaTtlLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_ttl__lt", runtime.ParamLocationQuery, *params.SoaTtlLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaTtlLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_ttl__lte", runtime.ParamLocationQuery, *params.SoaTtlLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaTtlN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_ttl__n", runtime.ParamLocationQuery, *params.SoaTtlN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__empty", runtime.ParamLocationQuery, *params.StatusEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ic", runtime.ParamLocationQuery, *params.StatusIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__ie", runtime.ParamLocationQuery, *params.StatusIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__iew", runtime.ParamLocationQuery, *params.StatusIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__isw", runtime.ParamLocationQuery, *params.StatusIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nic", runtime.ParamLocationQuery, *params.StatusNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nie", runtime.ParamLocationQuery, *params.StatusNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__niew", runtime.ParamLocationQuery, *params.StatusNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__nisw", runtime.ParamLocationQuery, *params.StatusNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c", runtime.ParamLocationQuery, *params.TechC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechCN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c__n", runtime.ParamLocationQuery, *params.TechCN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechCId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c_id", runtime.ParamLocationQuery, *params.TechCId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechCIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c_id__n", runtime.ParamLocationQuery, *params.TechCIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.View != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, *params.View); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view__n", runtime.ParamLocationQuery, *params.ViewN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view_id", runtime.ParamLocationQuery, *params.ViewId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view_id__n", runtime.ParamLocationQuery, *params.ViewIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsZonesBulkPartialUpdateRequest calls the generic PluginsNetboxDnsZonesBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsZonesBulkPartialUpdateRequest(server string, body PluginsNetboxDnsZonesBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonesBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonesBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsZonesBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsZonesBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonesCreateRequest calls the generic PluginsNetboxDnsZonesCreate builder with application/json body
func NewPluginsNetboxDnsZonesCreateRequest(server string, body PluginsNetboxDnsZonesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonesCreateRequestWithBody generates requests for PluginsNetboxDnsZonesCreate with any type of body
func NewPluginsNetboxDnsZonesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonesBulkUpdateRequest calls the generic PluginsNetboxDnsZonesBulkUpdate builder with application/json body
func NewPluginsNetboxDnsZonesBulkUpdateRequest(server string, body PluginsNetboxDnsZonesBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonesBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonesBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsZonesBulkUpdate with any type of body
func NewPluginsNetboxDnsZonesBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonesDestroyRequest generates requests for PluginsNetboxDnsZonesDestroy
func NewPluginsNetboxDnsZonesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsZonesRetrieveRequest generates requests for PluginsNetboxDnsZonesRetrieve
func NewPluginsNetboxDnsZonesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsZonesPartialUpdateRequest calls the generic PluginsNetboxDnsZonesPartialUpdate builder with application/json body
func NewPluginsNetboxDnsZonesPartialUpdateRequest(server string, id int, body PluginsNetboxDnsZonesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonesPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsZonesPartialUpdate with any type of body
func NewPluginsNetboxDnsZonesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonesUpdateRequest calls the generic PluginsNetboxDnsZonesUpdate builder with application/json body
func NewPluginsNetboxDnsZonesUpdateRequest(server string, id int, body PluginsNetboxDnsZonesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonesUpdateRequestWithBody generates requests for PluginsNetboxDnsZonesUpdate with any type of body
func NewPluginsNetboxDnsZonesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zones/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesBulkDestroyRequest calls the generic PluginsNetboxDnsZonetemplatesBulkDestroy builder with application/json body
func NewPluginsNetboxDnsZonetemplatesBulkDestroyRequest(server string, body PluginsNetboxDnsZonetemplatesBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonetemplatesBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonetemplatesBulkDestroyRequestWithBody generates requests for PluginsNetboxDnsZonetemplatesBulkDestroy with any type of body
func NewPluginsNetboxDnsZonetemplatesBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesListRequest generates requests for PluginsNetboxDnsZonetemplatesList
func NewPluginsNetboxDnsZonetemplatesListRequest(server string, params *PluginsNetboxDnsZonetemplatesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AdminC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c", runtime.ParamLocationQuery, *params.AdminC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdminCN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c__n", runtime.ParamLocationQuery, *params.AdminCN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdminCId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c_id", runtime.ParamLocationQuery, *params.AdminCId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AdminCIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "admin_c_id__n", runtime.ParamLocationQuery, *params.AdminCIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c", runtime.ParamLocationQuery, *params.BillingC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingCN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c__n", runtime.ParamLocationQuery, *params.BillingCN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingCId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c_id", runtime.ParamLocationQuery, *params.BillingCId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingCIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billing_c_id__n", runtime.ParamLocationQuery, *params.BillingCIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy", runtime.ParamLocationQuery, *params.DnssecPolicy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicyN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy__n", runtime.ParamLocationQuery, *params.DnssecPolicyN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy_id", runtime.ParamLocationQuery, *params.DnssecPolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DnssecPolicyIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnssec_policy_id__n", runtime.ParamLocationQuery, *params.DnssecPolicyIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Nameserver != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver", runtime.ParamLocationQuery, *params.Nameserver); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameserverN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver__n", runtime.ParamLocationQuery, *params.NameserverN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameserverId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver_id", runtime.ParamLocationQuery, *params.NameserverId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameserverIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nameserver_id__n", runtime.ParamLocationQuery, *params.NameserverIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordTemplate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_template", runtime.ParamLocationQuery, *params.RecordTemplate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordTemplateN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_template__n", runtime.ParamLocationQuery, *params.RecordTemplateN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordTemplateId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_template_id", runtime.ParamLocationQuery, *params.RecordTemplateId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RecordTemplateIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "record_template_id__n", runtime.ParamLocationQuery, *params.RecordTemplateIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Registrant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant", runtime.ParamLocationQuery, *params.Registrant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant__n", runtime.ParamLocationQuery, *params.RegistrantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant_id", runtime.ParamLocationQuery, *params.RegistrantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrant_id__n", runtime.ParamLocationQuery, *params.RegistrantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Registrar != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar", runtime.ParamLocationQuery, *params.Registrar); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrarN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar__n", runtime.ParamLocationQuery, *params.RegistrarN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrarId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar_id", runtime.ParamLocationQuery, *params.RegistrarId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegistrarIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "registrar_id__n", runtime.ParamLocationQuery, *params.RegistrarIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname", runtime.ParamLocationQuery, *params.SoaMname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMnameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname__n", runtime.ParamLocationQuery, *params.SoaMnameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMnameId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname_id", runtime.ParamLocationQuery, *params.SoaMnameId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaMnameIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_mname_id__n", runtime.ParamLocationQuery, *params.SoaMnameIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname", runtime.ParamLocationQuery, *params.SoaRname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__empty", runtime.ParamLocationQuery, *params.SoaRnameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__ic", runtime.ParamLocationQuery, *params.SoaRnameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__ie", runtime.ParamLocationQuery, *params.SoaRnameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__iew", runtime.ParamLocationQuery, *params.SoaRnameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__isw", runtime.ParamLocationQuery, *params.SoaRnameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__n", runtime.ParamLocationQuery, *params.SoaRnameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__nic", runtime.ParamLocationQuery, *params.SoaRnameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__nie", runtime.ParamLocationQuery, *params.SoaRnameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__niew", runtime.ParamLocationQuery, *params.SoaRnameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SoaRnameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soa_rname__nisw", runtime.ParamLocationQuery, *params.SoaRnameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechC != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c", runtime.ParamLocationQuery, *params.TechC); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechCN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c__n", runtime.ParamLocationQuery, *params.TechCN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechCId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c_id", runtime.ParamLocationQuery, *params.TechCId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TechCIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tech_c_id__n", runtime.ParamLocationQuery, *params.TechCIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group", runtime.ParamLocationQuery, *params.TenantGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group__n", runtime.ParamLocationQuery, *params.TenantGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id", runtime.ParamLocationQuery, *params.TenantGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantGroupIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_group_id__n", runtime.ParamLocationQuery, *params.TenantGroupIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id", runtime.ParamLocationQuery, *params.TenantId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant_id__n", runtime.ParamLocationQuery, *params.TenantIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesBulkPartialUpdateRequest calls the generic PluginsNetboxDnsZonetemplatesBulkPartialUpdate builder with application/json body
func NewPluginsNetboxDnsZonetemplatesBulkPartialUpdateRequest(server string, body PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonetemplatesBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonetemplatesBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsZonetemplatesBulkPartialUpdate with any type of body
func NewPluginsNetboxDnsZonetemplatesBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesCreateRequest calls the generic PluginsNetboxDnsZonetemplatesCreate builder with application/json body
func NewPluginsNetboxDnsZonetemplatesCreateRequest(server string, body PluginsNetboxDnsZonetemplatesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonetemplatesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonetemplatesCreateRequestWithBody generates requests for PluginsNetboxDnsZonetemplatesCreate with any type of body
func NewPluginsNetboxDnsZonetemplatesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesBulkUpdateRequest calls the generic PluginsNetboxDnsZonetemplatesBulkUpdate builder with application/json body
func NewPluginsNetboxDnsZonetemplatesBulkUpdateRequest(server string, body PluginsNetboxDnsZonetemplatesBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonetemplatesBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonetemplatesBulkUpdateRequestWithBody generates requests for PluginsNetboxDnsZonetemplatesBulkUpdate with any type of body
func NewPluginsNetboxDnsZonetemplatesBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesDestroyRequest generates requests for PluginsNetboxDnsZonetemplatesDestroy
func NewPluginsNetboxDnsZonetemplatesDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesRetrieveRequest generates requests for PluginsNetboxDnsZonetemplatesRetrieve
func NewPluginsNetboxDnsZonetemplatesRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesPartialUpdateRequest calls the generic PluginsNetboxDnsZonetemplatesPartialUpdate builder with application/json body
func NewPluginsNetboxDnsZonetemplatesPartialUpdateRequest(server string, id int, body PluginsNetboxDnsZonetemplatesPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonetemplatesPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonetemplatesPartialUpdateRequestWithBody generates requests for PluginsNetboxDnsZonetemplatesPartialUpdate with any type of body
func NewPluginsNetboxDnsZonetemplatesPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxDnsZonetemplatesUpdateRequest calls the generic PluginsNetboxDnsZonetemplatesUpdate builder with application/json body
func NewPluginsNetboxDnsZonetemplatesUpdateRequest(server string, id int, body PluginsNetboxDnsZonetemplatesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxDnsZonetemplatesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxDnsZonetemplatesUpdateRequestWithBody generates requests for PluginsNetboxDnsZonetemplatesUpdate with any type of body
func NewPluginsNetboxDnsZonetemplatesUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netbox-dns/zonetemplates/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxdhcpProfileBulkDestroyRequest calls the generic PluginsNetboxdhcpProfileBulkDestroy builder with application/json body
func NewPluginsNetboxdhcpProfileBulkDestroyRequest(server string, body PluginsNetboxdhcpProfileBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxdhcpProfileBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxdhcpProfileBulkDestroyRequestWithBody generates requests for PluginsNetboxdhcpProfileBulkDestroy with any type of body
func NewPluginsNetboxdhcpProfileBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxdhcpProfileListRequest generates requests for PluginsNetboxdhcpProfileList
func NewPluginsNetboxdhcpProfileListRequest(server string, params *PluginsNetboxdhcpProfileListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Text != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, *params.Text); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__ic", runtime.ParamLocationQuery, *params.TextIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__ie", runtime.ParamLocationQuery, *params.TextIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__iew", runtime.ParamLocationQuery, *params.TextIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__isw", runtime.ParamLocationQuery, *params.TextIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__n", runtime.ParamLocationQuery, *params.TextN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__nic", runtime.ParamLocationQuery, *params.TextNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__nie", runtime.ParamLocationQuery, *params.TextNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__niew", runtime.ParamLocationQuery, *params.TextNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TextNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text__nisw", runtime.ParamLocationQuery, *params.TextNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxdhcpProfileBulkPartialUpdateRequest calls the generic PluginsNetboxdhcpProfileBulkPartialUpdate builder with application/json body
func NewPluginsNetboxdhcpProfileBulkPartialUpdateRequest(server string, body PluginsNetboxdhcpProfileBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxdhcpProfileBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxdhcpProfileBulkPartialUpdateRequestWithBody generates requests for PluginsNetboxdhcpProfileBulkPartialUpdate with any type of body
func NewPluginsNetboxdhcpProfileBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxdhcpProfileCreateRequest calls the generic PluginsNetboxdhcpProfileCreate builder with application/json body
func NewPluginsNetboxdhcpProfileCreateRequest(server string, body PluginsNetboxdhcpProfileCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxdhcpProfileCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxdhcpProfileCreateRequestWithBody generates requests for PluginsNetboxdhcpProfileCreate with any type of body
func NewPluginsNetboxdhcpProfileCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxdhcpProfileBulkUpdateRequest calls the generic PluginsNetboxdhcpProfileBulkUpdate builder with application/json body
func NewPluginsNetboxdhcpProfileBulkUpdateRequest(server string, body PluginsNetboxdhcpProfileBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxdhcpProfileBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsNetboxdhcpProfileBulkUpdateRequestWithBody generates requests for PluginsNetboxdhcpProfileBulkUpdate with any type of body
func NewPluginsNetboxdhcpProfileBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxdhcpProfileDestroyRequest generates requests for PluginsNetboxdhcpProfileDestroy
func NewPluginsNetboxdhcpProfileDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxdhcpProfileRetrieveRequest generates requests for PluginsNetboxdhcpProfileRetrieve
func NewPluginsNetboxdhcpProfileRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsNetboxdhcpProfilePartialUpdateRequest calls the generic PluginsNetboxdhcpProfilePartialUpdate builder with application/json body
func NewPluginsNetboxdhcpProfilePartialUpdateRequest(server string, id int, body PluginsNetboxdhcpProfilePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxdhcpProfilePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxdhcpProfilePartialUpdateRequestWithBody generates requests for PluginsNetboxdhcpProfilePartialUpdate with any type of body
func NewPluginsNetboxdhcpProfilePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsNetboxdhcpProfileUpdateRequest calls the generic PluginsNetboxdhcpProfileUpdate builder with application/json body
func NewPluginsNetboxdhcpProfileUpdateRequest(server string, id int, body PluginsNetboxdhcpProfileUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsNetboxdhcpProfileUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsNetboxdhcpProfileUpdateRequestWithBody generates requests for PluginsNetboxdhcpProfileUpdate with any type of body
func NewPluginsNetboxdhcpProfileUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/netboxdhcp/profile/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PluginsNetboxDnsContactsBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsContactsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkDestroyResponse, error)

	PluginsNetboxDnsContactsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsContactsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkDestroyResponse, error)

	// PluginsNetboxDnsContactsListWithResponse request
	PluginsNetboxDnsContactsListWithResponse(ctx context.Context, params *PluginsNetboxDnsContactsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsListResponse, error)

	// PluginsNetboxDnsContactsBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsContactsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkPartialUpdateResponse, error)

	PluginsNetboxDnsContactsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsContactsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsContactsCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsContactsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsCreateResponse, error)

	PluginsNetboxDnsContactsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsCreateResponse, error)

	// PluginsNetboxDnsContactsBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsContactsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkUpdateResponse, error)

	PluginsNetboxDnsContactsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsContactsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkUpdateResponse, error)

	// PluginsNetboxDnsContactsDestroyWithResponse request
	PluginsNetboxDnsContactsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsDestroyResponse, error)

	// PluginsNetboxDnsContactsRetrieveWithResponse request
	PluginsNetboxDnsContactsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsRetrieveResponse, error)

	// PluginsNetboxDnsContactsPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsContactsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsPartialUpdateResponse, error)

	PluginsNetboxDnsContactsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsPartialUpdateResponse, error)

	// PluginsNetboxDnsContactsUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsContactsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsUpdateResponse, error)

	PluginsNetboxDnsContactsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsUpdateResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse, error)

	PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesListWithResponse request
	PluginsNetboxDnsDnsseckeytemplatesListWithResponse(ctx context.Context, params *PluginsNetboxDnsDnsseckeytemplatesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesListResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse, error)

	PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnsseckeytemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesCreateResponse, error)

	PluginsNetboxDnsDnsseckeytemplatesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesCreateResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse, error)

	PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesDestroyWithResponse request
	PluginsNetboxDnsDnsseckeytemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesDestroyResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesRetrieveWithResponse request
	PluginsNetboxDnsDnsseckeytemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse, error)

	PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse, error)

	// PluginsNetboxDnsDnsseckeytemplatesUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnsseckeytemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesUpdateResponse, error)

	PluginsNetboxDnsDnsseckeytemplatesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesUpdateResponse, error)

	// PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse, error)

	PluginsNetboxDnsDnssecpoliciesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse, error)

	// PluginsNetboxDnsDnssecpoliciesListWithResponse request
	PluginsNetboxDnsDnssecpoliciesListWithResponse(ctx context.Context, params *PluginsNetboxDnsDnssecpoliciesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesListResponse, error)

	// PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse, error)

	PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsDnssecpoliciesCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnssecpoliciesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesCreateResponse, error)

	PluginsNetboxDnsDnssecpoliciesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesCreateResponse, error)

	// PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse, error)

	PluginsNetboxDnsDnssecpoliciesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse, error)

	// PluginsNetboxDnsDnssecpoliciesDestroyWithResponse request
	PluginsNetboxDnsDnssecpoliciesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesDestroyResponse, error)

	// PluginsNetboxDnsDnssecpoliciesRetrieveWithResponse request
	PluginsNetboxDnsDnssecpoliciesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesRetrieveResponse, error)

	// PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse, error)

	PluginsNetboxDnsDnssecpoliciesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse, error)

	// PluginsNetboxDnsDnssecpoliciesUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsDnssecpoliciesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesUpdateResponse, error)

	PluginsNetboxDnsDnssecpoliciesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesUpdateResponse, error)

	// PluginsNetboxDnsNameserversBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsNameserversBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkDestroyResponse, error)

	PluginsNetboxDnsNameserversBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkDestroyResponse, error)

	// PluginsNetboxDnsNameserversListWithResponse request
	PluginsNetboxDnsNameserversListWithResponse(ctx context.Context, params *PluginsNetboxDnsNameserversListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversListResponse, error)

	// PluginsNetboxDnsNameserversBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsNameserversBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkPartialUpdateResponse, error)

	PluginsNetboxDnsNameserversBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsNameserversCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsNameserversCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversCreateResponse, error)

	PluginsNetboxDnsNameserversCreateWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversCreateResponse, error)

	// PluginsNetboxDnsNameserversBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsNameserversBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkUpdateResponse, error)

	PluginsNetboxDnsNameserversBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkUpdateResponse, error)

	// PluginsNetboxDnsNameserversDestroyWithResponse request
	PluginsNetboxDnsNameserversDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversDestroyResponse, error)

	// PluginsNetboxDnsNameserversRetrieveWithResponse request
	PluginsNetboxDnsNameserversRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversRetrieveResponse, error)

	// PluginsNetboxDnsNameserversPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsNameserversPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversPartialUpdateResponse, error)

	PluginsNetboxDnsNameserversPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsNameserversPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversPartialUpdateResponse, error)

	// PluginsNetboxDnsNameserversUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsNameserversUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversUpdateResponse, error)

	PluginsNetboxDnsNameserversUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsNameserversUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversUpdateResponse, error)

	// PluginsNetboxDnsPrefixesBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsPrefixesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkDestroyResponse, error)

	PluginsNetboxDnsPrefixesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkDestroyResponse, error)

	// PluginsNetboxDnsPrefixesListWithResponse request
	PluginsNetboxDnsPrefixesListWithResponse(ctx context.Context, params *PluginsNetboxDnsPrefixesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesListResponse, error)

	// PluginsNetboxDnsPrefixesBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsPrefixesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkPartialUpdateResponse, error)

	PluginsNetboxDnsPrefixesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsPrefixesCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsPrefixesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesCreateResponse, error)

	PluginsNetboxDnsPrefixesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesCreateResponse, error)

	// PluginsNetboxDnsPrefixesBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsPrefixesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkUpdateResponse, error)

	PluginsNetboxDnsPrefixesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkUpdateResponse, error)

	// PluginsNetboxDnsPrefixesDestroyWithResponse request
	PluginsNetboxDnsPrefixesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesDestroyResponse, error)

	// PluginsNetboxDnsPrefixesRetrieveWithResponse request
	PluginsNetboxDnsPrefixesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesRetrieveResponse, error)

	// PluginsNetboxDnsPrefixesPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsPrefixesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesPartialUpdateResponse, error)

	PluginsNetboxDnsPrefixesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsPrefixesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesPartialUpdateResponse, error)

	// PluginsNetboxDnsPrefixesUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsPrefixesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesUpdateResponse, error)

	PluginsNetboxDnsPrefixesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsPrefixesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesUpdateResponse, error)

	// PluginsNetboxDnsRecordsBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkDestroyResponse, error)

	PluginsNetboxDnsRecordsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkDestroyResponse, error)

	// PluginsNetboxDnsRecordsListWithResponse request
	PluginsNetboxDnsRecordsListWithResponse(ctx context.Context, params *PluginsNetboxDnsRecordsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsListResponse, error)

	// PluginsNetboxDnsRecordsBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkPartialUpdateResponse, error)

	PluginsNetboxDnsRecordsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsRecordsCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsCreateResponse, error)

	PluginsNetboxDnsRecordsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsCreateResponse, error)

	// PluginsNetboxDnsRecordsBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkUpdateResponse, error)

	PluginsNetboxDnsRecordsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkUpdateResponse, error)

	// PluginsNetboxDnsRecordsDestroyWithResponse request
	PluginsNetboxDnsRecordsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsDestroyResponse, error)

	// PluginsNetboxDnsRecordsRetrieveWithResponse request
	PluginsNetboxDnsRecordsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsRetrieveResponse, error)

	// PluginsNetboxDnsRecordsPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsPartialUpdateResponse, error)

	PluginsNetboxDnsRecordsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsPartialUpdateResponse, error)

	// PluginsNetboxDnsRecordsUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsUpdateResponse, error)

	PluginsNetboxDnsRecordsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsUpdateResponse, error)

	// PluginsNetboxDnsRecordtemplatesBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordtemplatesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkDestroyResponse, error)

	PluginsNetboxDnsRecordtemplatesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkDestroyResponse, error)

	// PluginsNetboxDnsRecordtemplatesListWithResponse request
	PluginsNetboxDnsRecordtemplatesListWithResponse(ctx context.Context, params *PluginsNetboxDnsRecordtemplatesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesListResponse, error)

	// PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse, error)

	PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsRecordtemplatesCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordtemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesCreateResponse, error)

	PluginsNetboxDnsRecordtemplatesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesCreateResponse, error)

	// PluginsNetboxDnsRecordtemplatesBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordtemplatesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkUpdateResponse, error)

	PluginsNetboxDnsRecordtemplatesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkUpdateResponse, error)

	// PluginsNetboxDnsRecordtemplatesDestroyWithResponse request
	PluginsNetboxDnsRecordtemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesDestroyResponse, error)

	// PluginsNetboxDnsRecordtemplatesRetrieveWithResponse request
	PluginsNetboxDnsRecordtemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesRetrieveResponse, error)

	// PluginsNetboxDnsRecordtemplatesPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordtemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesPartialUpdateResponse, error)

	PluginsNetboxDnsRecordtemplatesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesPartialUpdateResponse, error)

	// PluginsNetboxDnsRecordtemplatesUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRecordtemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesUpdateResponse, error)

	PluginsNetboxDnsRecordtemplatesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesUpdateResponse, error)

	// PluginsNetboxDnsRegistrarsBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsRegistrarsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkDestroyResponse, error)

	PluginsNetboxDnsRegistrarsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkDestroyResponse, error)

	// PluginsNetboxDnsRegistrarsListWithResponse request
	PluginsNetboxDnsRegistrarsListWithResponse(ctx context.Context, params *PluginsNetboxDnsRegistrarsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsListResponse, error)

	// PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse, error)

	PluginsNetboxDnsRegistrarsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsRegistrarsCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsRegistrarsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsCreateResponse, error)

	PluginsNetboxDnsRegistrarsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsCreateResponse, error)

	// PluginsNetboxDnsRegistrarsBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRegistrarsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkUpdateResponse, error)

	PluginsNetboxDnsRegistrarsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkUpdateResponse, error)

	// PluginsNetboxDnsRegistrarsDestroyWithResponse request
	PluginsNetboxDnsRegistrarsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsDestroyResponse, error)

	// PluginsNetboxDnsRegistrarsRetrieveWithResponse request
	PluginsNetboxDnsRegistrarsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsRetrieveResponse, error)

	// PluginsNetboxDnsRegistrarsPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRegistrarsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsPartialUpdateResponse, error)

	PluginsNetboxDnsRegistrarsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsPartialUpdateResponse, error)

	// PluginsNetboxDnsRegistrarsUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsRegistrarsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsUpdateResponse, error)

	PluginsNetboxDnsRegistrarsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsUpdateResponse, error)

	// PluginsNetboxDnsViewsBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsViewsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkDestroyResponse, error)

	PluginsNetboxDnsViewsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsViewsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkDestroyResponse, error)

	// PluginsNetboxDnsViewsListWithResponse request
	PluginsNetboxDnsViewsListWithResponse(ctx context.Context, params *PluginsNetboxDnsViewsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsListResponse, error)

	// PluginsNetboxDnsViewsBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsViewsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkPartialUpdateResponse, error)

	PluginsNetboxDnsViewsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsViewsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsViewsCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsViewsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsCreateResponse, error)

	PluginsNetboxDnsViewsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsCreateResponse, error)

	// PluginsNetboxDnsViewsBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsViewsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkUpdateResponse, error)

	PluginsNetboxDnsViewsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsViewsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkUpdateResponse, error)

	// PluginsNetboxDnsViewsDestroyWithResponse request
	PluginsNetboxDnsViewsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsDestroyResponse, error)

	// PluginsNetboxDnsViewsRetrieveWithResponse request
	PluginsNetboxDnsViewsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsRetrieveResponse, error)

	// PluginsNetboxDnsViewsPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsViewsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsPartialUpdateResponse, error)

	PluginsNetboxDnsViewsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsPartialUpdateResponse, error)

	// PluginsNetboxDnsViewsUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsViewsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsUpdateResponse, error)

	PluginsNetboxDnsViewsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsUpdateResponse, error)

	// PluginsNetboxDnsZonesBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsZonesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkDestroyResponse, error)

	PluginsNetboxDnsZonesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsZonesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkDestroyResponse, error)

	// PluginsNetboxDnsZonesListWithResponse request
	PluginsNetboxDnsZonesListWithResponse(ctx context.Context, params *PluginsNetboxDnsZonesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesListResponse, error)

	// PluginsNetboxDnsZonesBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkPartialUpdateResponse, error)

	PluginsNetboxDnsZonesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsZonesCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesCreateResponse, error)

	PluginsNetboxDnsZonesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsZonesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesCreateResponse, error)

	// PluginsNetboxDnsZonesBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkUpdateResponse, error)

	PluginsNetboxDnsZonesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkUpdateResponse, error)

	// PluginsNetboxDnsZonesDestroyWithResponse request
	PluginsNetboxDnsZonesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesDestroyResponse, error)

	// PluginsNetboxDnsZonesRetrieveWithResponse request
	PluginsNetboxDnsZonesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesRetrieveResponse, error)

	// PluginsNetboxDnsZonesPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesPartialUpdateResponse, error)

	PluginsNetboxDnsZonesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesPartialUpdateResponse, error)

	// PluginsNetboxDnsZonesUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesUpdateResponse, error)

	PluginsNetboxDnsZonesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesUpdateResponse, error)

	// PluginsNetboxDnsZonetemplatesBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxDnsZonetemplatesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkDestroyResponse, error)

	PluginsNetboxDnsZonetemplatesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkDestroyResponse, error)

	// PluginsNetboxDnsZonetemplatesListWithResponse request
	PluginsNetboxDnsZonetemplatesListWithResponse(ctx context.Context, params *PluginsNetboxDnsZonetemplatesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesListResponse, error)

	// PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse, error)

	PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse, error)

	// PluginsNetboxDnsZonetemplatesCreateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonetemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesCreateResponse, error)

	PluginsNetboxDnsZonetemplatesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesCreateResponse, error)

	// PluginsNetboxDnsZonetemplatesBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonetemplatesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkUpdateResponse, error)

	PluginsNetboxDnsZonetemplatesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkUpdateResponse, error)

	// PluginsNetboxDnsZonetemplatesDestroyWithResponse request
	PluginsNetboxDnsZonetemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesDestroyResponse, error)

	// PluginsNetboxDnsZonetemplatesRetrieveWithResponse request
	PluginsNetboxDnsZonetemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesRetrieveResponse, error)

	// PluginsNetboxDnsZonetemplatesPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonetemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesPartialUpdateResponse, error)

	PluginsNetboxDnsZonetemplatesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesPartialUpdateResponse, error)

	// PluginsNetboxDnsZonetemplatesUpdateWithBodyWithResponse request with any body
	PluginsNetboxDnsZonetemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesUpdateResponse, error)

	PluginsNetboxDnsZonetemplatesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesUpdateResponse, error)

	// PluginsNetboxdhcpProfileBulkDestroyWithBodyWithResponse request with any body
	PluginsNetboxdhcpProfileBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkDestroyResponse, error)

	PluginsNetboxdhcpProfileBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkDestroyResponse, error)

	// PluginsNetboxdhcpProfileListWithResponse request
	PluginsNetboxdhcpProfileListWithResponse(ctx context.Context, params *PluginsNetboxdhcpProfileListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileListResponse, error)

	// PluginsNetboxdhcpProfileBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxdhcpProfileBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkPartialUpdateResponse, error)

	PluginsNetboxdhcpProfileBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkPartialUpdateResponse, error)

	// PluginsNetboxdhcpProfileCreateWithBodyWithResponse request with any body
	PluginsNetboxdhcpProfileCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileCreateResponse, error)

	PluginsNetboxdhcpProfileCreateWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileCreateResponse, error)

	// PluginsNetboxdhcpProfileBulkUpdateWithBodyWithResponse request with any body
	PluginsNetboxdhcpProfileBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkUpdateResponse, error)

	PluginsNetboxdhcpProfileBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkUpdateResponse, error)

	// PluginsNetboxdhcpProfileDestroyWithResponse request
	PluginsNetboxdhcpProfileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileDestroyResponse, error)

	// PluginsNetboxdhcpProfileRetrieveWithResponse request
	PluginsNetboxdhcpProfileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileRetrieveResponse, error)

	// PluginsNetboxdhcpProfilePartialUpdateWithBodyWithResponse request with any body
	PluginsNetboxdhcpProfilePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfilePartialUpdateResponse, error)

	PluginsNetboxdhcpProfilePartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxdhcpProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfilePartialUpdateResponse, error)

	// PluginsNetboxdhcpProfileUpdateWithBodyWithResponse request with any body
	PluginsNetboxdhcpProfileUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileUpdateResponse, error)

	PluginsNetboxdhcpProfileUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxdhcpProfileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileUpdateResponse, error)
}

type PluginsNetboxDnsContactsBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRegistrationContactList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegistrationContact
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistrationContact
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegistrationContact
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrationContact
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrationContact
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsContactsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistrationContact
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsContactsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsContactsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDNSSECKeyTemplateList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DNSSECKeyTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DNSSECKeyTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DNSSECKeyTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSECKeyTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSECKeyTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnsseckeytemplatesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSECKeyTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnsseckeytemplatesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnsseckeytemplatesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDNSSECPolicyList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DNSSECPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DNSSECPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DNSSECPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSECPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSECPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsDnssecpoliciesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSECPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsDnssecpoliciesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsDnssecpoliciesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedNameServerList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NameServer
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NameServer
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NameServer
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameServer
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameServer
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsNameserversUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameServer
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsNameserversUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsNameserversUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPrefixList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Prefix
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Prefix
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Prefix
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Prefix
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Prefix
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsPrefixesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Prefix
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsPrefixesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsPrefixesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRecordList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Record
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Record
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Record
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Record
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Record
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Record
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRecordTemplateList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RecordTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RecordTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RecordTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecordTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecordTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRecordtemplatesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecordTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRecordtemplatesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRecordtemplatesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRegistrarList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Registrar
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Registrar
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Registrar
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registrar
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registrar
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsRegistrarsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registrar
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsRegistrarsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsRegistrarsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedViewList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]View
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *View
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]View
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *View
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *View
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsViewsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *View
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsViewsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsViewsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedZoneList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Zone
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Zone
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Zone
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedZoneTemplateList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ZoneTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ZoneTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ZoneTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxDnsZonetemplatesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneTemplate
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxDnsZonetemplatesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxDnsZonetemplatesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProfileList
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Profile
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Profile
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Profile
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Profile
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfilePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Profile
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfilePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfilePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsNetboxdhcpProfileUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Profile
}

// Status returns HTTPResponse.Status
func (r PluginsNetboxdhcpProfileUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsNetboxdhcpProfileUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PluginsNetboxDnsContactsBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsContactsBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsContactsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsContactsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsContactsListWithResponse request returning *PluginsNetboxDnsContactsListResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsListWithResponse(ctx context.Context, params *PluginsNetboxDnsContactsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsListResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsListResponse(rsp)
}

// PluginsNetboxDnsContactsBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsContactsBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsContactsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsContactsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsContactsCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsContactsCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsContactsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsContactsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsCreateResponse(rsp)
}

// PluginsNetboxDnsContactsBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsContactsBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsContactsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsContactsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsContactsDestroyWithResponse request returning *PluginsNetboxDnsContactsDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsDestroyResponse(rsp)
}

// PluginsNetboxDnsContactsRetrieveWithResponse request returning *PluginsNetboxDnsContactsRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsRetrieveResponse(rsp)
}

// PluginsNetboxDnsContactsPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsContactsPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsContactsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsContactsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsContactsUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsContactsUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsContactsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsContactsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsContactsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsContactsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsContactsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsContactsUpdateResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesListWithResponse request returning *PluginsNetboxDnsDnsseckeytemplatesListResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesListWithResponse(ctx context.Context, params *PluginsNetboxDnsDnsseckeytemplatesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesListResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesListResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnsseckeytemplatesCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesCreateResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnsseckeytemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesDestroyWithResponse request returning *PluginsNetboxDnsDnsseckeytemplatesDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesDestroyResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesRetrieveWithResponse request returning *PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesRetrieveResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsDnsseckeytemplatesUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnsseckeytemplatesUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnsseckeytemplatesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnsseckeytemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnsseckeytemplatesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnsseckeytemplatesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnsseckeytemplatesUpdateResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesListWithResponse request returning *PluginsNetboxDnsDnssecpoliciesListResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesListWithResponse(ctx context.Context, params *PluginsNetboxDnsDnssecpoliciesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesListResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesListResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnssecpoliciesCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesCreateResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsDnssecpoliciesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesDestroyWithResponse request returning *PluginsNetboxDnsDnssecpoliciesDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesDestroyResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesRetrieveWithResponse request returning *PluginsNetboxDnsDnssecpoliciesRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesRetrieveResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsDnssecpoliciesUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsDnssecpoliciesUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsDnssecpoliciesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsDnssecpoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsDnssecpoliciesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsDnssecpoliciesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsDnssecpoliciesUpdateResponse(rsp)
}

// PluginsNetboxDnsNameserversBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsNameserversBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsNameserversBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsNameserversListWithResponse request returning *PluginsNetboxDnsNameserversListResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversListWithResponse(ctx context.Context, params *PluginsNetboxDnsNameserversListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversListResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversListResponse(rsp)
}

// PluginsNetboxDnsNameserversBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsNameserversBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsNameserversBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsNameserversCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsNameserversCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsNameserversCreateWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversCreateResponse(rsp)
}

// PluginsNetboxDnsNameserversBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsNameserversBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsNameserversBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsNameserversBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsNameserversDestroyWithResponse request returning *PluginsNetboxDnsNameserversDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversDestroyResponse(rsp)
}

// PluginsNetboxDnsNameserversRetrieveWithResponse request returning *PluginsNetboxDnsNameserversRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversRetrieveResponse(rsp)
}

// PluginsNetboxDnsNameserversPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsNameserversPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsNameserversPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsNameserversPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsNameserversUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsNameserversUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsNameserversUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsNameserversUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsNameserversUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsNameserversUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsNameserversUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsNameserversUpdateResponse(rsp)
}

// PluginsNetboxDnsPrefixesBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsPrefixesBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsPrefixesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsPrefixesListWithResponse request returning *PluginsNetboxDnsPrefixesListResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesListWithResponse(ctx context.Context, params *PluginsNetboxDnsPrefixesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesListResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesListResponse(rsp)
}

// PluginsNetboxDnsPrefixesBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsPrefixesBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsPrefixesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsPrefixesCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsPrefixesCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsPrefixesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesCreateResponse(rsp)
}

// PluginsNetboxDnsPrefixesBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsPrefixesBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsPrefixesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsPrefixesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsPrefixesDestroyWithResponse request returning *PluginsNetboxDnsPrefixesDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesDestroyResponse(rsp)
}

// PluginsNetboxDnsPrefixesRetrieveWithResponse request returning *PluginsNetboxDnsPrefixesRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesRetrieveResponse(rsp)
}

// PluginsNetboxDnsPrefixesPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsPrefixesPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsPrefixesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsPrefixesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsPrefixesUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsPrefixesUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsPrefixesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsPrefixesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsPrefixesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsPrefixesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsPrefixesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsPrefixesUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordsBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordsBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsRecordsListWithResponse request returning *PluginsNetboxDnsRecordsListResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsListWithResponse(ctx context.Context, params *PluginsNetboxDnsRecordsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsListResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsListResponse(rsp)
}

// PluginsNetboxDnsRecordsBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordsBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordsCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordsCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsCreateResponse(rsp)
}

// PluginsNetboxDnsRecordsBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordsBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordsDestroyWithResponse request returning *PluginsNetboxDnsRecordsDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsDestroyResponse(rsp)
}

// PluginsNetboxDnsRecordsRetrieveWithResponse request returning *PluginsNetboxDnsRecordsRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsRetrieveResponse(rsp)
}

// PluginsNetboxDnsRecordsPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordsPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordsUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordsUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordsUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordtemplatesBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesListWithResponse request returning *PluginsNetboxDnsRecordtemplatesListResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesListWithResponse(ctx context.Context, params *PluginsNetboxDnsRecordtemplatesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesListResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesListResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordtemplatesCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesCreateResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordtemplatesBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRecordtemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesDestroyWithResponse request returning *PluginsNetboxDnsRecordtemplatesDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesDestroyResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesRetrieveWithResponse request returning *PluginsNetboxDnsRecordtemplatesRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesRetrieveResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordtemplatesPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsRecordtemplatesUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRecordtemplatesUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRecordtemplatesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRecordtemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRecordtemplatesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRecordtemplatesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRecordtemplatesUpdateResponse(rsp)
}

// PluginsNetboxDnsRegistrarsBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRegistrarsBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsRegistrarsListWithResponse request returning *PluginsNetboxDnsRegistrarsListResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsListWithResponse(ctx context.Context, params *PluginsNetboxDnsRegistrarsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsListResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsListResponse(rsp)
}

// PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsRegistrarsCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRegistrarsCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsCreateResponse(rsp)
}

// PluginsNetboxDnsRegistrarsBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRegistrarsBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsRegistrarsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsRegistrarsDestroyWithResponse request returning *PluginsNetboxDnsRegistrarsDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsDestroyResponse(rsp)
}

// PluginsNetboxDnsRegistrarsRetrieveWithResponse request returning *PluginsNetboxDnsRegistrarsRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsRetrieveResponse(rsp)
}

// PluginsNetboxDnsRegistrarsPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRegistrarsPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsRegistrarsUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsRegistrarsUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsRegistrarsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsRegistrarsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsRegistrarsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsRegistrarsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsRegistrarsUpdateResponse(rsp)
}

// PluginsNetboxDnsViewsBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsViewsBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsViewsBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsViewsBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsViewsListWithResponse request returning *PluginsNetboxDnsViewsListResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsListWithResponse(ctx context.Context, params *PluginsNetboxDnsViewsListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsListResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsListResponse(rsp)
}

// PluginsNetboxDnsViewsBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsViewsBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsViewsBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsViewsBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsViewsCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsViewsCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsViewsCreateWithResponse(ctx context.Context, body PluginsNetboxDnsViewsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsCreateResponse(rsp)
}

// PluginsNetboxDnsViewsBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsViewsBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsViewsBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsViewsBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsViewsDestroyWithResponse request returning *PluginsNetboxDnsViewsDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsDestroyResponse(rsp)
}

// PluginsNetboxDnsViewsRetrieveWithResponse request returning *PluginsNetboxDnsViewsRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsRetrieveResponse(rsp)
}

// PluginsNetboxDnsViewsPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsViewsPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsViewsPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsViewsPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsViewsUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsViewsUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsViewsUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsViewsUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsViewsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsViewsUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsViewsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsViewsUpdateResponse(rsp)
}

// PluginsNetboxDnsZonesBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonesBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsZonesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsZonesListWithResponse request returning *PluginsNetboxDnsZonesListResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesListWithResponse(ctx context.Context, params *PluginsNetboxDnsZonesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesListResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesListResponse(rsp)
}

// PluginsNetboxDnsZonesBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonesBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsZonesCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonesCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsZonesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesCreateResponse(rsp)
}

// PluginsNetboxDnsZonesBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonesBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsZonesDestroyWithResponse request returning *PluginsNetboxDnsZonesDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesDestroyResponse(rsp)
}

// PluginsNetboxDnsZonesRetrieveWithResponse request returning *PluginsNetboxDnsZonesRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesRetrieveResponse(rsp)
}

// PluginsNetboxDnsZonesPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonesPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsZonesUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonesUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonesUpdateResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonetemplatesBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesBulkDestroyResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesListWithResponse request returning *PluginsNetboxDnsZonetemplatesListResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesListWithResponse(ctx context.Context, params *PluginsNetboxDnsZonetemplatesListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesListResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesListResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonetemplatesCreateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesCreateWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesCreateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesCreateResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonetemplatesBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxDnsZonetemplatesBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesBulkUpdateResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesDestroyWithResponse request returning *PluginsNetboxDnsZonetemplatesDestroyResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesDestroyResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesDestroyResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesRetrieveWithResponse request returning *PluginsNetboxDnsZonetemplatesRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesRetrieveResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonetemplatesPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesPartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesPartialUpdateResponse(rsp)
}

// PluginsNetboxDnsZonetemplatesUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxDnsZonetemplatesUpdateResponse
func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxDnsZonetemplatesUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxDnsZonetemplatesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxDnsZonetemplatesUpdateResponse, error) {
	rsp, err := c.PluginsNetboxDnsZonetemplatesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxDnsZonetemplatesUpdateResponse(rsp)
}

// PluginsNetboxdhcpProfileBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsNetboxdhcpProfileBulkDestroyResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxdhcpProfileBulkDestroyWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkDestroyResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileBulkDestroyResponse(rsp)
}

// PluginsNetboxdhcpProfileListWithResponse request returning *PluginsNetboxdhcpProfileListResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileListWithResponse(ctx context.Context, params *PluginsNetboxdhcpProfileListParams, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileListResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileListResponse(rsp)
}

// PluginsNetboxdhcpProfileBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxdhcpProfileBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxdhcpProfileBulkPartialUpdateWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileBulkPartialUpdateResponse(rsp)
}

// PluginsNetboxdhcpProfileCreateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxdhcpProfileCreateResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileCreateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxdhcpProfileCreateWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileCreateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileCreateResponse(rsp)
}

// PluginsNetboxdhcpProfileBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxdhcpProfileBulkUpdateResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxdhcpProfileBulkUpdateWithResponse(ctx context.Context, body PluginsNetboxdhcpProfileBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileBulkUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileBulkUpdateResponse(rsp)
}

// PluginsNetboxdhcpProfileDestroyWithResponse request returning *PluginsNetboxdhcpProfileDestroyResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileDestroyResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileDestroyResponse(rsp)
}

// PluginsNetboxdhcpProfileRetrieveWithResponse request returning *PluginsNetboxdhcpProfileRetrieveResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileRetrieveResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileRetrieveResponse(rsp)
}

// PluginsNetboxdhcpProfilePartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxdhcpProfilePartialUpdateResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfilePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfilePartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfilePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfilePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxdhcpProfilePartialUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxdhcpProfilePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfilePartialUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfilePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfilePartialUpdateResponse(rsp)
}

// PluginsNetboxdhcpProfileUpdateWithBodyWithResponse request with arbitrary body returning *PluginsNetboxdhcpProfileUpdateResponse
func (c *ClientWithResponses) PluginsNetboxdhcpProfileUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsNetboxdhcpProfileUpdateWithResponse(ctx context.Context, id int, body PluginsNetboxdhcpProfileUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsNetboxdhcpProfileUpdateResponse, error) {
	rsp, err := c.PluginsNetboxdhcpProfileUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsNetboxdhcpProfileUpdateResponse(rsp)
}

// ParsePluginsNetboxDnsContactsBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsContactsBulkDestroyWithResponse call
func ParsePluginsNetboxDnsContactsBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsContactsBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsListResponse parses an HTTP response from a PluginsNetboxDnsContactsListWithResponse call
func ParsePluginsNetboxDnsContactsListResponse(rsp *http.Response) (*PluginsNetboxDnsContactsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRegistrationContactList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsContactsBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsContactsBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsContactsBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegistrationContact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsCreateResponse parses an HTTP response from a PluginsNetboxDnsContactsCreateWithResponse call
func ParsePluginsNetboxDnsContactsCreateResponse(rsp *http.Response) (*PluginsNetboxDnsContactsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistrationContact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsContactsBulkUpdateWithResponse call
func ParsePluginsNetboxDnsContactsBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsContactsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegistrationContact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsDestroyResponse parses an HTTP response from a PluginsNetboxDnsContactsDestroyWithResponse call
func ParsePluginsNetboxDnsContactsDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsContactsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsRetrieveResponse parses an HTTP response from a PluginsNetboxDnsContactsRetrieveWithResponse call
func ParsePluginsNetboxDnsContactsRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsContactsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrationContact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsContactsPartialUpdateWithResponse call
func ParsePluginsNetboxDnsContactsPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsContactsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrationContact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsContactsUpdateResponse parses an HTTP response from a PluginsNetboxDnsContactsUpdateWithResponse call
func ParsePluginsNetboxDnsContactsUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsContactsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsContactsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrationContact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesBulkDestroyWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesListResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesListWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesListResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDNSSECKeyTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DNSSECKeyTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesCreateResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesCreateWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesCreateResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DNSSECKeyTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesBulkUpdateWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DNSSECKeyTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesDestroyResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesDestroyWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesRetrieveResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesRetrieveWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSECKeyTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesPartialUpdateWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSECKeyTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnsseckeytemplatesUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnsseckeytemplatesUpdateWithResponse call
func ParsePluginsNetboxDnsDnsseckeytemplatesUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnsseckeytemplatesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnsseckeytemplatesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSECKeyTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesBulkDestroyWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesListResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesListWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesListResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDNSSECPolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DNSSECPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesCreateResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesCreateWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesCreateResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DNSSECPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesBulkUpdateWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DNSSECPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesDestroyResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesDestroyWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesRetrieveResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesRetrieveWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSECPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesPartialUpdateWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSECPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsDnssecpoliciesUpdateResponse parses an HTTP response from a PluginsNetboxDnsDnssecpoliciesUpdateWithResponse call
func ParsePluginsNetboxDnsDnssecpoliciesUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsDnssecpoliciesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsDnssecpoliciesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSECPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsNameserversBulkDestroyWithResponse call
func ParsePluginsNetboxDnsNameserversBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversListResponse parses an HTTP response from a PluginsNetboxDnsNameserversListWithResponse call
func ParsePluginsNetboxDnsNameserversListResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedNameServerList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsNameserversBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsNameserversBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NameServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversCreateResponse parses an HTTP response from a PluginsNetboxDnsNameserversCreateWithResponse call
func ParsePluginsNetboxDnsNameserversCreateResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NameServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsNameserversBulkUpdateWithResponse call
func ParsePluginsNetboxDnsNameserversBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NameServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversDestroyResponse parses an HTTP response from a PluginsNetboxDnsNameserversDestroyWithResponse call
func ParsePluginsNetboxDnsNameserversDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversRetrieveResponse parses an HTTP response from a PluginsNetboxDnsNameserversRetrieveWithResponse call
func ParsePluginsNetboxDnsNameserversRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsNameserversPartialUpdateWithResponse call
func ParsePluginsNetboxDnsNameserversPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsNameserversUpdateResponse parses an HTTP response from a PluginsNetboxDnsNameserversUpdateWithResponse call
func ParsePluginsNetboxDnsNameserversUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsNameserversUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsNameserversUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsPrefixesBulkDestroyWithResponse call
func ParsePluginsNetboxDnsPrefixesBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesListResponse parses an HTTP response from a PluginsNetboxDnsPrefixesListWithResponse call
func ParsePluginsNetboxDnsPrefixesListResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPrefixList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsPrefixesBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsPrefixesBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Prefix
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesCreateResponse parses an HTTP response from a PluginsNetboxDnsPrefixesCreateWithResponse call
func ParsePluginsNetboxDnsPrefixesCreateResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Prefix
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsPrefixesBulkUpdateWithResponse call
func ParsePluginsNetboxDnsPrefixesBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Prefix
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesDestroyResponse parses an HTTP response from a PluginsNetboxDnsPrefixesDestroyWithResponse call
func ParsePluginsNetboxDnsPrefixesDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesRetrieveResponse parses an HTTP response from a PluginsNetboxDnsPrefixesRetrieveWithResponse call
func ParsePluginsNetboxDnsPrefixesRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prefix
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsPrefixesPartialUpdateWithResponse call
func ParsePluginsNetboxDnsPrefixesPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prefix
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsPrefixesUpdateResponse parses an HTTP response from a PluginsNetboxDnsPrefixesUpdateWithResponse call
func ParsePluginsNetboxDnsPrefixesUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsPrefixesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsPrefixesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prefix
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsRecordsBulkDestroyWithResponse call
func ParsePluginsNetboxDnsRecordsBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsListResponse parses an HTTP response from a PluginsNetboxDnsRecordsListWithResponse call
func ParsePluginsNetboxDnsRecordsListResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRecordList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordsBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsRecordsBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Record
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsCreateResponse parses an HTTP response from a PluginsNetboxDnsRecordsCreateWithResponse call
func ParsePluginsNetboxDnsRecordsCreateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Record
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordsBulkUpdateWithResponse call
func ParsePluginsNetboxDnsRecordsBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Record
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsDestroyResponse parses an HTTP response from a PluginsNetboxDnsRecordsDestroyWithResponse call
func ParsePluginsNetboxDnsRecordsDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsRetrieveResponse parses an HTTP response from a PluginsNetboxDnsRecordsRetrieveWithResponse call
func ParsePluginsNetboxDnsRecordsRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Record
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordsPartialUpdateWithResponse call
func ParsePluginsNetboxDnsRecordsPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Record
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordsUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordsUpdateWithResponse call
func ParsePluginsNetboxDnsRecordsUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Record
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesBulkDestroyWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesListResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesListWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesListResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRecordTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RecordTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesCreateResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesCreateWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesCreateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RecordTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesBulkUpdateWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RecordTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesDestroyResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesDestroyWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesRetrieveResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesRetrieveWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecordTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesPartialUpdateWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecordTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRecordtemplatesUpdateResponse parses an HTTP response from a PluginsNetboxDnsRecordtemplatesUpdateWithResponse call
func ParsePluginsNetboxDnsRecordtemplatesUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRecordtemplatesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRecordtemplatesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecordTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsBulkDestroyWithResponse call
func ParsePluginsNetboxDnsRegistrarsBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsListResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsListWithResponse call
func ParsePluginsNetboxDnsRegistrarsListResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRegistrarList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsRegistrarsBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Registrar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsCreateResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsCreateWithResponse call
func ParsePluginsNetboxDnsRegistrarsCreateResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Registrar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsBulkUpdateWithResponse call
func ParsePluginsNetboxDnsRegistrarsBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Registrar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsDestroyResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsDestroyWithResponse call
func ParsePluginsNetboxDnsRegistrarsDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsRetrieveResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsRetrieveWithResponse call
func ParsePluginsNetboxDnsRegistrarsRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registrar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsPartialUpdateWithResponse call
func ParsePluginsNetboxDnsRegistrarsPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registrar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsRegistrarsUpdateResponse parses an HTTP response from a PluginsNetboxDnsRegistrarsUpdateWithResponse call
func ParsePluginsNetboxDnsRegistrarsUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsRegistrarsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsRegistrarsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registrar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsViewsBulkDestroyWithResponse call
func ParsePluginsNetboxDnsViewsBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsViewsBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsListResponse parses an HTTP response from a PluginsNetboxDnsViewsListWithResponse call
func ParsePluginsNetboxDnsViewsListResponse(rsp *http.Response) (*PluginsNetboxDnsViewsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedViewList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsViewsBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsViewsBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsViewsBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsCreateResponse parses an HTTP response from a PluginsNetboxDnsViewsCreateWithResponse call
func ParsePluginsNetboxDnsViewsCreateResponse(rsp *http.Response) (*PluginsNetboxDnsViewsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsViewsBulkUpdateWithResponse call
func ParsePluginsNetboxDnsViewsBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsViewsBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsDestroyResponse parses an HTTP response from a PluginsNetboxDnsViewsDestroyWithResponse call
func ParsePluginsNetboxDnsViewsDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsViewsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsRetrieveResponse parses an HTTP response from a PluginsNetboxDnsViewsRetrieveWithResponse call
func ParsePluginsNetboxDnsViewsRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsViewsRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsViewsPartialUpdateWithResponse call
func ParsePluginsNetboxDnsViewsPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsViewsPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsViewsUpdateResponse parses an HTTP response from a PluginsNetboxDnsViewsUpdateWithResponse call
func ParsePluginsNetboxDnsViewsUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsViewsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsViewsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest View
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsZonesBulkDestroyWithResponse call
func ParsePluginsNetboxDnsZonesBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsZonesBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesListResponse parses an HTTP response from a PluginsNetboxDnsZonesListWithResponse call
func ParsePluginsNetboxDnsZonesListResponse(rsp *http.Response) (*PluginsNetboxDnsZonesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedZoneList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonesBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsZonesBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonesBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesCreateResponse parses an HTTP response from a PluginsNetboxDnsZonesCreateWithResponse call
func ParsePluginsNetboxDnsZonesCreateResponse(rsp *http.Response) (*PluginsNetboxDnsZonesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonesBulkUpdateWithResponse call
func ParsePluginsNetboxDnsZonesBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonesBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesDestroyResponse parses an HTTP response from a PluginsNetboxDnsZonesDestroyWithResponse call
func ParsePluginsNetboxDnsZonesDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsZonesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesRetrieveResponse parses an HTTP response from a PluginsNetboxDnsZonesRetrieveWithResponse call
func ParsePluginsNetboxDnsZonesRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsZonesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonesPartialUpdateWithResponse call
func ParsePluginsNetboxDnsZonesPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonesUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonesUpdateWithResponse call
func ParsePluginsNetboxDnsZonesUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesBulkDestroyResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesBulkDestroyWithResponse call
func ParsePluginsNetboxDnsZonetemplatesBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesListResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesListWithResponse call
func ParsePluginsNetboxDnsZonetemplatesListResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedZoneTemplateList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesBulkPartialUpdateWithResponse call
func ParsePluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ZoneTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesCreateResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesCreateWithResponse call
func ParsePluginsNetboxDnsZonetemplatesCreateResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ZoneTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesBulkUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesBulkUpdateWithResponse call
func ParsePluginsNetboxDnsZonetemplatesBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ZoneTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesDestroyResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesDestroyWithResponse call
func ParsePluginsNetboxDnsZonetemplatesDestroyResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesRetrieveResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesRetrieveWithResponse call
func ParsePluginsNetboxDnsZonetemplatesRetrieveResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesPartialUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesPartialUpdateWithResponse call
func ParsePluginsNetboxDnsZonetemplatesPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxDnsZonetemplatesUpdateResponse parses an HTTP response from a PluginsNetboxDnsZonetemplatesUpdateWithResponse call
func ParsePluginsNetboxDnsZonetemplatesUpdateResponse(rsp *http.Response) (*PluginsNetboxDnsZonetemplatesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxDnsZonetemplatesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileBulkDestroyResponse parses an HTTP response from a PluginsNetboxdhcpProfileBulkDestroyWithResponse call
func ParsePluginsNetboxdhcpProfileBulkDestroyResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileListResponse parses an HTTP response from a PluginsNetboxdhcpProfileListWithResponse call
func ParsePluginsNetboxdhcpProfileListResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProfileList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileBulkPartialUpdateResponse parses an HTTP response from a PluginsNetboxdhcpProfileBulkPartialUpdateWithResponse call
func ParsePluginsNetboxdhcpProfileBulkPartialUpdateResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileCreateResponse parses an HTTP response from a PluginsNetboxdhcpProfileCreateWithResponse call
func ParsePluginsNetboxdhcpProfileCreateResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileBulkUpdateResponse parses an HTTP response from a PluginsNetboxdhcpProfileBulkUpdateWithResponse call
func ParsePluginsNetboxdhcpProfileBulkUpdateResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileDestroyResponse parses an HTTP response from a PluginsNetboxdhcpProfileDestroyWithResponse call
func ParsePluginsNetboxdhcpProfileDestroyResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileRetrieveResponse parses an HTTP response from a PluginsNetboxdhcpProfileRetrieveWithResponse call
func ParsePluginsNetboxdhcpProfileRetrieveResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfilePartialUpdateResponse parses an HTTP response from a PluginsNetboxdhcpProfilePartialUpdateWithResponse call
func ParsePluginsNetboxdhcpProfilePartialUpdateResponse(rsp *http.Response) (*PluginsNetboxdhcpProfilePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfilePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsNetboxdhcpProfileUpdateResponse parses an HTTP response from a PluginsNetboxdhcpProfileUpdateWithResponse call
func ParsePluginsNetboxdhcpProfileUpdateResponse(rsp *http.Response) (*PluginsNetboxdhcpProfileUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsNetboxdhcpProfileUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
